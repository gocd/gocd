/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m      = require('mithril');
const _      = require('lodash');
const moment = require("moment");
require("moment-duration-format");
const StagesInstanceWidget   = require('views/dashboard/stages_instance_widget');
const MaterialRevisionWidget = require('views/dashboard/trigger_with_options/material_revision_widget');

const PipelineInstanceWidget = {
  onupdate(vnode) {
    this.adjustPositionOfPopup = () => {
      const widthOfWindow           = window.innerWidth;
      const popup                   = vnode.dom.querySelector('.material_changes');
      const rightCoordinateOfWidget = popup? popup.getBoundingClientRect().right: 0;
      if (rightCoordinateOfWidget > widthOfWindow) {
        popup.style.right = '0px';
      }
    };

    this.adjustPositionOfPopup();
  },

  view: (vnode) => {
    const instance     = vnode.attrs.instance;
    const dropdown     = vnode.attrs.dropdown;
    const pipelineName = vnode.attrs.pipelineName;

    const scheduledAt           = moment(new Date(instance.scheduledAt));
    const scheduledAtLocalTime  = scheduledAt.format('[on] DD MMM YYYY [at] HH:mm:ss [Local Time]');
    const scheduledAtServerTime = scheduledAt.format("[Server Time:] DD MMM, YYYY [at] HH:mm:ss Z");
    let dropdownWidget;

    if (dropdown.isDropDownOpen(pipelineName)) {
      dropdownWidget = <div class="material_changes" onclick={(e) => e.stopPropagation()}>
        {_.map(instance.materialRevisions, (revision) => {
          return (<MaterialRevisionWidget revision={revision}/>);
        })}
      </div>;
    }

    return (
      <div class="pipeline_instance">
        <label class="pipeline_instance-label">Instance: {instance.label} </label>
        <div class="more_info">
          <ul class="info">
            <li><a href={instance.comparePath}> Compare </a></li>
            <li><a onclick={(e) => {
              dropdown.toggle(pipelineName);
              e.stopPropagation();
            }}><span class="changes"> Changes</span> </a></li>
            <li><a href={instance.vsmPath}> VSM </a></li>
          </ul>
          {dropdownWidget}
        </div>
        <div class="pipeline_instance-details">
          <div>{instance.triggeredBy}</div>
          <div title={scheduledAtServerTime}>{scheduledAtLocalTime}</div>
        </div>
        <StagesInstanceWidget stages={instance.stages}/>
      </div>
    );
  }
};

module.exports = PipelineInstanceWidget;
