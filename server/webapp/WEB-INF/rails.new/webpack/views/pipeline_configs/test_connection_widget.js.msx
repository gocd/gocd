/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let m = require('mithril');
let f = require('helpers/form_helper');

const Stream          = require('mithril/stream');
const _               = require('lodash');
const ComponentMixins = require('helpers/mithril_component_mixins');

const TestConnectionWidget = {
  Connection: {
    State () {
      const self        = this;
      this.status       = Stream('');
      this.errorMessage = Stream('');

      this.markSuccess = function () {
        self.status('Success');
      };

      this.markFailure = function (message) {
        self.status('Error');
        self.errorMessage(message);
      };

      this.markInProgress = function () {
        self.status('InProgress');
      };

      this.hasFailed = function () {
        return self.status() === 'Error';
      };
    }
  },

  oninit (vnode) {
    const self           = vnode.state;
    self.args            = vnode.attrs;
    self.material        = vnode.attrs.material;
    self.pipelineName    = vnode.attrs.pipelineName;
    self.connectionState = new TestConnectionWidget.Connection.State();
    ComponentMixins.HasViewModel.call(self);
    self.vmState('connectionState', self.connectionState);

    self.testConnection = function () {
      const connectionState = this.vmState('connectionState');

      connectionState.markInProgress();
      m.redraw();

      this.material.testConnection(this.pipelineName)
        .then(connectionState.markSuccess, connectionState.markFailure)
        .always(m.redraw);
    };
  },

  view (vnode) {
    const connectionState            = vnode.state.vmState('connectionState');
    const testConnectionStatus       = connectionState.status();
    const connectionStatusToCSSClass = {
      InProgress: 'in-progress disabled',
      Error:      'alert',
      Success:    'success'
    };

    const showFailureMessage = function (state) {
      if (state.hasFailed()) {
        return (<f.alert>{state.errorMessage()}</f.alert>);
      }
    };

    return (
      <div>
        <f.button
          onclick={vnode.state.testConnection.bind(vnode.state)}
          class={_.compact(['test-connection', connectionStatusToCSSClass[testConnectionStatus]]).join(' ')}>
          Test Connection
          <span class={_.compact(['save-state', connectionStatusToCSSClass[testConnectionStatus]]).join(' ')}/>
        </f.button>
        {showFailureMessage(connectionState)}
      </div>
    );
  }
};
module.exports             = TestConnectionWidget;
