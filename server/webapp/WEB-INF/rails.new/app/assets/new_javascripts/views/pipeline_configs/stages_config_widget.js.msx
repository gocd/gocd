/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'string-plus', 'jquery',
  'helpers/form_helper', 'helpers/pipeline_configs/tooltips', 'helpers/mithril_component_mixins',
  'models/shared/users', 'models/shared/roles',
  'views/pipeline_configs/environment_variables_config_widget', 'views/pipeline_configs/jobs_config_widget',
  'jquery.textcomplete'
], function (m, s, $,
             f, tt, ComponentMixins,
             Users, Roles,
             EnvironmentVariablesConfigWidget, JobsConfigWidget) {

  var autoComplete = function (values, model, attrName) {
    return function (elem, isInitialized, context) {
      if (!isInitialized) {
        var $inputElem = $($(elem).find("input[data-prop-name='" + attrName + "']"));

        context.onunload = function() {
          $inputElem.textcomplete('destroy');
        };

        $inputElem.textcomplete([
          {
            words:   values, //the list of auto-completes
            match:   /(^|,)\s*([^,]+)$/,
            index:   2, // use the second match in the regex to extract the search term
            search:  function (term, callback) {
              term = term.toLowerCase();
              callback($.map(this.words, function (word) {
                return word.toLowerCase().indexOf(term) === 0 ? word : null;
              }));
            },
            replace: function (word) {
              return '$1 ' + word + ', ';
            }
          }
        ]);

        $inputElem.on('textComplete:select', function () {
          model[attrName]($inputElem.val());
        });
      }
    };
  };

  var ApprovalWidget = {
    controller: function (args) {
      this.args = args;
      ComponentMixins.HasViewModel.call(this);
    },

    view: function (ctrl, args) {
      return (
        <f.accordion accordionTitles={[(<span>Stage Operate Permissions</span>)]}
                     accordionKeys={['stagePermissions']}
                     selectedIndex={ctrl.vmState('stagePermissionsSelected', m.prop(-1))}
                     class='accordion-inner'>
          <div>
            <f.row>
            <f.warning>Permissions will be inherited from the pipeline group if not specified.</f.warning>
            </f.row>
            <f.row>
              <f.inputWithLabel config={autoComplete(Users.list, args.approval().authorization(), 'users')}
                                attrName='users'
                                model={args.approval().authorization()}/>
              <f.inputWithLabel config={autoComplete(Roles.list, args.approval().authorization(), 'roles')}
                                attrName='roles'
                                model={args.approval().authorization()} end/>

            </f.row>
          </div>
        </f.accordion>
      );
    }
  };

  var SettingsWidget = {
    controller: function (args) {
      this.args = args;
      ComponentMixins.HasViewModel.call(this);
    },

    view: function(ctrl, args) {
      var stage     = args.stage;
      var radioName = 'radio-' + stage.uuid() + '-approval-type';
      var settingSelected = s.isBlank(args.stage.name()) ? 0 : -1;

      return (
        <f.accordion accordionTitles={[(<span>Stage Settings</span>)]}
                     accordionKeys={['stageSettings']}
                     selectedIndex={ctrl.vmState('stageSettingsSelected', m.prop(settingSelected))}
                     class='accordion-inner'>
          <f.row>
            <f.column size={4}>
              <f.row collapse>
                <f.inputWithLabel attrName='name'
                                  label='Stage name'
                                  model={stage}
                                  validate={true}
                                  isRequired={true}
                                  size={12}
                                  largeSize={12}/>
              </f.row>
              <label>Stage Type
                <f.tooltip tooltip={{
                  content: tt.stage.stageType,
                  direction: 'bottom',
                  size: 'small'
                }}/>
              </label>
              <f.row>
                <f.column size={6} largeSize={6}>
                  <input type='radio'
                         name={radioName}
                         id={radioName + '-success'}
                         checked={stage.approval().isSuccess()}
                         onchange={stage.approval().makeOnSuccess.bind(stage.approval())}/>
                  <label for={radioName + '-success'}>On Success</label>
                </f.column>
                <f.column size={6} largeSize={6} end>
                  <input type='radio'
                         name={radioName}
                         id={radioName + '-manual'}
                         checked={stage.approval().isManual()}
                         onchange={stage.approval().makeManual.bind(stage.approval())}/>
                  <label for={radioName + '-manual'}>Manual</label>
                </f.column>
              </f.row>
            </f.column>

            <f.column size={4} largeSize={5} end>
              <label></label>
              <f.row>
                <f.checkBox model={stage}
                            attrName='fetchMaterials'
                            size={12}
                            tooltip={{
                              content: tt.stage.fetchMaterials,
                              direction: 'bottom',
                              size: 'small'
                            }}/>
              </f.row>
              <f.row>
                <f.checkBox model={stage}
                            attrName='neverCleanupArtifacts'
                            size={12}
                            tooltip={{
                              content: tt.stage.neverCleanupArtifacts,
                              direction: 'bottom',
                              size: 'small'
                            }}/>
              </f.row>
              <f.row>
                <f.checkBox model={stage}
                            attrName='cleanWorkingDirectory'
                            label='Delete working directory on every build'
                            size={12}
                            tooltip={{
                              content: tt.stage.cleanWorkingDirectory,
                              direction: 'bottom',
                              size: 'small'
                            }}
                            end={true}/>
              </f.row>
            </f.column>
          </f.row>
        </f.accordion>
      );
    }
  };

  var StageConfigDefinitionWidget = {
    controller: function (args) {
      this.args = args;
      ComponentMixins.HasViewModel.call(this);
    },

    view: function (ctrl, args) {
      var stage      = args.stage;
      var stageIndex = args.pipeline().stages().indexOfStage(args.stage);

      return (
        <div class='stage-definition' data-stage-name={stage.name()}>
          <f.removeButton onclick={args.onRemove} class="remove-stage"/>

          <SettingsWidget stage={stage}
                          vm={ctrl.vmState('settingsWidgetConfig-' + stageIndex)}/>
          <ApprovalWidget approval={stage.approval}
                          vm={ctrl.vmState('approvalWidgetConfig-' + stageIndex)}/>
          <EnvironmentVariablesConfigWidget title='Stages Environment Variables'
                                            variables={stage.environmentVariables}
                                            key={stage.environmentVariables().uuid()}
                                            vm={ctrl.vmState('environmentVariablesConfig-' + stageIndex)}/>

          <f.row>
            <f.column size={12} end={true}>
              <JobsConfigWidget jobs={stage.jobs}
                                elasticProfiles={args.elasticProfiles}
                                key={stage.jobs().uuid()}
                                vm={ctrl.vmState('jobsWidgetConfig-'+ stageIndex)}/>
            </f.column>
          </f.row>
        </div>
      );
    }
  };

  var StagesConfigWidget = {
    controller: function (args) {
      this.args             = args;
      ComponentMixins.HasViewModel.call(this);

      this.removeStage = function (pipeline, stage) {
        var previousStage = pipeline().stages().previousStage(stage);
        pipeline().stages().removeStage(stage);
        var firstStage = pipeline().stages().firstStage();

        args.currentSelection(previousStage || firstStage || pipeline().stages().createStage());
      };
    },

    view: function (ctrl, args) {
      return (
        <div class='stage-definition-container'>
          <StageConfigDefinitionWidget stage={args.currentSelection()}
                                       elasticProfiles={args.elasticProfiles}
                                       pipeline={args.pipeline}
                                       onRemove={ctrl.removeStage.bind(ctrl, args.pipeline, args.currentSelection())}
                                       vm={ctrl.vmState('stageDefinitionConfigs')}/>
        </div>
      );
    }
  };

  return StagesConfigWidget;
});
