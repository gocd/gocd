/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define(['mithril', 'lodash', 'helpers/form_helper', 'models/pipeline_configs/repositories', 'views/pipeline_configs/errors_widget', 'models/pipeline_configs/plugin_infos', 'views/pipeline_configs/package_repositories/configuration_widget'],
  function (m, _, f, Repositories, ErrorsWidget, PluginInfos, RepositoryConfigurationWidget) {

    var RepositoryConfigNewWidget = {

      controller: function (args) {


        var initializeRepository = function (pluginId) {
          Repositories.Repository.setRepositoryForEdit(args.repoForEdit, pluginId);
        };

        var pluginInfo = _.head(PluginInfos.filterByType('package-repository'));

        initializeRepository(pluginInfo.id());

        var ctrl = {
          plugin:       m.prop(pluginInfo.id()),
          vm:           args.vm,
          selectPlugin: function (id) {
            initializeRepository(id);
          }
        };

        return ctrl;
      },

      view: function (ctrl, args) {
        var errors      = ctrl.vm.hasErrors() ? (<ErrorsWidget errors={ctrl.vm.errors()}/>) : undefined;
        var repoForEdit = args.repoForEdit;

        var items = [];
        _.each(PluginInfos.filterByType('package-repository'), function (pluginInfo) {
          var item     = {};
          item['id']   = pluginInfo.id();
          item['text'] = pluginInfo.name();
          items.push(item);
        });

        return (
          <div class='modal-content'>
            <div class='modal-header'>
              {errors}
            </div>
            <div class='modal-body'>
              <f.row class='repo-selector'>
                <f.select
                  value={ctrl.plugin}
                  label='Type of plugin'
                  items={items}
                  size={12}
                  largeSize={12}
                  attrName="plugin"
                  model={ctrl}
                  onchange={ctrl.selectPlugin.bind(ctrl, ctrl.plugin())}
                />
              </f.row>

              <f.row>
                <f.inputWithLabel attrName='name'
                                  class='align'
                                  size={12}
                                  largeSize={12}
                                  validate={true}
                                  isRequired={true}
                                  model={repoForEdit()}/>
              </f.row>

              {repoForEdit().configuration().mapConfigurations(function (configuration) {
                return (<RepositoryConfigurationWidget configuration={configuration}/>);
              }, this)}

            </div>
          </div>
        );
      }
    };

    return RepositoryConfigNewWidget;
  });