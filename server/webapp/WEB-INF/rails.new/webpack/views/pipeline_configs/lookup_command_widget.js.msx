/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let m = require('mithril');
let f = require('helpers/form_helper');

const Stream   = require('mithril/stream');
const _        = require('lodash');
const $        = require('jquery');
const Routes   = require('gen/js-routes');
const tt       = require('helpers/pipeline_configs/tooltips');
const mrequest = require('helpers/mrequest');
require('jquery-textcomplete');

const LookupCommandWidget = {
  Command: {
    textComplete (attrName, selectSnippet, searchSnippets) {
      return function (elem) {
        const $inputElem = $(elem.dom).find(`input[name='${  attrName  }']`);

        $inputElem.textcomplete([
          {
            match:  /([^\s].*)$/,
            index:  1,
            search: searchSnippets,
            replace (word) {
              return word;
            }
          }
        ]);
        $inputElem.on('textComplete:select', selectSnippet);
      };
    },

    removeTextComplete (attrName) {
      return function (elem) {
        const $inputElem = $(elem.dom).find(`input[name='${  attrName  }']`);
        $inputElem.textcomplete('destroy');
      };
    },

    lookup (term) {
      return $.Deferred(function () {
        const deferred = this;

        const jqXHR = $.ajax({
          method:      'GET',
          url:         Routes.apiv1AdminInternalCommandSnippetsPath({prefix: term}),
          beforeSend:  mrequest.xhrConfig.forVersion('v1'),
          contentType: false
        });

        jqXHR.then((data, _textStatus, _jqXHR) => {
          const entities = _.map(data._embedded.command_snippets, (snippet) => {
            return new LookupCommandWidget.Command.Snippet(snippet);
          });

          deferred.resolve(entities);
        });
      }).promise();

    },

    Snippet (data) {
      const self        = this;
      self.name         = Stream(data.name);
      self.description  = Stream(data.description);
      self.author       = Stream(data.author);
      self.authorInfo   = Stream(data.author_info);
      self.moreInfo     = Stream(data.more_info);
      self.command      = Stream(data.command);
      self.arguments    = Stream(data.arguments);
      self.relativePath = Stream(data.relative_path);
    },

    Snippets (snippets) {
      const self = this;
      self.list  = snippets;

      self.findByName = function (name) {
        return _.find(self.list, (snippet) => {
          return name === snippet.name();
        });
      };

      self.allNames = function () {
        return _.map(self.list, (snippet) => {
          return snippet.name();
        });
      };
    }
  },

  oninit (vnode) {
    const self    = this;
    self.task     = vnode.attrs.model;
    self.snippet  = vnode.attrs.snippet || new LookupCommandWidget.Command.Snippet({});
    self.snippets = vnode.attrs.snippets || new LookupCommandWidget.Command.Snippets([]);

    self.selectSnippet = function (_e, command) {
      self.snippet = self.snippets.findByName(command);

      self.task.args().data(self.snippet.arguments());
      self.task.command(self.snippet.command());

      m.redraw();
    };

    self.searchSnippets = function (term, textComplete) {
      LookupCommandWidget.Command.lookup(term).then(
        (snippets) => {
          self.snippets = new LookupCommandWidget.Command.Snippets(snippets);
          textComplete(self.snippets.allNames());
        },
        () => {
          textComplete([]);
        });
    };
  },

  view (vnode) {
    const snippet = vnode.state.snippet;

    const snippetDetails = function () {
      if (snippet.name()) {
        return (
          <div class="snippet">
            <header>
              <h5 class="snippet-title">{snippet.name()}</h5>
              <div class="author">
                <label>Author: </label>
                <a target="_blank" href={snippet.authorInfo()}>{snippet.author()}</a>
              </div>
            </header>
            <p>
              {snippet.description()}
              <a target="_blank" href={snippet.moreInfo()}>more info</a>
            </p>
          </div>
        );
      }
    };

    const lookUpTextBox = function () {
      if (vnode.state.task.args().isList()) {
        return (<input type="text"
                       name="lookup"
                       autocomplete="false"
                       autocapitalize="off"
                       autocorrect="off"
                       spellcheck="off"/>);
      }
      return (<input type="text" disabled="disabled"/>);
    };

    const lookupDisabledMessage = function () {
      if (!vnode.state.task.args().isList()) {
        return (
          <label>The lookup feature is only available for the <a class=""
                                                                 href="https://docs.gocd.io/current/advanced_usage/command_repository.html#args-style-commands"
                                                                 target="_blank">
            new style</a> of custom commands.</label>
        );
      }
    };

    return (
      <div class="lookup">
        <f.row>
          <f.column
            oncreate={LookupCommandWidget.Command.textComplete('lookup', vnode.state.selectSnippet, vnode.state.searchSnippets)}
            onremove={LookupCommandWidget.Command.removeTextComplete('lookup')}
            size={4}>
            <label>Look up
              <f.tooltip tooltip={{
                content:   tt.task.lookup,
                direction: 'bottom',
                size:      'small'
              }}/>
            </label>
            {lookUpTextBox()}
            {lookupDisabledMessage()}
          </f.column>
          <f.column size={8}>
            {snippetDetails()}
          </f.column>
        </f.row>
      </div>
    );
  }
};

module.exports = LookupCommandWidget;
