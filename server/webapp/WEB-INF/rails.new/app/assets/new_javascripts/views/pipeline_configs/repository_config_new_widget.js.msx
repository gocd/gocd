/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define(['mithril', 'lodash', 'helpers/form_helper', 'models/pipeline_configs/repositories', 'views/pipeline_configs/errors_widget', 'models/pipeline_configs/plugin_infos', 'views/pipeline_configs/repository_configuration_widget'],
  function (m, _, f, Repositories, ErrorsWidget, PluginInfos, RepositoryConfigurationWidget) {
    //This has to be done to get around mithril's controller caching


    /*
     'scmForEdit' is a cloned copy of the actual SCM, this is required since SCMConfigEditWidget is rendered in a modal. There might be scenarios
     wherein a user can make changes to the scm but not save it and close the modal, in this scenario the changes should not
     be retained. To achieve this behaviour the widget works with a clonened copy of scm.
     */



    var RepositoryConfigNewWidget = {

      controller: function (args) {

        var repositoryConfigurations = function (pluginId) {
          return PluginInfos.PluginInfo.byId(pluginId).then(function (pluginInfo) {
            var allConfigurations = pluginInfo.configurations();
            var repositoryConfigurations = _.filter(allConfigurations, function (configuration) {
              return configuration.type === 'repository';
            });
            return initializeRepository(pluginInfo, repositoryConfigurations);
          });
        };

        var initializeRepository = function(pluginInfo, configurations) {
          return new Repositories.Repository({
            plugin_metadata: {
              id:      pluginInfo.id(),
              version: pluginInfo.version()
            },
            configuration: configProperties(configurations)
          });
        };

        var pluginInfo = _.head(PluginInfos.filterByType('package-repository'));
        var parentView = args.parentView;
        var material   = args.material;

        parentView.onClose(function () {
          ctrl.plugin(pluginInfo.id());
          //ctrl.repoForEdit().reInitialize({});
          ctrl.repoForEdit = repositoryConfigurations(pluginInfo.id());
          ctrl.vm.reset();
        });

        var createRepositoryOnSuccess = function (repository) {
          ctrl.vm.saveSuccess();
          material.repository(repository);
          parentView.close();
          Repositories.init();
        };

        var createRepositoryOnFailure = function (data) {
          ctrl.vm.saveFailed(data);
          if (data.data) {
            ctrl.repoForEdit().reInitialize(data.data);
          }
        };

        var configProperties = function(configurations) {
          var config = [];
          _.map(configurations, function(configuration) {
            return config.push({key: configuration.key});
          });
          return config;
        };



        var ctrl = {
          plugin:       m.prop(pluginInfo.id()),
          repoForEdit:  repositoryConfigurations(pluginInfo.id()),
          create:       function () {
            this.vm.startUpdating();
            this.repoForEdit().create().then(createRepositoryOnSuccess, createRepositoryOnFailure);
          },
          vm:           new Repositories.vm(),
          selectPlugin: function (id) {
            this.repoForEdit    = repositoryConfigurations(id);
          },
          checkRepositoryConnection: function () {
          //TODO : Have an API for checking the repository connection and make the request from here.
          }
        };

        return ctrl;
      },

      view: function (ctrl) {
        var errors = ctrl.vm.hasErrors() ? (<ErrorsWidget errors={ctrl.vm.errors()}/>) : undefined;

        var items = {};
        _.each(PluginInfos.filterByType('package-repository'), function (pluginInfo) {
          items[pluginInfo.id()] = pluginInfo.name();
        });
        
        return (
          <div class='modal-content'>
            <div class='modal-header'>
              {errors}
            </div>
            <div class='modal-body'>
              <f.row>
                <f.inputWithLabel attrName='name'
                                  class='align'
                                  size={12}
                                  largeSize={12}
                                  validate={true}
                                  isRequired={true}
                                  model={ctrl.repoForEdit()}/>
              </f.row>

              <f.row class='repo-selector'>
                <f.select
                  value={ctrl.plugin}
                  label='Type of plugin'
                  items={items}
                  size={12}
                  largeSize={12}
                  onchange={ctrl.selectPlugin.bind(ctrl, ctrl.plugin())}
                />
              </f.row>

              {ctrl.repoForEdit().configuration().mapConfigurations(function(configuration) {
                return (<RepositoryConfigurationWidget configuration={configuration} />);
              }, this)}

              <f.row>
                <f.button onclick={ctrl.checkRepositoryConnection}>Check Repository Connection</f.button>
              </f.row>

              <f.row>
                <f.button onclick={ctrl.create.bind(ctrl)}
                          class={'save-pipeline ' + ctrl.vm.saveState()}>
                  <span class={'save-state ' + ctrl.vm.saveState()}/>
                  Save
                </f.button>
              </f.row>
            </div>
          </div>
        );
      }
    };

    return RepositoryConfigNewWidget;
  });