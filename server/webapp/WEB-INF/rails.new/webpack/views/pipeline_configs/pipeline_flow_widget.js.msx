/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let m                  = require('mithril');
let f                  = require('helpers/form_helper');
let StagesConfigWidget = require('views/pipeline_configs/stages_config_widget');

const Stream          = require('mithril/stream');
const _               = require('lodash');
const $               = require('jquery');
const ComponentMixins = require('helpers/mithril_component_mixins');
const dragulaConfig   = require('helpers/dragula_config');


const PipelineFlowWidget = {
  oninit (vnode) {
    this.args = vnode.attrs;
    ComponentMixins.HasViewModel.call(this);

    this.currentSelection = vnode.attrs.currentSelection;

    this.appendStage = function () {
      this.currentSelection(this.args.pipeline().stages().createStage());
    };
  },

  view (vnode) {
    const appendStage = (
      <div class="pipeline-flow-box add-stage">
        <span class='label' onclick={vnode.state.appendStage.bind(vnode.state)}>Add Stage</span>
      </div>
    );

    const classes = function (selection, additionalClasses) {
      return _(['pipeline-flow-box', additionalClasses, (vnode.state.currentSelection() === selection) ? 'active' : null]).flatten().compact().value().join(' ');
    };

    const dragDropConfig = function (elem) {
      const onDrop = function () {
        const reorderedStages = _.map($(elem.dom).find('.stage:not(.gu-mirror)'), (eachStageElem) => {
          return vnode.attrs.pipeline().stages().stageAtIndex($(eachStageElem).attr('data-stage-index'));
        });
        vnode.attrs.pipeline().stages().setStages(reorderedStages);
      };

      dragulaConfig(elem.dom, {dragulaOptions: {}, onDropCallback: onDrop});
    };


    return (
      <f.accordion accordionTitles={[(<span>Stages</span>)]}
                   selectedIndex={vnode.state.vmState('pipelineFlowSelected', Stream(0))}
                   accordionKeys={['stages']}
                   class='stages'>
        <div>

          <div class="stage-boxes">
            <div oncreate={dragDropConfig} class="stages-wrapper">
              {vnode.attrs.pipeline().stages().mapStages((stage, stageIndex) => {
                return (
                  <div class={classes(stage, 'stage')}
                       data-stage-index={stageIndex}
                       onclick={vnode.state.currentSelection.bind(vnode.state, stage)}
                       key={stage.uuid()}>
                    <span class="drag-handle"/>
                    <span class='label'>{stage.name()}</span>
                  </div>
                );
              })}
            </div>
            {appendStage}
          </div>

          <StagesConfigWidget pipeline={vnode.attrs.pipeline}
                              pluginInfos={vnode.attrs.pluginInfos}
                              elasticProfiles={vnode.attrs.elasticProfiles}
                              currentSelection={vnode.state.currentSelection}
                              vm={vnode.state.vmState('stagesConfig')}/>
        </div>
      </f.accordion>
    );
  }

};

module.exports = PipelineFlowWidget;
