/*
 * Copyright 2019 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import m from "mithril";
import $ from "jquery";
import {f} from "helpers/form_helper";
import {PipelineOperationsWidget} from "views/dashboard/pipeline_operations_widget";
import {PipelineAnalyticsWidget} from "views/dashboard/pipeline_analytics_widget";

export const PipelineHeaderWidget = {

  getSettingsDisabledTooltipText(pipeline) {
    if (pipeline.isDefinedInConfigRepo()) {
      const configRepoId = pipeline.getConfigRepoId();
      return <div>
        <div>{pipeline.definedInConfigRepoTooltipText()}</div>
        <div>Id: <a href={`admin/config_repos#!${configRepoId}`}>{configRepoId}</a></div>
        <div>Url: {pipeline.getConfigRepoMaterialUrl()}</div>
      </div>;
    }
    return pipeline.noEditPermissionTooltipText();
  },

  pipelineLockButton(vnode, pipeline) {
    if (!pipeline.isLocked) {
      return;
    }

    if (pipeline.canUnlock) {
      return <f.button onclick={vnode.state.unlock.bind(vnode.state, pipeline)} aria-label="Pipeline Locked"
                     title="Pipeline Locked" class="pipeline_locked"/>;
    }

    return <f.button class="pipeline_locked disabled"
                     tooltipText={pipeline.getLockDisabledTooltipText()}/>;
  },

  oninit(vnode) {
    const self              = vnode.state;
    const operationMessages = vnode.attrs.operationMessages;

    self.unlock = (pipeline) => {
      vnode.attrs.doCancelPolling();
      pipeline.unlock().then((res) => {
        operationMessages.success(pipeline.name, res.message);
      }, (res) => {
        operationMessages.failure(pipeline.name, res.responseJSON.message);
      }).always(vnode.attrs.doRefreshImmediately);
    };
  },

  view(vnode) {
    const pipeline                   = vnode.attrs.pipeline;
    const pluginsSupportingAnalytics = vnode.attrs.pluginsSupportingAnalytics;
    const shouldShowAnalyticsIcon    = vnode.attrs.shouldShowAnalyticsIcon;

    let settingsButton;
    const analyticsIcons = [];
    if (pipeline.canAdminister && !pipeline.isDefinedInConfigRepo()) {
      const settingsPath = pipeline.settingsPath;
      settingsButton     = (<a class={`edit_config`} aria-label={`Edit Configuration for Pipeline ${pipeline.name}`}
                               title={'Edit Pipeline Configuration'} href={settingsPath}/>);
    } else {
      settingsButton = (<f.link class="info_config disabled" aria-label={this.getSettingsDisabledTooltipText(pipeline)}
                                tooltipText={this.getSettingsDisabledTooltipText(pipeline)}/>);
    }

    if (shouldShowAnalyticsIcon) {
      $.each(pluginsSupportingAnalytics, (pluginId, metricId) => {
        analyticsIcons.push(<PipelineAnalyticsWidget pipeline={pipeline} pluginId={pluginId} metricId={metricId}/>);
      });
    }

    return (
      <div class="pipeline_header">
        <div class="pipeline_sub_header">
          <h3 class="pipeline_name">{pipeline.name}</h3>
          <div class="pipeline_actions">
            {analyticsIcons}
            {settingsButton}
            {this.pipelineLockButton(vnode, pipeline)}
          </div>
        </div>
        <PipelineOperationsWidget pipeline={vnode.attrs.pipeline}
                                  invalidateEtag={vnode.attrs.invalidateEtag}
                                  doCancelPolling={vnode.attrs.doCancelPolling}
                                  doRefreshImmediately={vnode.attrs.doRefreshImmediately}
                                  operationMessages={vnode.attrs.operationMessages}/>
      </div>
    );
  }
};
