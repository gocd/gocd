/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m                    = require('mithril');
const f                    = require('helpers/form_helper');
const Stream               = require('mithril/stream');
const ComponentMixins      = require('helpers/mithril_component_mixins');
const Template             = require('models/pipeline_configs/template');
const ReadOnlyStagesWidget = require('views/pipeline_configs/read_only/stages_config_widget');

const ReadOnlyTemplateWidget = {
  oninit (vnode) {
    const self    = this;
    self.template = Stream();

    Template.find(vnode.attrs.templateName).then(self.template);

    ComponentMixins.HasViewModel.call(self);
  },

  view (vnode) {
    const template = vnode.state.template();
    if (!template) {
      return (<div />);
    }
    return (
      <f.accordion accordionTitles={[(<span>Template: {template.name()}</span>)]}
                   accordionKeys={['template']}
                   selectedIndex={vnode.state.vmState('templateSelected', Stream(0))}
                   class='template'>
        <f.row>
          <ReadOnlyStagesWidget stages={vnode.state.template().stages}
                                pluginInfos={vnode.attrs.pluginInfos}/>
        </f.row>
      </f.accordion>
    );
  }
};

module.exports = ReadOnlyTemplateWidget;
