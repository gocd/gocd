/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define(['mithril', 'lodash', 'helpers/form_helper', 'helpers/pipeline_configs/tooltips', 'helpers/mithril_component_mixins', 'views/shared/modal',
  'views/pipeline_configs/scm_config_edit_widget', 'views/pipeline_configs/scm_config_new_widget', 'views/pipeline_configs/material_filter_widget',
  'models/pipeline_configs/scms', 'models/pipeline_configs/plugin_infos'],
  function (m, _, f, tt, ComponentMixins, Modal, SCMConfigEditWidget, SCMConfigNewWidget, MaterialFilterWidget, SCMs, PluginInfos) {

    var EditPluggableSCMWidget = {
      controller: function (args) {
        this.material = args.material;
        this.modal    = new Modal({
          subView: {
            component: SCMConfigEditWidget,
            args: {material: args.material}
          },
          title: _.join(['EDIT', '-', args.material.scm().name()], ' ')
        });

        this.isPluginMissing = function () {
          return _.isNil(PluginInfos.findById(this.material.scm().pluginMetadata().id()));
        };

        this.modalView = function () {
          if(!this.isPluginMissing()) {
            return this.modal.view();
          }
        };
      },

      view: function (ctrl) {
        ctrl.onunload = function() {
          ctrl.modal.destroy();
        };

        var scm  = ctrl.material.scm();
        var data = {Name: scm.name(), AutoUpdate: scm.autoUpdate()};

        scm.configuration().mapConfigurations(function (conf) {
          data[_.capitalize(conf.key())] = conf.isSecureValue() ? "***********" : conf.value();
        });

        var editButton = ctrl.isPluginMissing() ? (<f.alert><b>{scm.pluginMetadata().id()}</b> plugin seems to be removed.</f.alert>)
                                                : (<f.editButton class={null}  onclick={ctrl.modal.open.bind(ctrl.modal)}/>);

        return (
          <div>
            <div class='pluggable-scm'>
              {editButton}
              <f.row>
                <ul>
                  {_.map(data, function (v, k) {
                    return (
                      <li>
                        <label class={_.toLower(k)}>{k}</label><span>{v}</span>
                      </li>
                    );
                  })}
                </ul>
              </f.row>
            </div>
            <f.row>
              <f.inputWithLabel attrName='destination'
                                label="Destination"
                                model={ctrl.material}
                                validate={true}
                                tooltip={{
                                  content: tt.material.destination,
                                  direction: 'bottom',
                                  size: 'small'
                                }}/>
            </f.row>
            <MaterialFilterWidget material={ctrl.material}/>
            {ctrl.modalView()}
          </div>
        );
      }
    };

    var NewPluggabelSCMWidget = {
      controller: function (args) {
        var self      = this;
        self.material = args.material;
        self.scms     = m.prop(SCMs.filterByPluginId(self.material.pluginInfo().id()));
        self.selected = _.isEmpty(self.scms()) ?  m.prop('default') : m.prop(_.head(self.scms()).id());
        self.modal    = new Modal({title:   'ADD',
                                   subView: {component: SCMConfigNewWidget, args:{material: self.material}}
                                  });

        self.selectSCM = function(id) {
          SCMs.findById(id).then(function(scm) {
            self.material.scm(scm);
          });
        };
      },

      view: function (ctrl) {
        ctrl.onunload = function() {
          ctrl.modal.destroy();
        };

        var items = _.transform(ctrl.scms(), function (result, value) {
          result[value.id()] = value.name();
        }, {});


        if (!_.isEmpty(items)) {
          return (
            <f.row class='scm-selector'>
              <f.select
                value={ctrl.selected}
                label='Select an existing SCM'
                items={items}
                size={4}
                largeSize={2}
              />
              <f.column size={6} largeSize={6} end>
                <a class='add-button button' href="javascript:void(0)"
                   onclick={ctrl.selectSCM.bind(ctrl, ctrl.selected())}>Add</a>
                <label class='or'>Or</label>
                <a class='add-button button' href="javascript:void(0)"
                   onclick={ctrl.modal.open.bind(ctrl.modal)}>Create New</a>
              </f.column>
              {ctrl.modal.view()}
            </f.row>
          );
        } else {
          return (
            <f.row class='scm-selector'>
              <f.column class='no-scm' size={4} largeSize={6} end>
                <label>No existing SCM's for <b>{ctrl.material.pluginInfo().displayName()}</b></label>
                <a class='add-button button' href="javascript:void(0)"
                   onclick={ctrl.modal.open.bind(ctrl.modal)}>Create New</a>
              </f.column>
              {ctrl.modal.view()}
            </f.row>
          );
        }
      }
    };

    var PluggableSCMWidget = {
      view: function (ctrl, args) {
        return _.isNil(args.material.scm()) ? m.component(NewPluggabelSCMWidget, args)
                                            : m.component(EditPluggableSCMWidget, args);
      }
    };

    return PluggableSCMWidget;
  });
