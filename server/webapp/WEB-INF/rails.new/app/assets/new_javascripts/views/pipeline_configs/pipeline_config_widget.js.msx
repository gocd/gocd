/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'jquery', 'string-plus', 'lodash', 'helpers/form_helper', 'helpers/pipeline_configs/tooltips', 'helpers/mithril_component_mixins',
  'models/pipeline_configs/pipeline', 'models/pipeline_configs/tasks', 'views/pipeline_configs/pipeline_settings_widget',
  'views/pipeline_configs/materials_config_widget', 'views/pipeline_configs/pipeline_flow_widget'],
  function (m, $, s, _, f, tt, ComponentMixins, Pipeline, Tasks, PipelineSettingsWidget, MaterialsConfigWidget, PipelineFlowWidget) {

  var PipelineConfigWidget = function (url, callback) {
    return {
      controller: function () {
        var ctrl              = this;
        var self              = this;
        self.pipeline         = m.prop();
        self.currentSelection = m.prop();
        self.etag             = m.prop();
        self.url              = url;
        self.saveState        = m.prop('');
        ComponentMixins.HasViewModel.call(this);

        window.pipelineConfigWidget = m.prop(this);

        self.setPipelineAndPreserveSelection = function (newPipeline) {
          var oldPipeline = self.pipeline();
          var newSelection;

          if (oldPipeline) {
            newSelection = newPipeline.stages().findStage(function (stage) {
              return stage.name() === ctrl.currentSelection().name();
            });
          }

          newSelection = newSelection || newPipeline.stages().firstStage();

          self.pipeline(newPipeline);
          self.currentSelection(newSelection);
        };

        var extractEtag = function (xhr) {
          if (xhr.status === 200) {
            self.etag = m.prop(xhr.getResponseHeader('ETag'));
          }
          return xhr.responseText;
        };

        Pipeline.find(url, extractEtag).then(function (data) {
          self.setPipelineAndPreserveSelection(Pipeline.fromJSON(data));
          if (callback) {
            callback(ctrl);
          }
        });

        self.onSavePipeline = function () {
          self.pipeline().update(self.etag(), extractEtag).then(function (data) {
            ctrl.setPipelineAndPreserveSelection(Pipeline.fromJSON(data));
          }, function (data) {
            if (data.data) {
              ctrl.setPipelineAndPreserveSelection(Pipeline.fromJSON(data.data));
            }
          })
        };
      },

      view: function (ctrl) {
        var pipeline = ctrl.pipeline();
        var header = function () {
          return (
            <f.row class="heading">
              <f.column size={11}>
                <h1>
                  Pipeline configuation for pipeline
                  {' '}
                  {pipeline.name()}
                </h1>
              </f.column>
              <f.column size={1}>
                <f.button onclick={ctrl.onSavePipeline.bind(ctrl)}
                          class={'save-pipeline' + ctrl.saveState()}>
                  <span class={'save-state ' + ctrl.saveState()}/>
                  Save
                </f.button>
              </f.column>
            </f.row>
          )
        };

        return (
          <form class='pipeline'>
            {header()}
            <f.row class='pipeline-body'>
              <f.column end={true} size={12}>
                <PipelineSettingsWidget pipeline={ctrl.pipeline}
                                        vm={ctrl.vmState('pipelineSettingsConfig')}/>
                <MaterialsConfigWidget materials={pipeline.materials()}
                                       key={pipeline.materials().uuid}
                                       pipelineName={pipeline.name}
                                       vm={ctrl.vmState('materialsConfig')}/>
                <PipelineFlowWidget pipeline={ctrl.pipeline}
                                    currentSelection={ctrl.currentSelection}
                                    vm={ctrl.vmState('pipelineFlowConfig')}/>
              </f.column>
            </f.row>
          </form>
        );
      }
    };
  };

  return PipelineConfigWidget;
});
