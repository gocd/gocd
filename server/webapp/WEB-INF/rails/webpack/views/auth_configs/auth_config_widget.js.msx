/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m               = require('mithril');
const Stream          = require('mithril/stream');
const ComponentMixins = require('helpers/mithril_component_mixins');
const ActionButtons   = require('views/shared/action_buttons');

const AuthConfigWidget = {
  oninit (vnode) {
    this.args = vnode.attrs;
    ComponentMixins.HasViewModel.call(this);

    const vmStateKey = `show-${vnode.attrs.authConfig.id()}`;

    this.vmState(vmStateKey, Stream(false));

    this.toggleHide = function () {
      this.vmState(vmStateKey)(!this.vmState(vmStateKey)());
    };

    this.showState = function () {
      return this.vmState(vmStateKey)() ? 'show' : 'hide';
    };
  },

  view (vnode) {
    const authConfig = vnode.attrs.authConfig;
    let image;
    let actionButtons;

    if (vnode.attrs.pluginInfo) {
      image       = (<img src={vnode.attrs.pluginInfo.imageUrl()}/>);
      actionButtons = (
        <ActionButtons onEdit={vnode.attrs.onEdit} onClone={vnode.attrs.onClone} onDelete={vnode.attrs.onDelete}/>
      );
    } else {
      image       = (<span class="unknown-plugin-icon" title="Plugin not found"/>);
      actionButtons = (
        <ActionButtons onEdit={vnode.attrs.onEdit} onClone={vnode.attrs.onClone} onDelete={vnode.attrs.onDelete}
                       disabled={true} title="Plugin not found"/>
      );
    }
    return (
      <div class={`c-collapse ${(this.showState() === 'hide') ? 'collapsed' : 'expanded'}`}>
        <div class={`c-collapse_header ${(this.showState() === 'hide') ? 'collapsed' : 'expanded'}`}
             onclick={vnode.state.toggleHide.bind(vnode.state)}>

          <div class="c-collapse_header_details">
            <span class="c-collapse_icon">
              {image}
            </span>
                <dl className="key-value-pair key-value-pair-header auth-config-id">
                    <dt class="key">Id </dt>
                    <dd class="value">{authConfig.id()}</dd>
                </dl>
                    <dl className="key-value-pair key-value-pair-header auth-plugin-id">
                    <dt class="key">Plugin ID</dt>
                    <dd class="value">{authConfig.pluginId()}</dd>
              </dl>
          </div>
            {actionButtons}
        </div>
        <div class={`c-collapse_body plugin-config-read-only ${vnode.state.showState()}`}>
          <ul class="key-value-pair">

            {authConfig.properties().mapConfigurations((configuration) => {
              return [
                  (<li><label class="key">{configuration.key()}</label><span class="value"><pre>{configuration.displayValue()}</pre></span>
                  </li>)
              ];
            })}
          </ul>
        </div>

      </div>
    );
  }
};

module.exports = AuthConfigWidget;
