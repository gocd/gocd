<div class="form_content">
  <textarea id="artifact_template_build" class="template">
    <%= render :partial => 'builtin_artifact_form', :locals => {:scope => {:var_form => scope[:form], :builtin_artifact => com.thoughtworks.go.config.BuildArtifactConfig.new}} %>
  </textarea>

  <textarea id="artifact_template_test" class="template">
    <%= render :partial => 'builtin_artifact_form', :locals => {:scope => {:var_form => scope[:form], :builtin_artifact => com.thoughtworks.go.config.TestArtifactConfig.new}} %>
  </textarea>

  <textarea id="artifact_template_external" class="template">
    <%= render :partial => 'external_artifact_form', :locals => {:scope => {:var_form => scope[:form], :external_artifact => com.thoughtworks.go.config.PluggableArtifactConfig.new, :artifact_meta_data_store => scope[:artifact_meta_data_store], :artifact_plugin_to_view => scope[:artifact_plugin_to_view], :plugin_name_to_id => scope[:plugin_name_to_id], :store_id_to_plugin_id => scope[:store_id_to_plugin_id]}} %>
  </textarea>

  <div class="artifact-container">
    <% scope[:built_in_collection].each do |artifact| -%>
      <%= render :partial => 'builtin_artifact_form', :locals => {:scope => {:var_form => scope[:form], :builtin_artifact => artifact}} %>
    <%- end -%>

    <% scope[:external_artifact_collection].each do |external_artifact| %>
      <%= render :partial => 'external_artifact_form', :locals => {:scope => {:var_form => scope[:form], :external_artifact => external_artifact, :artifact_meta_data_store => scope[:artifact_meta_data_store], :store_id_to_plugin_id => scope[:store_id_to_plugin_id], :plugin_name_to_id => scope[:plugin_name_to_id]}} %>
    <%- end -%>
  </div>

  <div class="row expanded add_new_artifact">
    <div class="name_value_cell columns medium-12 large-12 end">
      <label>Select type:</label>
      <select class="small" id="select_artifact_type">
        <option value="Build Artifact">Build</option>
        <option value="Test Artifact">Test</option>
        <option value="External Artifact">External</option>
      </select>
      <%= action_icon({:type => "add", :text => 'Add', :href => "#", :class => "skip_dirty_stop add_artifact_button",
                       :id => "add_artifact"}) %>
    </div>
  </div>
</div>
<script type="text/javascript">
  var storeIdToPluginId = <%== scope[:store_id_to_plugin_id].to_json %>;
  var pluginIdCount = <%== scope[:store_id_to_plugin_id].size %>;

  function hookupStoresAutoComplete() {
    jQuery(".stores_auto_complete").autocomplete(<%== scope[:artifact_store_ids] %>, {
      multiple:      false,
      minChars:      0,
      matchContains: true,
      selectFirst:   false,
      width:         248
    });
  }

  function showExternalArtifactView() {

    var isArtifactStoreConfigured = !_.isEmpty(storeIdToPluginId);
    var notAddedAFormRow = jQuery(".artifact-container").find(".no_artifact_store").length == 0;
    var shouldAddFormRow = isArtifactStoreConfigured || notAddedAFormRow;
    if(shouldAddFormRow) {
      addFormRowFor('#artifact_template_external');
    }
    
    hookupStoresAutoComplete();
    addOnSelectListenerForPluginDropdown();
    jQuery("input[name='job[artifactConfigs][][storeId]']").on('input propertychange paste result', addOnChangeListenerForStoreInput);
  }

  function determineAppropriateFormToShow() {
    switch (jQuery('#select_artifact_type').val()) {
      case 'Build Artifact':
        addFormRowFor('#artifact_template_build');
        break;
      case 'Test Artifact':
        addFormRowFor('#artifact_template_test');
        break;
      case 'External Artifact':
        showExternalArtifactView();
        break;
    }
  }

  function addOnSelectListenerForPluginDropdown() {
    jQuery('.artifact_plugin_selection').change(function (event) {
      var inputElement  = jQuery(this);
      var selectedInput = event.currentTarget || event.target;
      showAppropriatePluginView(selectedInput.value, inputElement);
    })
  }

  function hidePluginView() {
    jQuery(".plugged_artifact_template").hide();
  }

  function showPluginView() {
    jQuery(".plugged_artifact_template").show();
  }

  function hidePluginDropdown() {
    jQuery(".plugin_dropdown_background").hide();
  }

  function showPluginDropdown() {
    jQuery(".plugin_dropdown_background").show();
  }

  function addOnChangeListenerForStoreInput(event) {
    var inputElement         = jQuery(this);
    var selectedInput        = event.currentTarget || event.target;
    if (!_.isEmpty(selectedInput.defaultValue) && selectedInput.defaultValue === selectedInput.value) {
      return;
    }
    var externalArtifactForm = inputElement.closest('.artifact');
    externalArtifactForm.find(".plugin-config-read-only").remove();
    externalArtifactForm.find('.artifact_plugin_selection').val(pluginId);
    hidePluginView();

    if (_.isEmpty(selectedInput.value)) {
      hidePluginView();
      hidePluginDropdown();
      return;
    }

    var pluginId  = storeIdToPluginId[selectedInput.value];
    if (pluginId) {
      externalArtifactForm.find(".plugged_artifact_template").closest(".row").addClass("plugin_form_background");
      hidePluginDropdown();
      showAppropriatePluginView(pluginId, inputElement);
      return;
    }

    showPluginDropdown();
    if (pluginIdCount === 1) {
      var onlyPluginId = <%== scope[:store_id_to_plugin_id].values %>[0];
      showAppropriatePluginView(onlyPluginId, inputElement);
    }
  }

  function addPluginFromBackground() {
    var allPluginViews = jQuery('.plugged_artifact_template');
    if (!allPluginViews) {
      return;
    }

    for (var i = 0; i < allPluginViews.length; i++) {
      if (allPluginViews[i].hasChildNodes()) {
        jQuery(allPluginViews[i]).closest('.row').addClass("plugin_form_background");
      }
    }
  }

  function showAppropriatePluginView(pluginId, inputElement) {
    var externalArtifactForm = inputElement.closest('.artifact');
    var viewTemplate         = <%== scope[:artifact_plugin_to_view].to_json%>;
    var pluginView           = viewTemplate[pluginId];
    if (pluginView) {
      var pluginTemplate = externalArtifactForm.find(".plugged_artifact_template");
      pluginTemplate.html(pluginView);
      showPluginView();
      var pluggedArtifactAngularControllerElement = pluginTemplate.closest('.plugged_artifact');
      var pluggedArtifactAngularDataElement = pluggedArtifactAngularControllerElement.find('span.plugged_artifact_data');
      initializeAngular(pluggedArtifactAngularControllerElement.attr('id'), pluggedArtifactAngularDataElement.attr('id'));
    }
  }

  function initializeAngular(pluggedArtifactAngularControllerElementId, pluggedArtifactDataElementId) {
    var form_name_prefix                               = "job[artifactConfigs][][configuration]";
    var angular_html = jQuery("#" + pluggedArtifactAngularControllerElementId).html();
    if (angular_html) {
      var taskPluginView = new TaskPluginView();
      taskPluginView.initialize(pluggedArtifactAngularControllerElementId, pluggedArtifactDataElementId, form_name_prefix);
      taskPluginView.bootstrapAngular();
    }
  }

  function addFormRowFor(selector) {
    var rowCreator = new EnvironmentVariables.RowCreator(jQuery(selector), 'div', '.delete_artifact');
    var variables  = new EnvironmentVariables(
      jQuery('div.artifact-container'),
      rowCreator,
      null,
      function (inputs) {
        inputs.dirty_form();
      },
      function (row) {
        row.parents("form.dirtyform").data("dirty", true);
      });
    variables.addDefaultRow();
  }

  Util.on_load(function () {
    jQuery("input[name='job[artifactConfigs][][storeId]']").keyup(addOnChangeListenerForStoreInput);
    addOnSelectListenerForPluginDropdown();
    jQuery('#add_artifact').click(determineAppropriateFormToShow);
    jQuery('.delete_artifact').click(function (event) {
      jQuery(this).closest('.artifact').remove();
    });
    hookupStoresAutoComplete();
    addPluginFromBackground();
  });
</script>