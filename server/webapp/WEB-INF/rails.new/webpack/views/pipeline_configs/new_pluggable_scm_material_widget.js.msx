/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m           = require('mithril');
const f           = require('helpers/form_helper');
const SCMs        = require('models/pipeline_configs/scms');
const Stream      = require('mithril/stream');
const _           = require('lodash');
const Modal       = require('views/shared/new_modal');
let AngularPlugin = require('views/shared/angular_plugin');


let ScmConfigModalBody = {
  view (vnode) {
    if (!vnode.attrs.pluginInfo()) {
      return (
        <div class="modal-spinner"/>
      );
    }

    let errorMessageElem;

    if (vnode.attrs.errorMessage()) {
      errorMessageElem = (
        <f.row collapse>
          <f.column size="12">
            <f.alert>{vnode.attrs.errorMessage()}</f.alert>
          </f.column>
        </f.row>
      );
    }

    return (
      <div>
        {errorMessageElem}
        <f.row collapse>
          <f.inputWithLabel attrName='name'
                            class='align'
                            size={12}
                            largeSize={12}
                            validate={true}
                            isRequired={true}
                            model={vnode.attrs.scm}/>
        </f.row>
        <f.row collapse>
          <f.checkBox model={vnode.attrs.scm}
                      attrName='autoUpdate'
                      class='align'
                      size={6}
                      end={true}/>
        </f.row>
        <f.row collapse>
          <AngularPlugin pluginInfoSettings={vnode.attrs.pluginInfo().scmSettings}
                         configuration={vnode.attrs.scm.configuration}
                         key={vnode.attrs.pluginInfo() ? vnode.attrs.pluginInfo().id() : 'no-plugin'}/>
        </f.row>
      </div>
    );
  }
};

const NewPluggableSCMMaterialWidget = {
  oninit (vnode) {
    const self    = this;
    const args    = vnode.attrs;
    self.material = args.material;
    self.scms     = Stream(SCMs.filterByPluginId(self.material.pluginInfo().id()));
    self.selected = _.isEmpty(self.scms()) ? Stream('default') : Stream(_.head(self.scms()).id());

    self.selectSCM = function (id) {
      SCMs.findById(id).then((scm) => {
        self.material.scm(scm);
      }).then(m.redraw);
    };

    this.showModal = function () {
      let scm = new SCMs.SCM({
        'plugin_metadata': {
          id:      vnode.attrs.material.pluginInfo().id(),
          version: vnode.attrs.material.pluginInfo().version()
        }
      });

      const pluginInfo   = Stream(vnode.attrs.pluginInfos().findById((vnode.attrs.material.pluginInfo().id())));
      const errorMessage = Stream();

      const modal = new Modal({
        title:   'Create a new plugin SCM material',
        body:    () => (<ScmConfigModalBody scm={scm} pluginInfo={pluginInfo} errorMessage={errorMessage}/>),
        buttons: () => [
          {
            text: 'Save',
            onclick () {
              const callback = function (savedScm) {
                SCMs().push(savedScm);
                vnode.attrs.material.scm(savedScm);
                modal.destroy();
              };

              const errback = function (json) {
                errorMessage(json.message);
                if (json.data) {
                  scm = new SCMs.SCM(json.data);
                }
              };
              scm.create().then(callback, errback).always(m.redraw);
            }
          }]
      });

      modal.render();
      m.redraw();
    };
  },

  view (vnode) {
    const ctrl = vnode.state;

    const items = _.reduce(ctrl.scms(), (accumulator, value) => {
      accumulator.push({id: value.id(), text: value.name()});
      return accumulator;
    }, []);

    if (!_.isEmpty(items)) {
      return (
        <f.row class='scm-selector'>
          <f.select
            model={ctrl}
            attrName='selected'
            label='Select an existing SCM'
            items={items}
            size={4}
            largeSize={2}
          />
          <f.column size={6} largeSize={6} end>
            <a class='add-button button' onclick={ctrl.selectSCM.bind(ctrl, ctrl.selected())}>Add</a>
            <label class='or'>Or</label>
            <a class='add-button button' onclick={ctrl.showModal.bind(vnode.state)}>Create New</a>
          </f.column>
        </f.row>
      );
    } else {
      return (<f.row class='scm-selector'>
        <f.column class='no-scm' size={4} largeSize={6} end>
          <label>No existing SCMs for <b>{ctrl.material.pluginInfo().about().name()}</b></label>
          <a class='add-button button' onclick={ctrl.showModal.bind(vnode.state)}>Create New</a>
        </f.column>
      </f.row>);
    }

  }
};

module.exports = NewPluggableSCMMaterialWidget;
