/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.thoughtworks.go.build.*

task pathingJar(type: Jar) {
  classifier 'pathing'
  dependsOn ':server:jar'
  dependsOn ':server:testJar'
  dependsOn ':server:fastUnitTestJar'
  dependsOn ':server:sharedTestJar'

  doFirst {
    manifest {
      attributes 'Class-Path': new PrepareRailsCommandHelper(project).classpath().files.collect { it.toURI() }.join(' ')
    }
  }
}

task generateJSRoutes(type: CacheableExecuteUnderRailsTask) {
  onlyIf { !project.hasProperty('fastBuild') }
  def outputDir = file("${project.railsRoot}/webpack/gen")
  inputs.dir(file("${project.railsRoot}/vendor"))
  inputs.files(fileTree(dir: "${project.railsRoot}/config", includes: ['**/*.rb']))
  outputs.dir(outputDir)

  environment(
    'RAILS_ENV': 'production',
    'OUTPUT_DIR': outputDir,
  )

  railsCommand = './bin/rake --trace generated_js'

  doFirst {
    delete outputDir
  }
}

task yarnInstall(type: YarnInstallTask) {
  workingDir = project.railsRoot
}

prepare.dependsOn


task dependencyClassPath {
  outputs.upToDateWhen { false }
  dependsOn ':server:jar'
  dependsOn ':server:testJar'
  dependsOn ':server:fastUnitTestJar'
  dependsOn ':server:sharedTestJar'

  def systemPropertiesFile = file("${buildDir}/go-system-properties")

  outputs.file(systemPropertiesFile)

  doLast {
    PrepareRailsCommandHelper helper = new PrepareRailsCommandHelper(project)
    helper.prepare()

    systemPropertiesFile.withWriter { out ->
      out.println("JRUBY_OPTS=\"${helper.jrubyOpts.join(' \\\n')}\"")
      out.println("GO_DEPENDENCY_CLASSPATH='${helper.classpath().join(File.pathSeparator)}'")
    }
  }
}

task cleanRails(type: Delete) {
  delete "${buildDir}/railsTests"
  delete "${project.railsRoot}/config/cipher"
  delete "${project.railsRoot}/db/config.git"
  delete "${project.railsRoot}/db/h2db"
  delete "${project.railsRoot}/db/shine"
  delete "${project.railsRoot}/logs"
  delete "${project.railsRoot}/public/assets"
  delete "${project.railsRoot}/tmp"
  delete "${project.railsRoot}/webpack/gen"
}
clean.dependsOn cleanRails

task compileAssetsDev(type: YarnRunTask) {
  dependsOn yarnInstall
  dependsOn generateJSRoutes

  onlyIf { !project.hasProperty('fastBuild') }

  workingDir = project.railsRoot
  destinationDir = project.file("${project.railsRoot}/public/assets/webpack")

  yarnCommand = ['webpack-dev', '--', "--env.outputDir", destinationDir.toPath().toString()]

  source(project.file("${project.railsRoot}/webpack"))
  source(project.file("${project.railsRoot}/vendor/assets"))
  source(project.file("${project.railsRoot}/config"))
}

task compileAssetsWebpackProd(type: YarnRunTask) {
  dependsOn yarnInstall
  dependsOn generateJSRoutes

  onlyIf { !project.hasProperty('fastBuild') }

  source(project.file("${project.railsRoot}/webpack"))
  source(project.file("${project.railsRoot}/vendor/assets"))
  source(project.file("${project.railsRoot}/config"))

  workingDir = project.railsRoot
  destinationDir = project.file("${project.buildDir}/webpack-assets")
  yarnCommand = ['webpack-prod', '--', "--env.outputDir", destinationDir.toPath().toString()]
}

task compileRailsAssets(type: CacheableExecuteUnderRailsTask) {
  onlyIf { !project.hasProperty('fastBuild') }

  def outputAssetsDir = file("${project.buildDir}/rails-assets")
  def publicAssetsDir = file("${project.railsRoot}/public/assets")

  inputs.dir(file("${project.railsRoot}/app/assets"))
  inputs.dir(file("${project.railsRoot}/vendor/assets"))

  outputs.dir(outputAssetsDir)

  environment(
    'RAILS_ENV': 'production'
  )

  railsCommand = './bin/rake --trace assets:clobber assets:precompile'

  doFirst {
    delete "${project.railsRoot}/tmp"
    delete outputAssetsDir
    outputAssetsDir.parentFile.mkdirs()
  }

  doLast {
    copy {
      from publicAssetsDir
      into outputAssetsDir
    }

    delete publicAssetsDir
  }
}

task compileAssets {
  dependsOn compileRailsAssets
  dependsOn compileAssetsWebpackProd
  inputs.files compileRailsAssets.outputs.files
  inputs.files compileAssetsWebpackProd.outputs.files

  def outputDir = project.file("${project.buildDir}/assets")
  outputs.dir(outputDir)

  onlyIf { !project.hasProperty('fastBuild') }

  doFirst {
    delete outputDir
    copy {
      from compileRailsAssets
      into outputDir
    }
    copy {
      from compileAssetsWebpackProd
      into "${outputDir}/webpack"
    }
  }
}

task rspec(type: ExecuteUnderRailsTask) {
  outputs.upToDateWhen { false }

  description = "Run specs (pass '-Popts=...' to pass options)"

  def rspecCommand = [project.findProject(':tools').file('rails/bin/rspec')]
  if (project.hasProperty('opts')) {
    rspecCommand += [project.property('opts')]
  }

  environment += [
    'REPORTS_DIR': "${project.buildDir}/rspec-results"
  ]
  railsCommand = rspecCommand.join(' ')
}

task parallelRspec(type: ExecuteUnderRailsTask) {
  outputs.upToDateWhen { false }

  description = "Run specs in parallel (pass '-Popts=...' to pass options)"

  environment += [
    'REPORTS_DIR': "${project.buildDir}/rspec-results"
  ]
  railsCommand = {
    def rspecCommand = [project.findProject(':tools').file('rails/bin/rspec')]

    FileTree tree = fileTree(dir: "${project.railsRoot}/spec", includes: ['**/*_spec.rb'])

    def files = partitionFiles(tree.files)

    // relativize paths, because windows does not support very long command lines :(
    rspecCommand += files.collect { project.railsRoot.toURI().relativize(it.toURI()).getPath() }

    if (project.hasProperty('opts')) {
      rspecCommand += [project.property('opts')]
    }
    rspecCommand.join(' ')
  }
}

task railsExec(type: ExecuteUnderRailsTask) {
  outputs.upToDateWhen { false }

  description = "rails exec (pass '-Pcmd=...' to pass options)"

  railsCommand = project.properties.get('cmd')
}
