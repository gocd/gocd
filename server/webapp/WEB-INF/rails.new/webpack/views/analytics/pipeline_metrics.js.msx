/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function () {
  "use strict";

  const m = require("mithril");
  const $ = require("jquery");
  const _ = require('lodash');
  const f = require("helpers/form_helper");

  const Interactions   = require("models/shared/analytics_interaction_manager");
  const PipelineModels = Interactions.ensure().ns("PipelineMetrics");
  const StageModels    = Interactions.ensure().ns("StageMetrics");
  const init           = require("rails-shared/plugin-endpoint").init;

  const AnalyticsiFrameWidget = require('views/shared/analytics_iframe_widget');

  function pipelineParams(pipeline) {
    return {pipeline_name: pipeline, context: "dashboard"}; // eslint-disable-line camelcase
  }

  function stageParams(pipeline, stage) {
    return _.assign(pipelineParams(pipeline), {stage_name: stage}); // eslint-disable-line camelcase
  }

  const StageDropdown = {
    view(vnode) {
      const vm = vnode.attrs.model;
      const stageOptions = _.map(vm.stages(), (stage) => {
        return <option value={stage || ""} selected={stage === vm.currentStage()}>{null === stage ? "Select a stage" : stage}</option>;
      });
      return <label>Stage: {m("select", {
        class: "stage-selector",
        onchange() {
          vm.currentStage($(this).val());
          $.each(StageModels.all(), (uid, m) => {
            m.url(StageModels.toUrl(uid, stageParams(vm.currentPipeline(), vm.currentStage())));
          });
        }
      }, stageOptions)}</label>;
    }
  };

  const PipelineDropdown = {
    view(vnode) {
      const vm = vnode.attrs.model;
      const pipelineOptions = _.map(vm.pipelines(), (pipeline) => {
        return <option value={pipeline} selected={pipeline === vm.currentPipeline()}>{pipeline}</option>;
      });

      return <label>Pipeline: {m("select", {
        class: "pipeline-selector",
        onchange() {
          vm.currentPipeline($(this).val());
          vm.currentStage(vm.stages()[0]);

          $.each(PipelineModels.all(), (uid, m) => {
            m.url(PipelineModels.toUrl(uid, pipelineParams(vm.currentPipeline())));
          });

          $.each(StageModels.all(), (uid, m) => {
            m.url(StageModels.toUrl(uid, stageParams(vm.currentPipeline(), vm.currentStage())));
          });
        }
      }, pipelineOptions)}</label>;
    }
  };

  const PipelineMetrics = {
    view(vnode) {
      const vm = vnode.attrs.model;
      const header = m("div", {class: "chart-pipeline-selector"}, [
        "Analytics for ",
        <PipelineDropdown model={vm}/>,
        <span class="crumb-sep"> {"\u226b"} </span>,
        <StageDropdown model={vm}/>
      ]);

      const elements = [header];

      $.each(vnode.attrs.metrics, (pluginId, supportedAnalytics) => {
        $.each(supportedAnalytics, (idx, sa) => {
          if (sa.type === "stage") {
            const uid = StageModels.uid(idx, pluginId, sa.type, sa.id),
                title = sa.title,
                model = StageModels.modelFor(uid, stageParams(vm.currentPipeline(), vm.currentStage()));

            elements.push(m(AnalyticsiFrameWidget, {model, pluginId, uid, title, init}));
          } else {
            const uid = PipelineModels.uid(idx, pluginId, sa.type, sa.id),
                title = sa.title,
                model = PipelineModels.modelFor(uid, pipelineParams(vm.currentPipeline()));

            elements.push(m(AnalyticsiFrameWidget, {model, pluginId, uid, title, init}));
          }
        });
      });

      if (elements.length === 1) { // check for length 1, as the pipeline dropdown has already been added
        return (<div class="message">
          <f.callout type="info">No analytics plugin supports pipeline analytics.</f.callout>
        </div>);
      }

      return elements;
    }
  };

  module.exports = PipelineMetrics;

})();
