/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m = require('mithril');
const _ = require('lodash');
const f = require('helpers/form_helper');
const Stream = require('mithril/stream');
const ComponentMixins = require('helpers/mithril_component_mixins');
const Routes = require('gen/js-routes');

const PluginWidget = {
    oninit(vnode) {
        this.args = vnode.attrs;
        ComponentMixins.HasViewModel.call(this);
        const vmStateKey = `show-${vnode.attrs.pluginInfo.id()}`;

        this.vmState(vmStateKey, Stream(!vnode.attrs.pluginInfo.isActive()));

        this.toggleHide = function () {
            this.vmState(vmStateKey)(!this.vmState(vmStateKey)());
        };

        this.showState = function () {
            return this.vmState(vmStateKey)() ? 'show' : 'hide';
        };
    },

    stopPropagation(event) {
        event.stopPropagation();
    },

    view(vnode) {
        const pluginInfo = vnode.attrs.pluginInfo;

        let image, actionIcons, errorsLoadingPlugin, statusReportLink, editPluginSettingsLink;

        if (pluginInfo.imageUrl()) {
            image = <img src={pluginInfo.imageUrl()}/>;
        } else {
            image = <span class="unknown-plugin-icon"/>;
        }

        const elasticAgentExtensionInfo = pluginInfo.extensions() && pluginInfo.extensions()['elastic-agent'];
        const statusReport = elasticAgentExtensionInfo && elasticAgentExtensionInfo.capabilities() && elasticAgentExtensionInfo.capabilities().supportsStatusReport();
        const settingsIcon = pluginInfo.supportsPluginSettings();

        actionIcons = (<div class="plugin-actions">
        </div>);

        if (pluginInfo.isActive()) {
            if (statusReport && vnode.attrs.isUserAnAdmin()) {
                const statusReportHref = Routes.adminStatusReportPath(pluginInfo.id());
                statusReportLink = (
                    <f.anchor href={statusReportHref} class='btn-primary btn-small status-report-btn'
                              onclick={this.stopPropagation.bind(this)}>Status Report</f.anchor>
                );
            } else if (statusReport) {
                statusReportLink = (
                    <span class='btn-primary btn-small status-report-btn disabled'
                          title="Not allowed to view status report">
            Status Report</span>
                );
            }

            if (settingsIcon && vnode.attrs.isUserAnAdmin()) {
                editPluginSettingsLink = (<f.link class='edit-plugin' onclick={vnode.attrs.onEdit.bind(this)}/>);
            } else if (settingsIcon) {
                editPluginSettingsLink = (
                    <f.link class='edit-plugin disabled' title="Not allowed to edit plugin settings"/>);
            }

            actionIcons = (<div class="plugin-actions">
                {statusReportLink}
                {editPluginSettingsLink}
            </div>);
        }

        if (pluginInfo.hasErrors()) {
            errorsLoadingPlugin = [
                (<dt>There were errors loading the plugin</dt>),
                (<dd>
                    {pluginInfo.status().messages().map((msg) => [msg, <br/>])}
                </dd>)
            ];
        }

        return (
            <div
                class={`c-collapse plugin ${pluginInfo.isActive() ? 'active' : 'disabled'} ${(this.showState() === 'hide') ? 'collapsed' : 'expanded'}`}>
                <div class={`c-collapse_header plugin-header ${(this.showState() === 'hide') ? 'collapsed' : 'expanded'}`}
                     onclick={vnode.state.toggleHide.bind(vnode.state)}>
                    <div className="c-collapse_header_details">
                        <span class="c-collapse_icon plugin-icon">
                          {image}
                        </span>

                        <h5 class="c-collapse_title plugin-name">{pluginInfo.about().name()}</h5>
                        <dl class="key-value-pair key-value-pair-header plugin-version">
                            <dt class="key">Version:</dt>
                            <dd class="value">{pluginInfo.about().version()}</dd>
                        </dl>
                        <dl class="key-value-pair key-value-pair-header  plugin-id">
                            <dt class="key">Id:</dt>
                            <dd class="value">{pluginInfo.id()}</dd>
                        </dl>
                    </div>
                    {actionIcons}
                </div>
                <div class={`c-collapse_body plugin-config-read-only ${vnode.state.showState()}`}>
                    <ul class="key-value-pair">
                        <li>
                            <label class="key">Description</label>
                            <span class="value">{pluginInfo.about().description()}</span>
                        </li>
                        <li>
                            <label class="key">Author</label>
                            <span class="value"> <f.link target="_blank"
                                                         href={pluginInfo.about().vendor().url()}>{pluginInfo.about().vendor().name()}</f.link> </span>
                        </li>
                        <li>
                            <label class="key">Supported operating systems</label>
                            <span
                                class="value">{_.isEmpty(pluginInfo.about().targetOperatingSystems()) ? 'No restrictions' : pluginInfo.about().targetOperatingSystems()}</span>
                        </li>
                        <li>
                            <label class="key">Plugin file location</label>
                            <span class="value"> <pre>{pluginInfo.pluginFileLocation()}</pre> </span>
                        </li>
                        <li>
                            <label class="key">Bundled</label>
                            <span class="value">{pluginInfo.bundledPlugin() ? 'Yes' : 'No'}</span>
                        </li>
                        <li>
                            <label class="key">Target Go Version</label>
                            <span class="value">{pluginInfo.about().targetGoVersion()}</span>
                        </li>
                        {errorsLoadingPlugin}
                    </ul>
                </div>

            </div>
        );
    }
};

module.exports = PluginWidget;
