<% empty_permission = com.thoughtworks.go.config.Authorization::PresentationElement.new("", scope[:permission_type]) %>

<textarea id="<%= scope[:permission_type] %>_users_and_roles_template" class="template">
    <%= scope[:f].fields_for com.thoughtworks.go.config.PipelineConfigs::AUTHORIZATION, empty_permission, :index => "" do |permission_form| %>
        <td>
            <%= permission_form.text_field com.thoughtworks.go.config.Authorization::PresentationElement::NAME, :class => "form_input permissions_#{scope[:permission_type]}_name", :id => nil %>
            <%= permission_form.hidden_field com.thoughtworks.go.config.Authorization::PresentationElement::TYPE, :id => nil %>

            <%= permission_form.fields_for com.thoughtworks.go.config.Authorization::PRIVILEGES, empty_permission, :index => "" do |privileges_form| %>
                <%= privileges_form.hidden_field com.thoughtworks.go.config.Authorization::PresentationElement::ADMIN_PRIVILEGE, :value => com.thoughtworks.go.config.Authorization::PrivilegeState::ON, :id => nil %>
            <% end %>
        </td>
        <td>
            <%= action_icon({:type => "remove", :class => "delete_parent"}) %>
        </td>
    <% end %>
</textarea>

<table class="template_permissions_table users_and_roles list_table">
    <thead>
    <tr>
        <th class="name"><%= l.string("NAME") -%></th>
        <th class="remove"><%= l.string("REMOVE") %></th>
    </tr>
    </thead>

    <tbody class="<%= scope[:permission_type] %>_users_and_roles">
    <% scope[:permissions].each do |permission| %>
        <%= scope[:f].fields_for com.thoughtworks.go.config.PipelineConfigs::AUTHORIZATION, permission, :index => "" do |permission_form| %>
            <tr id="<%= "#{scope[:permission_type]}_#{permission.getName()}" -%>">
                <td>
                    <%= permission_form.text_field com.thoughtworks.go.config.Authorization::PresentationElement::NAME, :class => "form_input permissions_#{scope[:permission_type]}_name", :id => nil %>
                    <%= permission_form.hidden_field com.thoughtworks.go.config.Authorization::PresentationElement::TYPE, :id => nil %>
                    <%= permission_form.fields_for com.thoughtworks.go.config.Authorization::PRIVILEGES, empty_permission, :index => "" do |privileges_form| %>
                        <%= privileges_form.hidden_field com.thoughtworks.go.config.Authorization::PresentationElement::ADMIN_PRIVILEGE, :value => com.thoughtworks.go.config.Authorization::PrivilegeState::ON, :id => nil %>
                    <% end %>
                    <%= error_message_on(permission, com.thoughtworks.go.config.Authorization::PresentationElement::NAME, :css_class => "name_value_error") %>
                </td>
                <td>
                    <%= action_icon({:type => "remove", :class => "delete_parent"}) %>
                </td>
            </tr>
        <% end
           end %>
    </tbody>
</table>

<%= action_icon({:type => "add", :href => "javascript:void(0);", :id => "#{scope[:permission_type]}_add_users_and_roles", :class => "skip_dirty_stop", :text => l.string("ADD_#{scope[:permission_type]}_PERMISSION")}) %>

<script type="text/javascript">
    Util.on_load(function () {
        function hookupPermissionsAutoComplete() {
            jQuery(<%=="\".permissions_#{scope[:permission_type]}_name\""%>).autocomplete(<%== scope[:autocomplete_suggestions] %>, {
                minChars: 0,
                width: 248,
                matchContains: "word",
                autoFill: false});
        }

        function setupVarForm() {
            var rowCreator = new EnvironmentVariables.RowCreator(jQuery('#<%= scope[:permission_type] %>_users_and_roles_template'), 'tr', '.delete_parent');
            var variables = new EnvironmentVariables(
                    jQuery('tbody.<%= scope[:permission_type] %>_users_and_roles'),
                    rowCreator,
                    null,
                    function (inputs) {
                        inputs.dirty_form();
                        hookupPermissionsAutoComplete();
                    },
                    function (row) {
                        row.parents("form.dirtyform").data("dirty", true);
                    });

            variables.registerAddButton(jQuery("#<%= scope[:permission_type] %>_add_users_and_roles"));
            variables.addDefaultRow();
        }

        setupVarForm();
        hookupPermissionsAutoComplete();
    });
</script>