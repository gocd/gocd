import groovy.xml.XmlUtil

import java.util.regex.Matcher
import java.util.regex.Pattern

/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

task releaseNotes {
  outputs.upToDateWhen { false }

  def releaseNotesMarkdownFile = file("${project.buildDir}/${project.distsDirName}/meta/release-notes.md")
  def releaseNotesHTMLFile = file("${project.buildDir}/${project.distsDirName}/meta/release-notes.html")

  inputs.property('goVersion', rootProject.goVersion)
  inputs.property('distVersion', rootProject.distVersion)
  inputs.property('gitRevision', rootProject.gitRevision)

  outputs.file releaseNotesMarkdownFile
  outputs.file releaseNotesHTMLFile

  doLast {
    releaseNotesMarkdownFile.getParentFile().mkdirs()
    releaseNotesHTMLFile.getParentFile().mkdirs()

    ByteArrayOutputStream gitLogOut = new ByteArrayOutputStream()
    exec {
      commandLine "git", "log", "--no-merges", "--pretty=format:%h %H %s", "${project.previousVersion}..${rootProject.gitRevision}"
      standardOutput = gitLogOut
    }

    ByteArrayOutputStream gitContributorsOut = new ByteArrayOutputStream()
    exec {

      commandLine "git", 'shortlog', "-s", "--no-merges", "${project.previousVersion}..${rootProject.gitRevision}"
      standardOutput = gitContributorsOut
    }

    def collaborators = gitContributorsOut.toString().readLines().collect { line -> line.trim().split(/\s+/, 2).last() }

    releaseNotesMarkdownFile.withWriter { md ->
      md.println "## Issues and Bug fixes\n"
      Pattern pattern = Pattern.compile(/#(\d+)/)
      gitLogOut.toString().eachLine { line ->
        def (String shortSha, String sha, String message) = line.split(/ /, 3)
        md.write("[`${shortSha}`](https://github.com/gocd/gocd/commit/${sha})")
        md.write(" ")
        Matcher matcher = pattern.matcher(message)
        if (matcher.find()) {
          md.write(matcher.replaceAll("[#\$1](https://github.com/gocd/gocd/issues/\$1)"))
        } else {
          md.write(message)
        }
        md.println("")
      }

      md.println ""
      md.println "## Contributors"
      md.println ""
      md.println(collaborators.join(", "))
    }

    releaseNotesHTMLFile.withWriter { html ->

      def bugfixes = new StringWriter()

      Pattern pattern = Pattern.compile(/#(\d+)/)
      gitLogOut.toString().eachLine { line ->
        def (String shortSha, String sha, String message) = line.split(/ /, 3)

        message = XmlUtil.escapeXml(message)

        bugfixes.write("<p>")
        bugfixes.write("""<a href="https://www.github.com/gocd/gocd/commit/${sha}"><code>${shortSha}</code></a>""")
        bugfixes.write(" ")
        Matcher matcher = pattern.matcher(message)
        if (matcher.find()) {
          bugfixes.write(matcher.replaceAll("""<a href="https://www.github.com/gocd/gocd/issues/\$1">#\$1</a>"""))
        } else {
          bugfixes.write(message)
        }
        bugfixes.write("</p>")
        bugfixes.println("")
      }

      html.println("""<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>GoCD Release Notes v${rootProject.goVersion}</title>
  <style>
    .release-notes p {
      margin: 1px;
      font-family:monospace;
    }
  </style>
</head>
<body>
<div class='release-notes'>
<h1>Issues and Bug fixes</h1>
${bugfixes}
<h1>Contributors</h1>
${collaborators.join(", ")}
</div>
</body>
</html>
""")
      html.println()
    }
  }
}

assemble.dependsOn(':installers:releaseNotes')
