/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m               = require('mithril');
const Stream          = require('mithril/stream');
const f               = require('helpers/form_helper');
const ComponentMixins = require('helpers/mithril_component_mixins');

const Template = require('models/template_configs/template');

let PipelineFlowWidget      = require('views/pipeline_configs/pipeline_flow_widget');
let ErrorsWidget            = require('views/pipeline_configs/errors_widget');
let ApprovalWidget          = require('views/template_configs/approval_widget');
let PipelineSelectionWidget = require('views/template_configs/pipeline_selection_widget');

const TemplateConfigWidget = {
  oninit () {
    const self            = this;
    self.template         = Stream(Template.defaultTemplate());
    self.currentSelection = Stream(self.template().stages().firstStage());
    self.vm               = new Template.vm();
    ComponentMixins.HasViewModel.call(this);

    const setTemplateAndPreserveSelection = function (newTemplate) {
      const oldtemplate = self.template();
      let newSelection  = newTemplate.stages().firstStage();

      if (oldtemplate) {
        newSelection = newTemplate.stages().findStage((stage) => {
          return stage.name() === self.currentSelection().name();
        });
      }
      newTemplate.isExtractedFromPipeline(oldtemplate.isExtractedFromPipeline());
      newTemplate.pipeline(oldtemplate.pipeline());

      self.template(newTemplate);
      self.currentSelection(newSelection);
    };

    self.onBack = function () {
      m.route.set('default');
    };

    self.onCreateTemplate = function () {
      self.vm.clearErrors();

      if (!self.template().isValid()) {
        self.vm.markClientSideErrors();
        self.vm.saveDefault();
        return;
      }

      self.vm.updating();

      self.template().create().then((template) => {
        m.route.set(`/${  template.name()}`);
      }, (data) => {
        self.vm.saveFailed(data);
        if (data.data) {
          setTemplateAndPreserveSelection(Template.fromJSON(data.data));
        }
      }).always(m.redraw);
    };
  },

  view (vnode) {
    const errors                  = vnode.state.vm.hasErrors() ? (
      <ErrorsWidget errors={vnode.state.vm.errors()}/>) : undefined;
    const isExtractedFromPipeline = vnode.state.template().isExtractedFromPipeline();

    let templateStages = (
      <PipelineFlowWidget pipeline={vnode.state.template}
                          currentSelection={vnode.state.currentSelection}
                          elasticProfiles={vnode.attrs.elasticProfiles}
                          pluginInfos={vnode.attrs.pluginInfos}
                          vm={vnode.state.vmState('templateFlowConfig')}/>
    );

    if (isExtractedFromPipeline) {
      templateStages = (
        <PipelineSelectionWidget template={vnode.state.template}/>
      );
    }

    const header = (
      <div class="header-panel">
        <header class="page-header">
          <f.row>
            <f.column size={10}>
              <h1>
                Add Template
              </h1>
            </f.column>
            <f.column size={1}>
              <f.button onclick={vnode.state.onBack.bind(vnode.state)}>
                Back
              </f.button>
            </f.column>
            <f.column size={1}>
              <f.button onclick={vnode.state.onCreateTemplate.bind(vnode.state)}
                        class={`save-template ${  vnode.state.vm.saveState()}`}>
                <span class={`save-state ${  vnode.state.vm.saveState()}`}/>
                Save
              </f.button>
            </f.column>
          </f.row>
        </header>
      </div>
    );

    return (
      <form class='template-main'>
        {header}
        <div class='template-body'>
          <f.row>
            {errors}
          </f.row>
          <f.row>
            <f.input attrName='name'
                     label='Template name'
                     model={vnode.state.template()}
                     validate={true}
                     isRequired={true}
                     size={12}
                     largeSize={12}/>
          </f.row>
          <f.row>
            <f.column end={true} size={12} class="permissions">
              <ApprovalWidget authorization={vnode.state.template().authorization}/>
            </f.column>
          </f.row>
          <f.row>
            <f.row>
              <f.switch model={vnode.state.template()}
                        attrName='isExtractedFromPipeline'
                        class="extract-from-pipeline"
                        label='Extract From Pipeline'
                        size={12}
                        end={true}/>
            </f.row>
            <f.column size={12}>
              {templateStages}
            </f.column>
          </f.row>
        </div>
      </form>
    );
  }
};

module.exports = TemplateConfigWidget;
