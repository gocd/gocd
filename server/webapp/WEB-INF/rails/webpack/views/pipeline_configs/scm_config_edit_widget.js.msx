/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m = require('mithril');
const f = require('helpers/form_helper');

const $             = require('jquery');
const Stream        = require('mithril/stream');
const AngularPlugin = require('views/shared/angular_plugin');

const fetchDependentPipelines = function (id) {
  const pipelineUsedInUrl = ['/go/admin/materials/pluggable_scm/', id, '/pipelines_used_in'].join('');

  return $.Deferred(function () {
    const deferred = this;

    const jqXHR = $.ajax({
      method:      'GET',
      url:         pipelineUsedInUrl,
      contentType: false
    });

    jqXHR.then((value) => {
      deferred.resolve(m.trust(value));
    });

  }).promise();
};

const SCMGlobalCopyWarningWidget = {
  oninit (vnode) {
    const self              = this;
    self.scm                = vnode.attrs.scm;
    self.dependentPipelines = Stream('');

    this.showAssociatedPipelines = function () {
      fetchDependentPipelines(self.scm.id())
        .then(self.dependentPipelines)
        .always(m.redraw);
    };
  },

  view (vnode) {
    const dependentPipelinesLink = !vnode.state.dependentPipelines() ?
      (<f.link onclick={vnode.state.showAssociatedPipelines.bind(vnode.state)}>Show pipelines using this SCM</f.link>)
      : undefined;
    return (
      <div>
        <f.row collapse>
          <f.column size={12} largeSize={12}>
            <f.warning>This is a global copy. Editing this SCM would affect all pipelines using
              it. {dependentPipelinesLink} </f.warning>
          </f.column>
        </f.row>
        <f.row collapse>
          <f.column size={12} largeSize={12}>
            {vnode.state.dependentPipelines()}
          </f.column>
        </f.row>
      </div>
    );
  }
};

const SCMConfigEditWidget = {
  oninit (vnode) {
    const self          = this;
    self.scmForEdit     = vnode.attrs.scm();
    self.pluginInfoList = Stream(vnode.attrs.pluginInfos().findById(vnode.attrs.scm().pluginMetadata().id()));
  },

  view (vnode) {
    return (
      <div class='modal-content'>
        <div class='modal-header'>
          <SCMGlobalCopyWarningWidget scm={vnode.state.scmForEdit}/>
        </div>
        <div class='modal-body'>
          <div class='key-value' size={6}>
            <label>Name</label><span>{vnode.state.scmForEdit.name()}</span>
          </div>
          <f.row>
            <f.column size={6} end>
              <f.checkbox model={vnode.state.scmForEdit}
                          attrName='autoUpdate'
                          label="Auto update"
                          class='align' />
            </f.column>
          </f.row>
          <AngularPlugin pluginInfoSettings={vnode.state.pluginInfo().extensions().scm.scmSettings}
                         configuration={vnode.attrs.scm().configuration}
                         key={vnode.state.pluginInfo() ? vnode.state.pluginInfo().id() : 'no-plugin'}/>
        </div>
      </div>
    );
  }
};

module.exports = SCMConfigEditWidget;
