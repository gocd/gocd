/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'helpers/form_helper', 'helpers/pipeline_configs/tooltips', 'helpers/mithril_component_mixins', 'views/shared/new_modal',
  'models/pipeline_configs/packages', 'models/pipeline_configs/plugin_infos'
], function (m, _, f, tt, ComponentMixins, Modal, Packages, PluginInfos) {

  var onSuccessOfPackageApi = function(vm, modal, material, data) {
    vm.saveSuccess();
    material.ref(data.id());
    material.repository().addPackage(data)
    modal.destroy();
  };

  var onFailureOfPackageApi = function (vm, data) {
    vm.saveFailed(data);
  };

  var NewPackageWidget = {
    controller: function (args) {
      Packages.init(args.material.repository().id());
      var ctrl = {
        create : function () {
          var packageForEdit = m.prop(new Packages.Package({}));
          var vm          = new Packages.vm();

          var modal = new Modal({
            size:    'small',
            title:   'Add Package',
            body:    (<PackageConfigNewWidget packageForEdit={packageForEdit}
                                                 vm={vm}/>),
            onclose: function () {
              vm.reset();
              modal.destroy();
            },
            buttons: [
              {
                text:    'Save',
                class:   'save primary',
                onclick: function () {
                  vm.startUpdating();
                  packageForEdit()().create().then(onSuccessOfPackageApi.bind(this, vm, modal, args.material), onFailureOfPackageApi.bind(this, vm));
                }
              }
            ]
          });
          modal.render();
        }
      };
      return ctrl;

    },

    view: function (ctrl, args) {
      debugger;
      return (
        <f.row>
          <f.column class='no-repo' size={4} largeSize={6} end>
            {_.isEmpty(Packages()) ?
              <div>
                <label>No packages available.</label> <a class='add-button button' href="javascript:void(0)"
                                                             onclick={ctrl.create}>Create New Package</a></div>
              : <a class='add-button button' href="javascript:void(0)"
                   onclick={ctrl.create}/>}

          </f.column>
        </f.row>
      );
    }
  };

  var EditPackageWidget = {
    controller: function (args) {

    },

    view: function (ctrl, args) {
      return (
        <div></div>
      )
    }
  };

  var PackageWidget= {
    controller: function (args) {

    },
    view: function (ctrl, args) {
      return (
       <div>
         <NewPackageWidget material={args.material}/>
         <EditPackageWidget material={args.material}/>
       </div>
      )
    }
  };
  return PackageWidget;
});