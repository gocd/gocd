/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import com.thoughtworks.go.build.LicenseReport
import com.thoughtworks.go.build.VerifyJarTask
import groovy.json.JsonSlurper
import org.eclipse.jgit.api.Git
import org.jruby.CompatVersion
import org.jruby.Ruby
import org.jruby.RubyInstanceConfig

import java.nio.file.FileSystems

description = 'GoCD Server'

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath group: 'org.jruby', name: 'jruby-complete', version: project.versions.jruby
    classpath group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: project.versions.jgit
  }
}

sourceSets {
  test {
    resources {
      srcDirs += ['properties/test', 'webapp', 'test/data']
      exclude "WEB-INF/rails.new/"
    }
  }

  sharedTest {
    java {
      srcDirs = [project.file('src/test-shared/java')]
    }
    resources {
      srcDirs = [project.file('src/test-shared/resources')]
    }

    compileClasspath += sourceSets.main.output + configurations.compileOnly + configurations.testCompileOnly
    runtimeClasspath += sourceSets.main.output + configurations.compileOnly + configurations.testCompileOnly
  }

  fastUnitTest {
    java {
      srcDirs = [project.file('src/test-fast/java')]
    }
    resources {
      srcDirs = [project.file('src/test-fast/resources')]
    }

    compileClasspath += sourceSets.sharedTest.output + sourceSets.sharedTest.compileClasspath
    runtimeClasspath += sourceSets.sharedTest.output + sourceSets.sharedTest.runtimeClasspath
  }

  integrationTest {
    java {
      srcDirs = [project.file('src/test-integration/java')]
    }
    resources {
      srcDirs = [project.file('src/test-integration/resources')]
    }

    compileClasspath += sourceSets.sharedTest.output + sourceSets.sharedTest.compileClasspath
    runtimeClasspath += sourceSets.sharedTest.output + sourceSets.sharedTest.runtimeClasspath
  }
}

configurations {
  sharedTestCompile.extendsFrom testCompile
  fastUnitTestCompile.extendsFrom sharedTestCompile
  integrationTestCompile.extendsFrom sharedTestCompile

  warConfig
  jarConfig
  additionalClasspath

  copyOnly {
    transitive = false
  }

  copyOnlyTestData {
    transitive = false
  }

  compile.exclude(group: 'org.springframework', module: 'spring-support')
  runtime.exclude(group: 'org.springframework', module: 'spring-support')

  // this dependency is a "provided" dependency
  compile.exclude(group: 'ch.qos.logback', module: 'logback-classic')
  runtime.exclude(group: 'ch.qos.logback', module: 'logback-classic')
  api.exclude(group: 'ch.qos.logback', module: 'logback-classic')
  spark.exclude(group: 'ch.qos.logback', module: 'logback-classic')
}

project.ext.railsRoot = file("${project.projectDir}/webapp/WEB-INF/rails.new")

def props = [
  'go.enforce.server.immutability'  : 'N',
  'gocd.environments.show.pipelines': 'Y',
  'rails.use.compressed.js'         : 'false',
  'go.database.provider'            : 'com.thoughtworks.go.server.database.H2Database',
  'db.host'                         : 'localhost',
  'db.user'                         : 'sa',
  'db.password'                     : '',
  'db.name'                         : 'cruise',
  'db.port'                         : ''
]
props.putAll(project.hasProperty('testSystemProperties') ? project.testSystemProperties : [:])
project.ext.testSystemProperties = props

dependencies {
  api project(':api').subprojects
  spark project(':spark').subprojects
  compile project(':addon-api:database')
  compile project(':config:config-server')
  compile project(':plugin-infra:go-plugin-access')
  compile project(':common')
  compile project(':rack_hack')

  copyOnly project(path: ':tfs-impl:tfs-impl-14', configuration: 'fatJarConfig')
  copyOnly project(path: ':agent', configuration: 'fatJarConfig')
  copyOnly project(path: ':agent-launcher', configuration: 'fatJarConfig')
  copyOnlyTestData project(':test:test-agent')

  compile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4'
  compile group: 'com.h2database', name: 'h2', version: project.versions.h2db
  compile group: 'net.sf', name: 'dbdeploy', version: '2.11.1'
  compile(group: 'org.hibernate', name: 'hibernate-ehcache', version: project.versions.hibernate) {
    exclude(module: 'ehcache-core')
    exclude(module: 'commons-collections')
  }

  compile group: 'commons-fileupload', name: 'commons-fileupload', version: project.versions.commonsFileUpload

  compile group: 'javassist', name: 'javassist', version: project.versions.javaAssist
  compile group: 'org.mybatis', name: 'mybatis', version: project.versions.mybatis
  compile group: 'org.mybatis', name: 'mybatis-spring', version: project.versions.mybatisSpring
  compile group: 'net.sf.ehcache', name: 'ehcache', version: project.versions.ehcache
  compile(group: 'opensymphony', name: 'oscache', version: '2.4.1') {
    exclude(module: 'jms')
    exclude(module: 'servlet-api')
  }
  compile(group: 'org.apache.activemq', name: 'activemq-core', version: '5.5.0') {
    exclude(module: 'spring-context')
    exclude(module: 'org.osgi.core')
  }

  compile group: 'org.jruby', name: 'jruby-complete', version: project.versions.jruby
  compile group: 'org.jruby.rack', name: 'jruby-rack', version: versions.rack
  compile group: 'org.eclipse.rdf4j', name: 'rdf4j-queryalgebra-model', version: project.versions.rdf4j
  compile group: 'org.eclipse.rdf4j', name: 'rdf4j-queryparser-sparql', version: project.versions.rdf4j
  compile group: 'org.eclipse.rdf4j', name: 'rdf4j-queryresultio-api', version: project.versions.rdf4j
  compile group: 'org.eclipse.rdf4j', name: 'rdf4j-queryresultio-sparqlxml', version: project.versions.rdf4j
  compile group: 'org.eclipse.rdf4j', name: 'rdf4j-repository-api', version: project.versions.rdf4j
  compile group: 'org.eclipse.rdf4j', name: 'rdf4j-rio-n3', version: project.versions.rdf4j
  compile group: 'org.eclipse.rdf4j', name: 'rdf4j-rio-rdfxml', version: project.versions.rdf4j
  compile group: 'org.eclipse.rdf4j', name: 'rdf4j-sail-memory', version: project.versions.rdf4j
  compile group: 'org.eclipse.rdf4j', name: 'rdf4j-repository-sail', version: project.versions.rdf4j

  compile group: 'org.springframework', name: 'spring-orm', version: project.versions.spring
  compile group: 'org.springframework', name: 'spring-web', version: project.versions.spring
  compile group: 'org.springframework', name: 'spring-context-support', version: project.versions.spring
  compile(group: 'org.springframework.security', name: 'spring-security-web', version: project.versions.springSecurity) {
    exclude(group: 'org.springframework')
  }
  compile(group: 'org.springframework.security', name: 'spring-security-config', version: project.versions.springSecurity)
  compile group: 'com.apple', name: 'AppleJavaExtensions', version: '1.4'
  compile group: 'org.aspectj', name: 'aspectjweaver', version: '1.5.4'
  compile group: 'org.tuckey', name: 'urlrewritefilter', version: '3.2.0'
  compile(group: 'org.apache.velocity', name: 'velocity', version: '1.7') {
    exclude(module: 'commons-lang')
    exclude(module: 'commons-collections')
  }
  compile group: 'velocity-tools', name: 'velocity-tools-view', version: project.versions.velocityToolsView
  // this is needed by velocity tools view
  compile group: 'commons-lang', name: 'commons-lang', version: project.versions.commonsLang
  compile group: 'commons-collections', name: 'commons-collections', version: project.versions.commonsCollections
  compile group: 'com.google.guava', name: 'guava', version: project.versions.guava
  compile group: 'com.sun.mail', name: 'mailapi', version: project.versions.mail
  compile group: 'com.sun.mail', name: 'smtp', version: project.versions.mail
  compile group: 'org.objenesis', name: 'objenesis', version: project.versions.objenesis

  // needed by jdom2 for some XPATH stuff
  compile(group: 'jaxen', name: 'jaxen', version: '1.1.6') {
    exclude(module: 'xom')
    exclude(module: 'jdom')
  }
  compile group: 'org.slf4j', name: 'slf4j-api', version: project.versions.slf4j
  compile(group: 'org.eclipse.jgit', name: 'org.eclipse.jgit.http.server', version: project.versions.jgit) {
    exclude(module: 'jsch')
  }
  compile group: 'cglib', name: 'cglib-nodep', version: '2.2'
  compileOnly project(':app-server')
  compileOnly group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: project.versions.bouncyCastle
  compileOnly group: 'org.eclipse.jetty.websocket', name: 'websocket-server', version: versions.jetty

  testCompile group: 'org.dbunit', name: 'dbunit', version: project.versions.dbunit
  testCompile project(path: ':common', configuration: 'testOutput')
  testCompile project(path: ':config:config-server', configuration: 'testOutput')
  testCompile project(path: ':config:config-api', configuration: 'testOutput')
  testCompile project(path: ':test:test-utils')
  testCompile project(':jetty9')
  testCompile group: 'org.skyscreamer', name: 'jsonassert', version: project.versions.jsonAssert
  testCompile group: 'org.jsoup', name: 'jsoup', version: project.versions.jsoup
  testCompile group: 'net.javacrumbs.json-unit', name: 'json-unit', version: project.versions.jsonUnit
  testCompile group: 'org.xmlunit', name: 'xmlunit-matchers', version: project.versions.xmlUnitMatchers
  testCompile group: 'org.assertj', name: 'assertj-core', version: project.versions.assertJ
  testCompile project(':test:http-mocks')

  testCompileOnly group: 'junit', name: 'junit', version: project.versions.junit
  testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: project.versions.junit5
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: project.versions.junit5
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-migrationsupport', version: project.versions.junit5
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: project.versions.junit5
}

jar {
  classifier = 'classes'
  exclude '**/*/logback.xml'
  exclude 'logback.xml'
}

idea {
  module {
    testSourceDirs += sourceSets.sharedTest.java.srcDirs
    testSourceDirs += sourceSets.fastUnitTest.java.srcDirs
    testSourceDirs += sourceSets.integrationTest.java.srcDirs

    // some hax to fudge the intellij xml
    iml.withXml {
      def node = it.asNode()
      def content = node.component.find { it.'@name' == 'NewModuleRootManager' }.content[0]
      content.sourceFolder.each { sourceFolder ->
        if(sourceFolder.@url?.endsWith('/resources')) {
          sourceFolder.attributes().with {
            boolean isTestSource = (remove('isTestSource') == 'true')
            put('type', isTestSource ? 'java-test-resource' : 'java-resource')
          }
        }
      }
    }
  }
}

task sharedTest(type: Test) { thisTask ->
  description = 'Runs the functional tests.'
  group = 'verification'
  testClassesDirs = sourceSets.sharedTest.output.classesDirs
  classpath = sourceSets.sharedTest.runtimeClasspath
  mustRunAfter test

  reports {
    html.enabled = true
    junitXml.enabled = true
  }

  doFirst {
    def files = project.files([])
    project.sourceSets[thisTask.name].java.srcDirs.each { srcDir ->
      files = files.plus(project.fileTree(dir: srcDir, includes: ['**/*.java']))
    }

    def badFiles = files.findAll { eachFile ->
      def text = eachFile.getText("utf-8")
      text.contains("@Test")
    }

    if (!badFiles.isEmpty()) {
      throw new GradleException("${thisTask} is not supposed to contain any tests. The following files contained what looks like test code:\n${badFiles.collect { f -> "  - ${f}" }.join("\n")}")
    }
  }
}

task fastUnitTest(type: Test) { thisTask ->
  description = 'Runs the fast unit tests.'
  group = 'verification'

  testClassesDirs += sourceSets.fastUnitTest.output.classesDirs
  classpath += sourceSets.fastUnitTest.runtimeClasspath

  mustRunAfter test

  forkEvery 256
  minHeapSize '1g'
  maxHeapSize '4g'

  reports {
    html.enabled = true
    junitXml.enabled = true
  }

  doFirst {
    def files = project.files([])
    project.sourceSets[thisTask.name].java.srcDirs.each { srcDir ->
      files = files.plus(project.fileTree(dir: srcDir, includes: ['**/*.java']))
    }

    def badFiles = files.findAll { eachFile ->
      def text = eachFile.getText("utf-8")
      text.contains("@SpringJUnit4ClassRunner") || text.contains("@ContextConfiguration") || text.contains("@GoJUnitExtSpringRunner")
    }

    if (!badFiles.isEmpty()) {
      throw new GradleException("${thisTask} is not supposed to contain any integration tests. The following files contained what looks like integration test code:\n${badFiles.collect { f -> "  - ${f}" }.join("\n")}")
    }
  }
}

task integrationTest(type: Test) { thisTask ->
  description = 'Runs the integration tests.'
  group = 'verification'
  testClassesDirs += sourceSets.integrationTest.output.classesDirs
  classpath += sourceSets.integrationTest.runtimeClasspath
  mustRunAfter test

  forkEvery System.properties.containsKey('idea.home.path') ? 0 : 1
  minHeapSize '1024m'
  maxHeapSize '2048m'

  reports {
    html.enabled = true
    junitXml.enabled = true
  }

  doFirst {
    def excludes = [
      'com/thoughtworks/go/server/materials/MaterialDatabaseGitUpdaterTest.java',
      'com/thoughtworks/go/server/materials/MaterialDatabaseGitWithSubmodulesUpdaterTest.java',
      'com/thoughtworks/go/server/materials/MaterialDatabaseSvnWithExternalsUpdaterTest.java'
    ].collect { eachExclude -> FileSystems.getDefault().getPath(eachExclude) }

    def files = project.files([])
    project.sourceSets[thisTask.name].java.srcDirs.each { srcDir ->
      files = files.plus(project.fileTree(dir: srcDir, includes: ['**/*.java']))
    }

    def badFiles = files.findAll { eachFile ->
      def text = eachFile.getText("utf-8")
      text.contains("@Test") && !(text.contains("@SpringJUnit4ClassRunner") || text.contains("@ContextConfiguration") || text.contains("@GoJUnitExtSpringRunner"))
    }

    badFiles.removeIf { badFile ->
      excludes.any { eachExclude ->
        badFile.toPath().endsWith(eachExclude)
      }
    }

    if (!badFiles.isEmpty()) {
      throw new GradleException("${thisTask} is not supposed to contain any unit tests. The following files contained what looks like unit test code:\n${badFiles.collect { f -> "  - ${f}" }.join("\n")}")
    }
  }

}

task sharedTestJar(type: Jar) {
  description = "Assembles a jar archive containing the sharedTest classes."
  group = BasePlugin.BUILD_GROUP
  from sourceSets.sharedTest.output
  classifier = 'shared-test'
}

task fastUnitTestJar(type: Jar) {
  description = "Assembles a jar archive containing the fastUnitTest classes."
  group = BasePlugin.BUILD_GROUP
  from sourceSets.fastUnitTest.output
  classifier = 'fast-unit-test'
}

check.dependsOn(sharedTest, fastUnitTest, integrationTest)

def findGemsToNotPack = {
  if (project.hasProperty('noAssets')) {
    return []
  }

  def gems = []
  Ruby ruby
  try {
    def config = new RubyInstanceConfig()
    config.compatVersion = CompatVersion.RUBY2_0
    config.output = System.out
    config.error = System.err
    config.compileMode = RubyInstanceConfig.CompileMode.OFF

    ruby = Ruby.newInstance(config)
    gems = ruby.evalScriptlet(
      """
          Dir.chdir('${project.railsRoot}') do
            \$LOAD_PATH.unshift("vendor/bundle/jruby/1.9/gems/bundler-1.9.9/lib")
            require 'bundler'
            require 'json'
            definition = ::Bundler.definition
            all = definition.specs.to_a
            #puts "*** All gems - #{all.collect(&:full_name)}"

            requested = definition.specs_for(definition.groups.collect(&:to_sym) - [:development, :test, :assets]).to_a
            #puts "*** Gems that should be packaged - #{requested.collect(&:full_name)}"

            ignored_gems = all - requested
            #puts "*** Ignored gems - #{ignored_gems.collect(&:full_name)}"
            ignored_gems.collect(&:full_name)
          end
          """
    )
  } finally {
    if (ruby != null) {
      ruby.tearDown()
    }
  }

  if (gems.isEmpty()) {
    throw new UnknownError("There seems to have been a problem with detecting which gems should not be packaged!")
  }
  return gems
}

task cleanDb(type: Delete) {
  delete "db/h2db"
  delete "db/h2deltas"
  delete "db/shine"
  delete "db/config.git"
}

clean.dependsOn cleanDb

task copyH2Db(type: Copy, dependsOn: [':server:cleanDb']) {
  from('db/dbtemplate/h2db')
  into('db/h2db')
}

task copyH2Deltas(type: Copy, dependsOn: [':server:cleanDb']) {
  from('db/migrate/h2deltas')
  into('db/h2deltas')
}

task cleanTestRepo(type: Delete) {
  delete 'test-repo'
}

clean.dependsOn cleanTestRepo

task prepareTestGitRepo {
  File repoDir = project.file('test-repo')
  outputs.dir repoDir

  doFirst {
    project.delete(repoDir)
    repoDir.mkdirs()

    // `git init`
    Git git = Git.init().setDirectory(repoDir).call()

    git.getRepository().config.setBoolean("commit", null, "gpgsign", false)
    git.getRepository().config.save()

    // create a file
    project.file("${repoDir}/README.md").withPrintWriter { out ->
      out.println("# This is a test repo")
    }

    git.add().addFilepattern(".").call()
    git.commit()
      .setAuthor("GoCD Test User", "devnull@example.com")
      .setCommitter("GoCD Test User", "devnull@example.com")
      .setMessage("Initial commit").call()
  }
}

task prepareDb {
  dependsOn copyH2Db, copyH2Deltas
}

task copyTestDataJarsToServerDir(type: Copy) {
  from(project.configurations.copyOnlyTestData)
  into 'testdata'
  rename "(.*)-${project.version}.jar", '$1.jar'
}

task copyAgentJarsToServerDir(type: Copy) {
  from(project.configurations.copyOnly)
  into '.'
  rename "(.*)-${project.version}.jar", '$1.jar'
}

task copyAgentSideJarsToServerDir(dependsOn: [copyAgentJarsToServerDir, copyTestDataJarsToServerDir])

task prepareNoRails {
  dependsOn = [cleanDb, prepareDb, ':plugin-infra:go-plugin-activator:jar', copyAgentJarsToServerDir]
}

task prepare {
  dependsOn = [prepareNoRails, prepareTestGitRepo, ':server:dependencyClassPath', ':server:compileAssetsDev']
}

test {
  dependsOn prepareNoRails
}

test { Test thisTask ->
  doFirst {
    def files = project.files([])
    project.sourceSets[thisTask.name].java.srcDirs.each { srcDir ->
      files = files.plus(project.fileTree(dir: srcDir, includes: ['**/*.java']))
    }

    def badFiles = files.findAll { eachFile ->
      def text = eachFile.getText("utf-8")
      text.contains("@Test")
    }

    if (!badFiles.isEmpty()) {
      throw new GradleException("${thisTask} is not supposed to contain any unit tests. Move the tests to fast-test or integration-test as appropriate. The following files contained what looks like test code:\n${badFiles.collect { f -> "  - ${f}" }.join("\n")}")
    }
  }
}

tasks.withType(Test) {
  dependsOn copyAgentSideJarsToServerDir
  dependsOn prepareNoRails

  def heapDumpDir = project.file("${buildDir}/heap-dumps")
  if (project.hasProperty("heapDumpOnOOM")) {
    jvmArgs("-XX:+HeapDumpOnOutOfMemoryError", "-XX:HeapDumpPath=${heapDumpDir}")
  }

  doFirst {
    project.delete(heapDumpDir)
    project.mkdir(heapDumpDir)
    project.file("${heapDumpDir}/ignore.txt").createNewFile()
  }

  doLast {
    project.fileTree(heapDumpDir).files.each { File eachFile ->
      ant.gzip(src: eachFile, destfile: "${eachFile}.gz")
      project.delete eachFile
    }
  }

  systemProperties += project.testSystemProperties

  classpath += project.files(project.configurations.additionalClasspath.files)

  testLogging {
    showStandardStreams = false
    exceptionFormat 'full'
  }

  onOutput { TestDescriptor descriptor, TestOutputEvent event ->
    if (event.message.startsWith("Compiler warnings:")) {
      return
    }

    if (event.message.startsWith("  WARNING:  'org.apache.xerces.jaxp.SAXParserImpl:")) {
      return
    }

    if (event.message.startsWith("Warning:  org.apache.xerces.parsers.SAXParser:")) {
      return
    }

    if (event.message.startsWith("Warning:  org.apache.xerces.jaxp.SAXParserImpl\$JAXPSAXParser")) {
      return
    }

    if (event.destination == TestOutputEvent.Destination.StdOut) {
      logger.quiet(TextUtil.toPlatformLineSeparators(TextUtil.indent(event.getMessage(), "  OUT: ")))
    } else if (event.destination == TestOutputEvent.Destination.StdErr) {
      logger.quiet(TextUtil.toPlatformLineSeparators(TextUtil.indent(event.getMessage(), "  ERR: ")))
    }
  }
}

clean {
  delete 'artifacts'
  delete 'artifactsDir'
  delete 'data'
  delete 'felix-cache'
  delete 'pipelines'
  delete 'plugins'
  delete 'tfs-impl-14.jar'
  delete 'agent-launcher.jar'
  delete 'agent.jar'
  delete 'plugins_work'
  delete 'testdata/test-agent.jar'
  delete 'config/agentkeystore'
  delete 'config/keystore'
  delete 'config/truststore'
}

task inlinePartials {
  if (!project.hasProperty('fastBuild')) {
    dependsOn ':tools:prepareJRuby'
  }

  def inlinedPartialsDir = file("${project.buildDir}/inline-partials")
  def viewsDir = file("${project.railsRoot}/app/views")

  outputs.dir(inlinedPartialsDir)
  inputs.dir(viewsDir)
  outputs.cacheIf { true }

  doFirst {
    delete inlinedPartialsDir
    inlinedPartialsDir.mkdirs()

    copy {
      from "${project.railsRoot}/app/views"
      into inlinedPartialsDir
    }

    if (!project.hasProperty('fastBuild')) {
      exec {
        standardOutput = System.out
        errorOutput = System.err

        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
          executable = project.findProject(':tools').file("rails/bin/jruby.bat")
        } else {
          executable = project.findProject(':tools').file("rails/bin/jruby")
        }

        environment += [
          'INPUT_DIR': inlinedPartialsDir
        ]

        args = ['-S', 'rake', '--trace', '--rakefile', 'inline-partials.rake']
      }
    }
  }
}

task war(type: Jar) {
  dependsOn rootProject.generateLicenseReport
  dependsOn ':server:jar', ':server:compileAssets', ':server:inlinePartials'
  dependsOn project.configurations.compile
  dependsOn project.configurations.api
  dependsOn project.configurations.spark
  finalizedBy 'verifyWar'
  baseName = 'cruise'
  extension 'war'

  // do this lazily because finding gems is expensive during the configure cycle causing gradle to boot really slow
  exclude '**/*/logback.xml'
  exclude 'logback.xml'

  // exclude app-server because it causes class cast exceptions (loaded by different classloaders)

  def classpath = (project.configurations.api + project.configurations.spark + project.configurations.compile)
    .minus(project(':app-server').jar.archivePath)
    .minus(jar.archivePath)

  from(classpath) {
    into 'WEB-INF/lib'
  }

  from(zipTree(jar.archivePath)) {
    into('WEB-INF/classes')
  }

  from("${project(':server').projectDir}/webapp/WEB-INF/rails.new/webpack/rails-shared/plugin-endpoint.js") {
    into('WEB-INF/classes')
  }

  from("${project(':config:config-server').sourceSets.main.resources}/cruise-config.xsd") {
    into '/'
  }

  from(project.project(':config:config-server').sourceSets.main.resources.srcDirs) {
    into('/') include('cruise-config.xsd')
  }
  from("messages/message.properties") { into('/') }

  from({ compileAssets }) { into '/WEB-INF/rails.new/public/assets' }

  from("webapp/WEB-INF/web.xml") {
    filter {
      it.replaceAll('<param-value>development</param-value>', '<param-value>production</param-value>')
    }
    into "/WEB-INF"
  }

  from('webapp') { theSpec ->
    into '/'
    exclude('WEB-INF/web.xml')
    exclude("**/rails.new/*.log")
    exclude("**/rails.new/log/*")
    exclude("**/rails.new/node_modules/")
    exclude("**/rails.new/spec/")
    exclude("**/rails.new/tmp/")
    exclude("**/rails.new/**/jruby/*/cache/*.gem")
    exclude("**/rails.new/app/assets/")
    exclude("**/rails.new/app/views/**/*.*")
    exclude("**/rails.new/webpack/")
    findGemsToNotPack().each { gem ->
      theSpec.exclude("**/rails.new/vendor/bundle/jruby/1.9/gems/${gem}")
      theSpec.exclude("**/rails.new/vendor/bundle/jruby/1.9/specifications/${gem}.gemspec")
      theSpec.exclude("**/rails.new/vendor/bundle/jruby/1.9/build_info/${gem}.info")
    }
  }

  from(inlinePartials) {
    into '/WEB-INF/rails.new/app/views'
  }
}

task verifyWar(type: VerifyJarTask) {
  jarTask = war
  expectedJars = [
    "WEB-INF/lib": (
      ((project(':api').subprojects + project(':spark').subprojects).collect { eachProject -> eachProject.jar.archivePath.name })
        + [
        "activation-1.1.jar",
        "activeio-core-3.1.2.jar",
        "activemq-core-5.5.0.jar",
        "activemq-protobuf-1.1.jar",
        "antlr-2.7.6.jar",
        "aopalliance-1.0.jar",
        "AppleJavaExtensions-1.4.jar",
        "asm-1.5.3.jar",
        "aspectjweaver-1.5.4.jar",
        "base-${project.version}.jar",
        "cglib-2.1_3.jar",
        "cglib-nodep-2.2.jar",
        "cloning-${project.versions.cloning}.jar",
        "commandline-${project.version}.jar",
        "common-${project.version}.jar",
        "commons-beanutils-1.7.0.jar",
        "commons-beanutils-core-1.7.0.jar",
        "commons-codec-${project.versions.commonsCodec}.jar",
        "commons-collections-3.2.2.jar",
        "commons-collections4-${project.versions.commonsCollections4}.jar",
        "commons-dbcp-1.4.jar",
        "commons-digester-1.8.jar",
        "commons-fileupload-${project.versions.commonsFileUpload}.jar",
        "commons-io-${project.versions.commonsIO}.jar",
        "commons-lang-${project.versions.commonsLang}.jar",
        "commons-lang3-${project.versions.commonsLang3}.jar",
        "commons-net-2.0.jar",
        "commons-pool-1.5.6.jar",
        "config-api-${project.version}.jar",
        "config-server-${project.version}.jar",
        "database-${project.version}.jar",
        "db-${project.version}.jar",
        "dbdeploy-2.11.1.jar",
        "dom4j-1.6.1.jar",
        "domain-${project.version}.jar",
        "ehcache-${project.versions.ehcache}.jar",
        "geronimo-j2ee-management_1.1_spec-1.0.1.jar",
        "geronimo-jms_1.1_spec-1.1.1.jar",
        "go-plugin-access-${project.version}.jar",
        "go-plugin-activator-${project.version}.jar",
        "go-plugin-api-${project.version}.jar",
        "go-plugin-api-internal-${project.version}.jar",
        "go-plugin-domain-${project.version}.jar",
        "go-plugin-infra-${project.version}.jar",
        "gson-${project.versions.gson}.jar",
        "guava-${project.versions.guava}.jar",
        "h2-${project.versions.h2db}.jar",
        "hibernate-commons-annotations-3.2.0.Final.jar",
        "hibernate-core-${project.versions.hibernate}.jar",
        "hibernate-ehcache-${project.versions.hibernate}.jar",
        "hibernate-jpa-2.0-api-1.0.1.Final.jar",
        "httpclient-${project.versions.apacheHttpComponents}.jar",
        "httpcore-4.4.9.jar",
        "httpmime-${project.versions.apacheHttpComponents}.jar",
        "jackson-annotations-2.9.0.jar",
        "jackson-core-2.9.4.jar",
        "jackson-databind-2.9.4.jar",
        "jasypt-1.7.jar",
        "JavaEWAH-1.1.6.jar",
        "javassist-${project.versions.javaAssist}.jar",
        "javasysmon-0.3.6.jar",
        "javax.inject-1.jar",
        "javax.servlet-api-3.1.0.jar",
        "jaxen-1.1.6.jar",
        "jcl-over-slf4j-${project.versions.slf4j}.jar",
        "jdom2-${project.versions.jdom}.jar",
        "joda-time-${project.versions.jodaTime}.jar",
        "jolt-core-${project.versions.jolt}.jar",
        "jruby-complete-${project.versions.jruby}.jar",
        "jruby-rack-${versions.rack}.jar",
        "json-utils-${project.versions.jolt}.jar",
        "jta-1.1.jar",
        "kahadb-5.5.0.jar",
        "mailapi-${project.versions.mail}.jar",
        "mapdb-1.0.8.jar",
        "mybatis-${project.versions.mybatis}.jar",
        "mybatis-spring-${project.versions.mybatisSpring}.jar",
        "objenesis-${project.versions.objenesis}.jar",
        "org.apache.felix.framework-${project.versions.felix}.jar",
        "org.eclipse.jgit-${project.versions.jgit}.jar",
        "org.eclipse.jgit.http.server-${project.versions.jgit}.jar",
        "oro-${project.versions.oro}.jar",
        "oscache-2.4.1.jar",
        "plugin-metadata-store-${project.version}.jar",
        "quartz-${project.versions.quartz}.jar",
        "rack_hack-${project.version}.jar",
        "rdf4j-http-client-${project.versions.rdf4j}.jar",
        "rdf4j-http-protocol-${project.versions.rdf4j}.jar",
        "rdf4j-model-${project.versions.rdf4j}.jar",
        "rdf4j-query-${project.versions.rdf4j}.jar",
        "rdf4j-queryalgebra-evaluation-${project.versions.rdf4j}.jar",
        "rdf4j-queryalgebra-model-${project.versions.rdf4j}.jar",
        "rdf4j-queryparser-api-${project.versions.rdf4j}.jar",
        "rdf4j-queryparser-serql-${project.versions.rdf4j}.jar",
        "rdf4j-queryparser-sparql-${project.versions.rdf4j}.jar",
        "rdf4j-queryresultio-api-${project.versions.rdf4j}.jar",
        "rdf4j-queryresultio-sparqlxml-${project.versions.rdf4j}.jar",
        "rdf4j-repository-api-${project.versions.rdf4j}.jar",
        "rdf4j-repository-sail-${project.versions.rdf4j}.jar",
        "rdf4j-repository-sparql-${project.versions.rdf4j}.jar",
        "rdf4j-rio-api-${project.versions.rdf4j}.jar",
        "rdf4j-rio-datatypes-${project.versions.rdf4j}.jar",
        "rdf4j-rio-languages-${project.versions.rdf4j}.jar",
        "rdf4j-rio-n3-${project.versions.rdf4j}.jar",
        "rdf4j-rio-ntriples-${project.versions.rdf4j}.jar",
        "rdf4j-rio-rdfxml-${project.versions.rdf4j}.jar",
        "rdf4j-rio-trig-${project.versions.rdf4j}.jar",
        "rdf4j-rio-turtle-${project.versions.rdf4j}.jar",
        "rdf4j-sail-api-${project.versions.rdf4j}.jar",
        "rdf4j-sail-base-${project.versions.rdf4j}.jar",
        "rdf4j-sail-inferencer-${project.versions.rdf4j}.jar",
        "rdf4j-sail-memory-${project.versions.rdf4j}.jar",
        "rdf4j-sail-model-${project.versions.rdf4j}.jar",
        "rdf4j-util-${project.versions.rdf4j}.jar",
        "slf4j-api-${project.versions.slf4j}.jar",
        "smtp-${project.versions.mail}.jar",
        "spark-core-${project.versions.spark}.jar",
        "spring-aop-${project.versions.spring}.jar",
        "spring-beans-${project.versions.spring}.jar",
        "spring-context-${project.versions.spring}.jar",
        "spring-context-support-${project.versions.spring}.jar",
        "spring-core-${project.versions.spring}.jar",
        "spring-expression-${project.versions.spring}.jar",
        "spring-jdbc-${project.versions.spring}.jar",
        "spring-orm-${project.versions.spring}.jar",
        "spring-security-config-${project.versions.springSecurity}.jar",
        "spring-security-core-${project.versions.springSecurity}.jar",
        "spring-security-web-${project.versions.springSecurity}.jar",
        "spring-tx-${project.versions.spring}.jar",
        "spring-web-${project.versions.spring}.jar",
        "spring-webmvc-${project.versions.spring}.jar",
        "token-bucket-${project.versions.tokenBucket}.jar",
        "urlrewritefilter-3.2.0.jar",
        "util-${project.version}.jar",
        "velocity-1.7.jar",
        "velocity-tools-view-${project.versions.velocityToolsView}.jar",
      ])
  ]
}

task licenseReportAggregate {
  if (!project.hasProperty('fastBuild')) {
    rootProject.subprojects.each {
      if (it.plugins.hasPlugin(com.hierynomus.gradle.license.LicenseReportingPlugin)) {
        licenseReportAggregate.dependsOn "${it.path}:generateLicenseReport"
        licenseReportAggregate.inputs.dir(it.licenseReport.outputDir)
      }
    }
    dependsOn generateLicenseReport
  }

  onlyIf { !project.hasProperty('fastBuild') }

  def licenseReportAggregateOutputDir = project.file("${project.buildDir}/reports/license-report-aggregate")
  outputs.dir(licenseReportAggregateOutputDir)

  LinkedHashSet<Map<String, Object>> missingLicenseData = [
    [
      moduleName    : 'antlr:antlr',
      moduleVersion : '2.7.6',
      moduleUrls    : [
        "https://www.antlr.org"
      ],
      moduleLicenses: [
        [
          moduleLicense   : 'BSD-3-Clause',
          moduleLicenseUrl: "https://spdx.org/licenses/BSD-3-Clause.html"
        ]
      ]
    ],
    [
      moduleName    : 'net.sf.ehcache:ehcache',
      moduleVersion : '2.10.5',
      moduleUrls    : [
        "http://ehcache.org",
        'http://www.terracotta.org'
      ],
      moduleLicenses: [
        [
          moduleLicense   : 'Apache License, Version 2.0',
          moduleLicenseUrl: "http://www.apache.org/licenses/LICENSE-2.0"
        ]
      ]
    ],
    [
      moduleName    : 'asm:asm',
      moduleVersion : '1.5.3',
      moduleUrls    : [
        "http://asm.objectweb.org/"
      ],
      moduleLicenses: [
        [
          moduleLicense   : 'BSD-3-Clause',
          moduleLicenseUrl: "https://spdx.org/licenses/BSD-3-Clause.html"
        ]
      ]
    ],
    [
      moduleName    : 'net.sf:dbdeploy',
      moduleVersion : '2.11.1',
      moduleUrls    : [
        "https://code.google.com/archive/p/dbdeploy/"
      ],
      moduleLicenses: [
        [
          moduleLicense   : 'LGPL-3.0-only',
          moduleLicenseUrl: "https://spdx.org/licenses/LGPL-3.0-only.html"
        ]
      ]
    ],
    [
      moduleName    : 'dom4j:dom4j',
      moduleVersion : '1.6.1',
      moduleUrls    : [
        "https://dom4j.github.io/"
      ],
      moduleLicenses: [
        [
          moduleLicense   : 'dom4j BSD license',
          moduleLicenseUrl: "https://github.com/dom4j/dom4j/blob/dom4j_1_6_1/LICENSE.txt"
        ]
      ]
    ],
    [
      moduleName    : 'com.jezhumble:javasysmon',
      moduleVersion : '0.3.6',
      moduleUrls    : [
        "https://github.com/gocd/javasysmon"
      ],
      moduleLicenses: [
        [
          moduleLicense   : 'BSD-2-Clause-FreeBSD',
          moduleLicenseUrl: "https://spdx.org/licenses/BSD-2-Clause-FreeBSD.html"
        ]
      ]
    ],
    [
      moduleName    : 'com.bazaarvoice.jolt:jolt-core',
      moduleVersion : project.versions.jolt,
      moduleUrls    : [
        "https://github.com/bazaarvoice/jolt"
      ],
      moduleLicenses: [
        [
          moduleLicense   : 'Apache-2.0',
          moduleLicenseUrl: "https://spdx.org/licenses/Apache-2.0.html"
        ]
      ]
    ],
    [
      moduleName    : 'com.bazaarvoice.jolt:json-utils',
      moduleVersion : project.versions.jolt,
      moduleUrls    : [
        "https://github.com/bazaarvoice/jolt"
      ],
      moduleLicenses: [
        [
          moduleLicense   : 'Apache-2.0',
          moduleLicenseUrl: "https://spdx.org/licenses/Apache-2.0.html"
        ]
      ]
    ],
    [
      moduleName    : 'com.microsoft:tfs-sdk',
      moduleVersion : '14.118.0',
      moduleUrls    : [
        "https://github.com/Microsoft/team-explorer-everywhere"
      ],
      moduleLicenses: [
        [
          moduleLicense   : 'MIT',
          moduleLicenseUrl: "https://spdx.org/licenses/MIT.html"
        ]
      ]
    ],
    [
      moduleName    : 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api',
      moduleVersion : '1.0.1.Final',
      moduleUrls    : [
        "http://hibernate.org"
      ],
      moduleLicenses: [
        [
          moduleLicense   : 'Eclipse Distribution License - v1.0',
          moduleLicenseUrl: "http://www.eclipse.org/org/documents/edl-v10.php"
        ]
      ]
    ],
    [
      moduleName    : 'jaxen:jaxen',
      moduleVersion : '1.1.6',
      moduleUrls    : [
        "http://jaxen.codehaus.org/"
      ],
      moduleLicenses: [
        [
          moduleLicense   : 'BSD-3-Clause',
          moduleLicenseUrl: "https://spdx.org/licenses/BSD-3-Clause.html"
        ]
      ]
    ]
  ]

  def goCDJarsWithoutLicenses = ['agent-launcher.jar',
                                 'agent.jar',
                                 'go-plugin-activator.jar',
                                 'tfs-impl-14.jar',
                                 'gocd-json-config-plugin.jar',
                                 'gocd-yaml-config-plugin.jar',
                                 'gocd-filebased-authentication-plugin.jar',
                                 'gocd-ldap-authentication-plugin.jar',
                                 'gocd-yum-repository-poller-plugin.jar']

  def getAllJarDependencies = {
    // get a list of all dependencies from each gradle module
    def allDependenciesInReport = rootProject.subprojects.inject(new LinkedHashSet<Map<String, Object>>(), { result, eachProject ->
      def file = eachProject.file("${eachProject.licenseReport.outputDir}/index.json")
      if (file.exists()) {
        Map<String, Object> json = new JsonSlurper().parse(file)
        if (json.dependencies != null) {
          result.addAll(json.dependencies)
        }
      }
      result
    })

    // remove items that we know to have missing license data
    allDependenciesInReport.removeIf { eachDependency ->
      !!missingLicenseData.find { dependencyWithMissingLicenseData ->
        eachDependency.moduleName == dependencyWithMissingLicenseData.moduleName && eachDependency.moduleVersion == dependencyWithMissingLicenseData.moduleVersion
      }
    }

    // then add the missing license data
    allDependenciesInReport.addAll(missingLicenseData)

    allDependenciesInReport
  }

  def getLicenseDataFor = { Set<String> allJars, allDependenciesInReport ->
    allJars.inject([:], { Map<String, Map<String, Object>> result, String eachPackagedJar ->
      Map<String, Object> module = allDependenciesInReport.find { Map<String, Object> eachDependencyInReport ->
        def (groupId, artifactId) = eachDependencyInReport.moduleName.split(':')
        def version = eachDependencyInReport.moduleVersion
        eachPackagedJar == "${artifactId}-${version}.jar"
      }

      if (module == null) {
        throw new GradleException("Could not find license details for packaged jar ${eachPackagedJar}")
      }

      result[module.moduleName] = module
      result
    })
  }

  doFirst {
    LinkedHashSet<Map<String, Object>> allDependenciesInReport = getAllJarDependencies()

    List<VerifyJarTask> verifyJarTasks = rootProject.allprojects.collect { eachProject ->
      eachProject.tasks.withType(VerifyJarTask)
    }.flatten()

    // list of all jars that we package
    Set<String> allJars = verifyJarTasks.collect { VerifyJarTask eachTask ->
      eachTask.expectedJars.values().flatten()
    }.flatten().collect { name -> name.toString() }.sort().unique()

    // remove unwanted stuff, mostly nested zip files and jars with GoCD package version
    allJars.removeIf { name -> name.endsWith(".zip") || name.endsWith("-${project.version}.jar") || name.contains("-${project.version}-") }
    allJars.removeAll(goCDJarsWithoutLicenses)

    // get the licenses corresponding to the jars we actually package.
    Map<String, Map<String, Object>> licensesForPackagedJarDependencies = getLicenseDataFor(allJars, allDependenciesInReport)

    project.delete(licenseReportAggregateOutputDir)
    project.mkdir(licenseReportAggregateOutputDir)
    new LicenseReport(project, licenseReportAggregateOutputDir, licensesForPackagedJarDependencies, compileAssetsWebpackProd.ext.licenseReportFile).generate()
  }
}

apply from: 'rails.gradle'
apply from: 'jasmine.gradle'
apply from: 'helpers.gradle'
apply from: 'lint.gradle'

generateLicenseReport.dependsOn(compileAssetsWebpackProd)

task verifyJar {
  dependsOn verifyWar
}

artifacts {
  warConfig war
  jarConfig jar
}
