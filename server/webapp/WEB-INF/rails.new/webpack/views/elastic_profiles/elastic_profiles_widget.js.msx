/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m                       = require('mithril');
const f                       = require('helpers/form_helper');
const ElasticProfileWidget    = require('views/elastic_profiles/elastic_profile_widget');
const ElasticProfileModalBody = require('views/elastic_profiles/elastic_profile_modal_body');
const Stream                  = require('mithril/stream');
const _                       = require('lodash');
const Modal                   = require('views/shared/new_modal');
const ComponentMixins         = require('helpers/mithril_component_mixins');
const ElasticProfiles         = require('models/elastic_profiles/elastic_profiles');

require('jquery-textcomplete');

const showErrors = (modal, ctrl, newProfile) => {
  return function (errorMessageOrProfileWithErrors) {
    if (_.isString(errorMessageOrProfileWithErrors)) {
      modal.destroy();
      ctrl.message({type: 'alert', message: errorMessageOrProfileWithErrors});
    } else {
      ctrl.clearMessage();
      newProfile(errorMessageOrProfileWithErrors);
    }
  };
};

function showSuccess(modal, ctrl, message) {
  return function () {
    modal.destroy();
    ctrl.reloadPage();
    ctrl.message({
      type: 'success',
      message
    });
  };
}

const ElasticProfilesWidget = {
  oninit(vnode) {
    const ctrl = vnode.state;
    ComponentMixins.ManagesCollection.call(this, {as: 'Profile'});
    ComponentMixins.HasViewModel.call(this);

    this.profiles = Stream(new ElasticProfiles());
    this.message  = Stream({type: undefined, message: undefined});

    this.clearMessage = function () {
      this.message({});
    };

    this.reloadPage = function () {
      ElasticProfiles.all().then((profiles) => {
        ctrl.profiles(profiles);
      }, (message) => {
        ctrl.message({type: 'alert', message});
      }).always(m.redraw);
    };

    this.reloadPage();

    this.createModal = function (options) {
      const newProfile   = options.newProfile;
      const pluginInfo   = options.pluginInfo;
      const modalTitle   = options.modalTitle;
      const errorMessage = options.errorMessage;
      const callback     = options.callback || _.noop;

      const modal = new Modal({
        size:    'large',
        title:   modalTitle,
        body:    () => (<ElasticProfileModalBody profile={newProfile}
                                                 pluginInfos={vnode.attrs.pluginInfos}
                                                 pluginInfo={pluginInfo}
                                                 errorMessage={errorMessage}/>),
        onclose: () => modal.destroy(),
        buttons: [
          {
            text:    "Save",
            class:   'save primary',
            onclick: callback
          }
        ]
      });
      return modal;
    };

    this.edit = function (profile) {
      const newProfile   = Stream();
      const pluginInfo   = Stream(vnode.attrs.pluginInfos().findById(profile.pluginId()));
      const errorMessage = Stream();
      ctrl.clearMessage();

      const modal = this.createModal({
        newProfile,
        pluginInfo,
        modalTitle: `Add a new profile`,
        errorMessage,
        callback:   () => {
          newProfile().update().then(showSuccess(modal, ctrl, `The profile ${newProfile().id()} was updated successfully.`), showErrors(modal, ctrl, newProfile)).always(m.redraw);
        }
      });

      const onFulfilled = function (profileFromAjax) {
        newProfile(profileFromAjax);
        errorMessage(null);
      };

      modal.render();
      ElasticProfiles.Profile.get(profile.id()).then(onFulfilled, errorMessage).always(m.redraw);
    };

    this.add = function () {
      const newProfile    = Stream(new ElasticProfiles.Profile({}));
      const newPluginInfo = Stream(null);
      const errorMessage  = Stream();

      const modal = this.createModal({
        newProfile,
        pluginInfo: newPluginInfo,
        modalTitle: `Add a new profile`,
        errorMessage,
        callback:   () => {
          newProfile().create().then(showSuccess(modal, ctrl, `The profile ${newProfile().id()} was created successfully.`), showErrors(modal, ctrl, newProfile)).always(m.redraw);
        }
      });
      modal.render();
    };

    this.clone = (profile) => {
      const newProfile   = Stream();
      const pluginInfo   = Stream(vnode.attrs.pluginInfos().findById(profile.pluginId()));
      const errorMessage = Stream();
      ctrl.clearMessage();

      const modal = this.createModal({
        newProfile,
        pluginInfo,
        modalTitle: `Clone profile ${profile.id()}`,
        errorMessage,
        callback:   () => {
          newProfile().create().then(showSuccess(modal, ctrl, `The profile ${newProfile().id()} was cloned successfully.`), showErrors(modal, ctrl, newProfile)).always(m.redraw);
        }
      });

      modal.render();

      const onFulfilled = function (profileFromAjax) {
        newProfile(profileFromAjax);
        newProfile().id('');
        newProfile().etag(null);
        newProfile().errors().add('id', "Provide id to your clone.");
        errorMessage(null);
      };

      ElasticProfiles.Profile.get(profile.id()).then(onFulfilled, errorMessage).always(m.redraw);
    };

    const deleteInProgress = Stream(false);

    const performDelete = function (modal, profile) {
      const onSuccess = function (message) {
        modal.destroy();
        ctrl.deleteVm(profile.id());
        ctrl.reloadPage();
        ctrl.message({type: 'success', message});
        deleteInProgress(false);
      };

      const onFailure = function (message) {
        modal.destroy();
        ctrl.message({type: 'alert', message});
        deleteInProgress(false);
      };

      deleteInProgress(true);
      m.redraw();
      profile.delete().then(onSuccess, onFailure).always(m.redraw);
    };

    this.deleteConfirm = function (profile) {
      const modal = new Modal({
        title:    'Are you sure?',
        body:     () => (<div>Are you sure you want to delete the profile <strong>{profile.id()}</strong>?</div>),
        oncancel: () => modal.destroy(),
        buttons:  () => [
          {
            text:  'Delete',
            class: deleteInProgress() ? 'delete-profile in-progress' : 'delete-profile',
            onclick() {
              performDelete(modal, profile);
            }
          }
        ]
      });
      modal.render();
    };
  },

  view:  (vnode) => {

    let errorMessage;
    if (vnode.state.message().message) {
      errorMessage = (
        <f.row>
          <f.callout type={vnode.state.message().type}>
            {vnode.state.message().message}

            <button class="close-button" aria-label="Dismiss alert" type="button"
                    onclick={vnode.state.clearMessage.bind(vnode.state)}>
              <span aria-hidden="true">&times;</span>
            </button>
          </f.callout>
        </f.row>
      );
    }

    const noElasticAgentPluginInstalled = (!vnode.attrs.pluginInfos || vnode.attrs.pluginInfos().countPluginInfo() === 0);

    let noElasticAgentPluginMessage;
    if (noElasticAgentPluginInstalled) {
      noElasticAgentPluginMessage = (
        <f.row>
          <f.callout type="info">
            No elastic agent plugin installed.
          </f.callout>
        </f.row>
      );
    }

    const addElasticProfileButton = (
      <f.button onclick={vnode.state.add.bind(vnode.state)} class="add-profile"
                disabled={noElasticAgentPluginInstalled}>
        Add
      </f.button>
    );

    return (
      <div>
        <div class="header-panel">
          <header class="page-header">
            <f.row>
              <f.column size={6}>
                <h1>Elastic Agent Profiles</h1>
              </f.column>

              <f.column size={6}>
                {addElasticProfileButton}
              </f.column>
            </f.row>
          </header>
        </div>


        <div class="elastic-profiles">
          {noElasticAgentPluginMessage}
          {errorMessage}
          <f.row>

            {_.map(vnode.state.profiles().groupByProfileProperty('pluginId'), (profiles, pluginId) => {
              const pluginInfo = vnode.attrs.pluginInfos().findById(pluginId);
              let statusReportButton, pluginNameLabel, pluginIcon;

              if (pluginInfo) {
                pluginIcon      = (<span class="plugin-icon"><img src={pluginInfo.imageUrl()}/></span>);
                pluginNameLabel = (<label className="medium-4 column plugin-name">{pluginInfo.about().name()}</label>);

                if (pluginInfo.capabilities() && pluginInfo.capabilities().supportsStatusReport()) {
                  statusReportButton = (
                    <f.link class="button plugin-status end" href={`status_reports/${pluginId}`}>Status Report</f.link>);
                }
              } else {
                pluginNameLabel = (
                  <label className="medium-4 column plugin-not-installed">Plugin is not installed</label>);
                pluginIcon      = (<span class="plugin-icon warning"></span>);
              }

              return (<div class="elastic-profile-plugin-group">

                <div class="elastic-profile-plugin-group-header row">
                  {pluginIcon}
                  {pluginNameLabel}
                  <label className="medium-4 column plugin-id end">Plugin ID: {pluginId}</label>
                  {statusReportButton}
                </div>

                <div class="elastic-profile-plugin-group-content">
                  {_.map(profiles, (profile) => {

                    return (
                      <ElasticProfileWidget
                        profile={profile}
                        pluginInfo={pluginInfo}
                        key={profile.id()}
                        vm={vnode.state.vmState(profile.id())}
                        onEdit={vnode.state.edit.bind(vnode.state, profile)}
                        onDelete={vnode.state.deleteConfirm.bind(vnode.state, profile)}
                        onClone={vnode.state.clone.bind(vnode.state, profile, pluginInfo)}/>
                    );
                  })}
                </div>
              </div>);
            })}
          </f.row>
        </div>
      </div>
    );
  }
};

module.exports = ElasticProfilesWidget;
