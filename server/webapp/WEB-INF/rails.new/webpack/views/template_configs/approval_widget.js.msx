/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m      = require('mithril');
const Stream = require('mithril/stream');
const $      = require('jquery');
const f      = require('helpers/form_helper');

const ComponentMixins = require('helpers/mithril_component_mixins');

const Users = require('models/shared/users');
const Roles = require('models/shared/roles');
require('jquery-textcomplete');

const autoComplete = function (values, model, attrName) {
  return function (elem, isInitialized, context) {
    if (!isInitialized) {
      const $inputElem = $($(elem).find(`input[data-prop-name='${  attrName  }']`));

      context.onunload = function () {
        $inputElem.textcomplete('destroy');
      };

      $inputElem.textcomplete([
        {
          words: values, //the list of auto-completes
          match: /(^|,)\s*([^,]+)$/,
          index: 2, // use the second match in the regex to extract the search term
          search (term, callback) {
            term = term.toLowerCase();
            callback($.map(this.words, (word) => {
              return word.toLowerCase().indexOf(term) === 0 ? word : null;
            }));
          },
          replace (word) {
            return `$1 ${  word  }, `;
          }
        }
      ]);

      $inputElem.on('textComplete:select', () => {
        model[attrName]($inputElem.val());
      });
    }
  };
};

const ApprovalWidget = {
  oninit (vnode) {
    this.args = vnode.attrs;
    ComponentMixins.HasViewModel.call(this);
  },

  view (vnode) {
    return (
      <f.accordion accordionTitles={[(<span>Permissions</span>)]}
                   accordionKeys={['templatePermissions']}
                   selectedIndex={vnode.state.vmState('templatePermissionsSelected', Stream(0))}
                   class='accordion'>
        <div>
          <f.row>
            <f.input config={autoComplete(Users.list, vnode.attrs.authorization().admins(), 'users')}
                     attrName='users'
                     model={vnode.attrs.authorization().admins()}/>
            <f.input config={autoComplete(Roles.list, vnode.attrs.authorization().admins(), 'roles')}
                     attrName='roles'
                     model={vnode.attrs.authorization().admins()} end/>

          </f.row>
        </div>
      </f.accordion>
    );
  }
};

module.exports = ApprovalWidget;
