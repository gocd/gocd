/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'jquery', 'string-plus', 'lodash',
  'helpers/form_helper', 'helpers/pipeline_configs/tooltips', 'helpers/mithril_component_mixins',
  'models/pipeline_configs/pipeline', 'models/pipeline_configs/tasks', 'views/pipeline_configs/parameters_config_widget',
  'views/pipeline_configs/tracking_tool_widget', 'views/pipeline_configs/environment_variables_config_widget'
], function (m, $, s, _,
             f, tt, ComponentMixins,
             Pipeline, Tasks, ParametersConfigWidget, TrackingToolWidget, EnvironmentVariablesConfigWidget) {

  var PipelineSettingsWidget = {
    controller: function(args) {
      this.args      = args;
      ComponentMixins.HasViewModel.call(this);
    },

    view: function(ctrl, args) {
      var pipeline = args.pipeline();
      return(
        <f.accordion accordionTitles={[(<span>Pipeline Settings</span>)]}
                     accordionKeys={['pipeline-settings']}
                     selectedIndex={ctrl.vmState('pipelineSettingsSelected', m.prop(-1))}
                     class='pipeline-settings'>
          <div>
            <f.row>
              <f.inputWithLabel model={pipeline}
                                attrName='labelTemplate'
                                validate={true}
                                isRequired={true}
                                tooltip={{
                                  content: <tt.pipeline.labelTemplate callback={pipeline.labelTemplate}/>,
                                  direction: 'bottom',
                                  size: 'large'
                                }}/>
              <f.checkBox model={pipeline}
                          attrName='enablePipelineLocking'
                          class="large-4 end"
                          addPadding={true}
                          tooltip={{
                            content: tt.pipeline.enablePipelineLocking,
                            direction: 'bottom',
                            class: 'tooltip-spacing'
                          }}/>

            </f.row>
            <f.row>
              <f.inputWithLabel model={pipeline.timer()}
                                attrName='spec'
                                label='Cron timer specification'
                                validate={false}
                                tooltip={{
                                  content: <tt.pipeline.timer.spec callback={pipeline.timer().spec}/>,
                                  direction: 'bottom',
                                  size: 'large'
                                }}/>

              <f.checkBox model={pipeline.timer()}
                          class="end"
                          addPadding={true}
                          attrName='onlyOnChanges'
                          label='Run only on new material'
                          disabled={s.isBlank(pipeline.timer().spec())}
                          tooltip={{
                            content: tt.pipeline.timer.onlyOnChanges,
                            direction: 'bottom',
                            class: 'tooltip-spacing'
                          }}/>

            </f.row>
           <f.row>
            <TrackingToolWidget trackingTool={pipeline.trackingTool}
                                vm={ctrl.vmState('trackingToolConfig')}
                                key={_.result(pipeline.trackingTool(), 'uuid', 'tracking-tool-none')}/>
            <ParametersConfigWidget parameters={pipeline.parameters}
                                    key={pipeline.parameters().uuid()}
                                    vm={ctrl.vmState('parametersConfig')}/>
            <EnvironmentVariablesConfigWidget title='Pipeline Environment Variables'
                                              variables={pipeline.environmentVariables}
                                              key={pipeline.environmentVariables().uuid()}
                                              vm={ctrl.vmState('environmentVariablesConfig')}/>
             </f.row>
          </div>
        </f.accordion>
      );
    }
  };
  return PipelineSettingsWidget;
});
