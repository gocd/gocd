/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'jquery', 'string-plus', 'lodash', 'helpers/form_helper', 'helpers/pipeline_configs/tooltips', 'helpers/mithril_component_mixins',
  'models/pipeline_configs/pipeline', 'models/pipeline_configs/tasks', 'views/pipeline_configs/pipeline_settings_widget',
  'views/pipeline_configs/materials_config_widget', 'views/pipeline_configs/pipeline_flow_widget', 'views/pipeline_configs/errors_widget', 'views/shared/modal'], function (m, $, s, _, f, tt, ComponentMixins, Pipeline, Tasks, PipelineSettingsWidget, MaterialsConfigWidget, PipelineFlowWidget, ErrorsWidget, Modal) {

  var ToggleViewWarning = {
    view: function (ctrl, args) {
      return (
        <div class='modal-content'>
          <p> 'Proceed' will discard any unsaved data.</p>
          <div class='actions'>
            <a class='toggle-old-view' href="javascript:void(0)"
               onclick={args.parentView.close.bind(args.parentView)}>Cancel</a>
            <a class='toggle-old-view' href={['/go/admin/pipelines/', args.pipeline().name(), '/general'].join('')}>Proceed</a>
          </div>
        </div>
      );
    }
  };

  var PipelineConfigWidget = function (url, callback) {
    return {
      controller: function () {
        var ctrl              = this;
        var self              = this;
        self.pipeline         = m.prop();
        self.currentSelection = m.prop();
        self.etag             = m.prop();
        self.url              = url;
        self.vm               = new Pipeline.vm();
        ComponentMixins.HasViewModel.call(this);

        self.modal    = new Modal({
          subView: { component: ToggleViewWarning, args: {pipeline: self.pipeline}},
          title: 'Unsaved Changes'
        });

        window.pipelineConfigWidget = m.prop(this);

        self.setPipelineAndPreserveSelection = function (newPipeline) {
          var oldPipeline = self.pipeline();
          var newSelection;

          if (oldPipeline) {
            newSelection = newPipeline.stages().findStage(function (stage) {
              return stage.name() === ctrl.currentSelection().name();
            });
          }

          newSelection = newSelection || newPipeline.stages().firstStage();

          self.pipeline(newPipeline);
          self.currentSelection(newSelection);
        };

        var extractEtag = function (xhr) {
          if (xhr.status === 200) {
            self.etag = m.prop(xhr.getResponseHeader('ETag'));
          }
          return xhr.responseText;
        };

        Pipeline.find(url, extractEtag).then(function (data) {
          self.setPipelineAndPreserveSelection(Pipeline.fromJSON(data));
          if (callback) {
            callback(ctrl);
          }
        });

        self.onSavePipeline = function () {
          self.vm.clearErrors();

          if(!self.pipeline().isValid()) {
            self.vm.markClientSideErrors();
            return;
          }

          self.vm.updating();

          self.pipeline().update(self.etag(), extractEtag).then(function (data) {
            ctrl.setPipelineAndPreserveSelection(Pipeline.fromJSON(data));
            self.vm.saveSuccess();
          }, function (data) {
            self.vm.saveFailed(data);
            if (data.data) {
              ctrl.setPipelineAndPreserveSelection(Pipeline.fromJSON(data.data));
            }
          });
        };
      },

      view: function (ctrl) {
        var pipeline = ctrl.pipeline();
        var errors = ctrl.vm.hasErrors() ? (<ErrorsWidget errors={ctrl.vm.errors()}/>) : undefined;

        var header = function () {
          return (
            <f.row class="heading">
              <f.column size={10} largeSize={10}>
                <h1>
                  Pipeline configuation for pipeline
                  {' '}
                  {pipeline.name()}
                </h1>
                <a class='toggle-old-view' href="javascript:void(0)"
                   onclick={ctrl.modal.open.bind(ctrl.modal)}>Normal Edit</a>
              </f.column>
              <f.column size={1}>
                <f.button onclick={ctrl.onSavePipeline.bind(ctrl)}
                          class={'save-pipeline ' + ctrl.vm.saveState()}>
                  <span class={'save-state ' + ctrl.vm.saveState()}/>
                  Save
                </f.button>
              </f.column>
            </f.row>
          );
        };

        var pipelineFlowWidget = function () {
          if(!s.isBlank(ctrl.pipeline().template())) {
            return (
              <f.info>{['Pipeline :', "'", ctrl.pipeline().name(), "'", 'uses template :', "'", ctrl.pipeline().template(), "'",
                '. Template editing is not yet supported. '].join(' ')} Click <f.link href={["/go/admin/templates/",  ctrl.pipeline().template(), "/general"].join('')}>here</f.link> to edit template.</f.info>
            );
          }

          return (
            <PipelineFlowWidget pipeline={ctrl.pipeline}
                                currentSelection={ctrl.currentSelection}
                                vm={ctrl.vmState('pipelineFlowConfig')}/>
          );
        };

        return (
          <form class='pipeline'>
            {header()}
            <f.row class='pipeline-body'>
              {errors}
              <f.column end={true} size={12}>
                <PipelineSettingsWidget pipeline={ctrl.pipeline}
                                        vm={ctrl.vmState('pipelineSettingsConfig')}/>
                <MaterialsConfigWidget materials={pipeline.materials}
                                       key={pipeline.materials().uuid}
                                       pipelineName={pipeline.name}
                                       vm={ctrl.vmState('materialsConfig')}/>
                {pipelineFlowWidget()}
              </f.column>
            </f.row>
            {ctrl.modal.view()}
          </form>
        );
      }
    };
  };

  return PipelineConfigWidget;
});
