/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

description = 'GoCD Base'

dependencies {
  compile group: 'commons-io', name: 'commons-io', version: '2.5'
  compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
  compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
  compile(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2') {
    exclude(module: 'commons-codec')
    exclude(module: 'commons-logging')
  }
  compile group: 'joda-time', name: 'joda-time', version: '2.3'
  compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
  compile group: 'log4j', name: 'log4j', version: '1.2.17'
  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'com.googlecode', name: 'junit-ext', version: '1.0'
  testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
  testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.5'
}

def generatedResourcesOutput = file("resources-generated")
def generatedResourcesInput = file('resource-templates')

sourceSets {
  main {
    resources {
      output.dir generatedResourcesOutput, builtBy: 'generateResources'
      srcDirs += generatedResourcesOutput
    }
  }
}

clean {
  delete(generatedResourcesOutput)
}

task generateResources {
  inputs.dir(generatedResourcesInput)
  outputs.dir(generatedResourcesOutput)

  def props = [
    'goVersion': rootProject.goVersion,
    'distVersion': rootProject.distVersion,
    'fullVersion': rootProject.fullVersion,
    'gitRevision': rootProject.gitRevision,
    'copyrightYear': rootProject.copyrightYear,
  ]

  inputs.properties(props)

  doFirst {
    project.delete(generatedResourcesOutput)
    generatedResourcesOutput.mkdirs()

    project.copy {
      into generatedResourcesOutput
      from(generatedResourcesInput) {
        expand(props)
      }
    }
  }
}

task prepare {
  dependsOn generateResources
}
