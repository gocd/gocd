/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m               = require('mithril');
const Stream          = require('mithril/stream');
const ComponentMixins = require('helpers/mithril_component_mixins');

class PluginCollapsibleList {

  oninit(vnode) {
    ComponentMixins.HasViewModel.call(this);
    this.vmStateKey = `show-${vnode.attrs.headerValue}`;
    this.vmState(this.vmStateKey, Stream(false));
  }

  toggleHide() {
    this.vmState(this.vmStateKey)(!this.vmState(this.vmStateKey)());
  }

  showState() {
    return this.vmState(this.vmStateKey)() ? 'show' : 'hide';
  }

  view(vnode) {
    const headerKey   = vnode.attrs.headerKey;
    const headerValue = vnode.attrs.headerValue;
    const properties  = vnode.attrs.properties;
    const actionButtons = vnode.attrs.actionButtons;
    return (
      <div class={`c-collapse ${(this.showState() === 'hide') ? 'collapsed' : 'expanded'}`}>
        <div class={`c-collapse_header ${(this.showState() === 'hide') ? 'collapsed' : 'expanded'}`} onclick={this.toggleHide.bind(this)}>
          <div class="c-collapse_header_details">
            <dl class="key-value-pair key-value-pair-header plugin-id">
              <dt class="key">{headerKey} </dt>
              <dd class="value">{headerValue}</dd>
            </dl>
          </div>
            {actionButtons}
        </div>

        <div class={`c-collapse_body plugin-config-read-only ${this.showState()}`}>
          <ul class="key-value-pair">
            {properties.mapConfigurations((configuration) => {
              return [
                  <li>
                <label class="key">{configuration.key()}</label>
                <span class="value">
                  <pre>{configuration.displayValue()}</pre>
                </span>
                  </li>
              ];
            })}
          </ul>
        </div>

      </div>
    );
  }
}

module.exports = PluginCollapsibleList;
