/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'jquery', 'helpers/form_helper', 'views/shared/modal', 'helpers/mithril_component_mixins',
  'models/elastic_profiles/elastic_profiles',
  'models/pipeline_configs/plugin_infos',
  'jquery.textcomplete'
], function (m, _, $, f, Modal, ComponentMixins, ElasticProfiles, PluginInfos) {

  var autoComplete = function (model, attrName) {
    return function (elem, isInitialized) {
      if (!isInitialized) {
        var $inputElem = $($(elem).find("input[data-prop-name='" + attrName + "']"));
        var values     = _.map(PluginInfos(), function (pi) {
          return pi.id();
        });

        $inputElem.textcomplete([
          {
            words:   values, //the list of auto-completes
            match:   /(^|,)\s*([^,]+)$/,
            index:   2, // use the second match in the regex to extract the search term
            search:  function (term, callback) {
              term = term.toLowerCase();
              callback($.map(this.words, function (word) {
                return word.toLowerCase().indexOf(term) >= 0 ? word : null;
              }));
            },
            replace: function (word) {
              return '$1' + word;
            }
          }
        ], {
          zIndex: '10000'
        });

        $inputElem.on('textComplete:select', function () {
          model[attrName]($inputElem.val());
        });
      }
    };
  };

  var ElasticProfileEditModal = {
    view: function (ctrl, args) {
      var profile = args.profile;

      if (!profile) {
        return <f.modalSpinner/>;
      }

      return (
        <div>
          <f.row>
            <f.inputWithLabel model={profile}
                              attrName="id"
                              isRequired="true"
                              label="Id"/>
            <f.inputWithLabel model={profile}
                              attrName="pluginId"
                              isRequired="true"
                              label="Plugin Id"
                              config={autoComplete(profile, 'pluginId')}
                              end="true"/>
          </f.row>

          <h4>Properties</h4>

          {profile.properties().mapConfigurations(function (property) {
            return (
              <f.row>
                <f.input model={property} attrName="key" size="3"/>
                <f.input model={property} attrName="value" end="true" size="3"/>
              </f.row>
            );
          })}

          <f.row>
            <f.button onclick={args.onUpdate}>Update</f.button>
          </f.row>
        </div>
      );
    }
  };

  var ElasticProfileWidget = {
    view: function (ctrl, args) {
      var profile = args.profile;
      return (
        <f.row>
          <f.column size="1">
            <div class="plugin-icon"></div>
          </f.column>
          <f.column size="11" end="true">
            <f.row>
              <div><span>ID: </span>{profile.id()}</div>
              <div><span>Plugin ID: </span>{profile.pluginId()}</div>
              <div>
                <f.link onclick={args.onEdit}>Edit</f.link>
                <f.link onclick={args.onDelete}>Delete</f.link>
              </div>
            </f.row>
          </f.column>
        </f.row>
      );
    }
  };

  var ElasticProfilesWidget = {
    controller: function () {
      var ctrl = this;
      ComponentMixins.ManagesCollection.call(this, {as: 'Profile'});

      this.editModal = new Modal({
        subView: {
          component: ElasticProfileEditModal,
          args:      {}
        },
        size:    'large'
      });

      this.reloadPage = function () {
        this.profiles   = ElasticProfiles.all();
        window.profiles = this.profiles;
      };

      this.reloadPage();

      this.edit = function (profile) {
        this.editModal.title = 'Editing Profile ' + profile.id();
        this.editModal.open();
        ElasticProfiles.Profile.get(profile.id()).then(function (newProfile) {
          ctrl.editModal.subView.args.profile  = newProfile;
          ctrl.editModal.subView.args.onUpdate = function () {
            newProfile.update()
              .then(ctrl.editModal.close.bind(ctrl.editModal))
              .then(ctrl.reloadPage.bind(ctrl));
          };
        });
      };

      this.delete = function (profile) {
        profile.delete().then(this.reloadPage.bind(this));
      };

      this.add = function () {
        this.editModal.title                = 'Create new profile';
        ctrl.editModal.subView.args.profile = new ElasticProfiles.Profile({id: null, pluginId: null});
        this.editModal.open();
      };

    },

    view: function (ctrl) {
      return (
        <div>
          <div class="header-panel">
            <header class="page-header">
              <f.row>
                <f.column size={5}>
                  <h1>Elastic Agent Profiles</h1>
                </f.column>

                <f.column size={7}>
                  <ul class="button-group header-panel-button-group">
                    <li>
                      <f.button onclick={ctrl.add.bind(ctrl)}>
                        Add
                      </f.button>
                    </li>
                  </ul>
                </f.column>
              </f.row>
            </header>
          </div>

          <div class="profiles">
            {ctrl.profiles().mapProfiles(function (profile) {
              return (
                <ElasticProfileWidget
                  profile={profile}
                  onEdit={ctrl.edit.bind(ctrl, profile)}
                  onDelete={ctrl.delete.bind(ctrl, profile)}
                />
              );
            })}
          </div>

          {ctrl.editModal.view()}
        </div>
      );
    }
  };

  return ElasticProfilesWidget;
});