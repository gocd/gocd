/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'string-plus', 'jquery', 'angular', 'helpers/form_helper', 'views/shared/modal', 'helpers/mithril_component_mixins',
  'models/elastic_profiles/elastic_profiles',
  'models/pipeline_configs/plugin_infos',
  'jquery.textcomplete'
], function (m, _, s, $, angular, f, Modal, ComponentMixins, ElasticProfiles, PluginInfos) {

  var autoComplete = function (model, attrName, selectCb) {
    return function (elem, isInitialized) {
      if (!isInitialized) {
        var $inputElem = $($(elem).find("input[data-prop-name='" + attrName + "']"));
        var values     = _.map(PluginInfos(), function (pi) {
          return pi.id();
        });

        $inputElem.textcomplete([
          {
            words:   values, //the list of auto-completes
            match:   /(^|,)\s*([^,]+)$/,
            index:   2, // use the second match in the regex to extract the search term
            search:  function (term, callback) {
              term = term.toLowerCase();
              callback($.map(this.words, function (word) {
                return word.toLowerCase().indexOf(term) >= 0 ? word : null;
              }));
            },
            replace: function (word) {
              return '$1' + word;
            }
          }
        ], {
          zIndex: '10000'
        });

        $inputElem.on('textComplete:select', function () {
          model[attrName]($inputElem.val());
          if (selectCb) {
            selectCb($inputElem.val());
          }
        });
      }
    };
  };

  var template = function (template) {
    return $('<div></div>').html(template.replace(/GOINPUTNAME\[([^\]]*)\]/g, function (match, name) {
      return "GOINPUTNAME['" + name + "']";
    })).html();
  };

  var ElasticProfileNewModal = {
    controller: function (args) {
      var ctrl = this;

      this.pluginInfo       = null;
      this.ngControllerName = null;

      this.pluginTemplate = function () {
        if (this.pluginInfo) {
          return m.trust(template(this.pluginInfo.viewTemplate()));
        }
      };

      this.selectPluginId = function () {
        this.redrawProperties();
      };

      ctrl.uuid             = null;
      ctrl.appName          = null;
      ctrl.defaultConfig    = null;
      ctrl.ngControllerName = null;

      var resetAngularController = function (newPluginInfo) {
        ctrl.pluginInfo       = newPluginInfo;
        ctrl.uuid             = s.uuid();
        ctrl.appName          = 'app-' + ctrl.uuid;
        ctrl.defaultConfig    = ctrl.pluginInfo.configurations();
        ctrl.ngControllerName = 'controller-' + ctrl.uuid;
      };


      this.redrawProperties = function () {
        var pluginInfo = _.find(PluginInfos(), function (pi) {
          return pi.id() === args.profile.pluginId();
        });

        if (!pluginInfo) {
          return;
        }

        PluginInfos.PluginInfo.byId(pluginInfo.id()).then(resetAngularController);
      };
    },

    view: function (ctrl, args) {
      var profile = args.profile;
      var config  = function (elem, isInitialized) {
        if (!isInitialized) {

          ctrl.ngController = angular.module(ctrl.appName, []).controller(ctrl.ngControllerName, ['$scope', '$http', function ($scope) {
            $scope.addError = function (field) {
              $scope.GOINPUTNAME[field.key]                              = {$error: {}};
              $scope.GOINPUTNAME[field.key].$error[_.toLower(field.key)] = field.errors.join();
            };

            $scope.clearErrors = function () {
              $scope.GOINPUTNAME               = {};
              $scope.pluggableTaskGenericError = null;
            };

            $scope.clearErrors();

            _.map(ctrl.defaultConfig, function (config) {
              $scope[config.key] = args.profile.properties().valueFor(config.key);

              $scope.$watch(config.key, function (newValue) {
                args.profile.properties().setConfiguration(config.key, newValue);
              });
            });
          }]);

          angular.bootstrap(elem, [ctrl.appName]);
        }
      };

      var pluginView = function () {
        if (!ctrl.pluginInfo) {
          return;
        }

        return (
          <div>
            <h4>Properties</h4>
            <div class='plugin-view' ng-controller={ctrl.ngControllerName}
                 config={config}>
              {ctrl.pluginTemplate()}
            </div>
            <f.row>
              <f.button onclick={args.onSave}>Save</f.button>
            </f.row>
          </div>
        );
      };

      return (
        <div>
          <f.row>
            <f.inputWithLabel model={profile}
                              attrName="id"
                              isRequired="true"
                              label="Id"/>
            <f.inputWithLabel model={profile}
                              attrName="pluginId"
                              isRequired="true"
                              label="Plugin Id"
                              onChange={ctrl.redrawProperties.bind(ctrl)}
                              config={autoComplete(profile, 'pluginId', ctrl.selectPluginId.bind(ctrl))}
                              end="true"/>
          </f.row>

          {pluginView()}
        </div>
      );
    }
  };

  var ElasticProfileEditModal = {
    controller: function (args) {
      this.pluginTemplate = function () {
        return m.trust(template(args.pluginInfo.viewTemplate()));
      };

      var ctrl              = this;
      this.uuid             = s.uuid();
      this.ngControllerName = 'controller-' + this.uuid;
      this.appName          = 'app-' + this.uuid;
      this.profile          = args.profile;

      this.defaultConfig = args.pluginInfo.configurations();

      this.ngController = angular.module(this.appName, []).controller(this.ngControllerName, ['$scope', '$http', function ($scope) {
        $scope.addError = function (field) {
          $scope.GOINPUTNAME[field.key]                              = {$error: {}};
          $scope.GOINPUTNAME[field.key].$error[_.toLower(field.key)] = field.errors.join();
        };

        $scope.clearErrors = function () {
          $scope.GOINPUTNAME               = {};
          $scope.pluggableTaskGenericError = null;
        };

        $scope.clearErrors();

        _.map(ctrl.defaultConfig, function (config) {
          $scope[config.key] = args.profile.properties().valueFor(config.key);

          $scope.$watch(config.key, function (newValue) {
            args.profile.properties().setConfiguration(config.key, newValue);
          });
        });

      }]);
    },

    view: function (ctrl, args) {
      var profile = args.profile;

      if (!profile) {
        return <f.modalSpinner/>;
      }

      var config = function (elem, isInitialized) {
        if (!isInitialized) {
          var pluginTaskTemplateElement = $('#elastic-profile-' + ctrl.uuid);
          angular.bootstrap(pluginTaskTemplateElement.get(0), [ctrl.appName]);
        }
      };


      return (
        <div>
          <f.row>
            <f.inputWithLabel model={profile}
                              attrName="id"
                              isRequired="true"
                              label="Id"/>
            <f.inputWithLabel model={profile}
                              attrName="pluginId"
                              isRequired="true"
                              label="Plugin Id"
                              config={autoComplete(profile, 'pluginId')}
                              end="true"/>
          </f.row>

          <h4>Properties</h4>

          <div class='plugin-view' id={'elastic-profile-' + ctrl.uuid} ng-controller={ctrl.ngControllerName}
               config={config}>
            {ctrl.pluginTemplate()}
          </div>

          <f.row>
            <f.button onclick={args.onUpdate}>Update</f.button>
          </f.row>
        </div>
      );
    }
  };

  var ElasticProfileWidget = {
    view: function (ctrl, args) {
      var profile = args.profile;
      return (
        <f.row>
          <f.column size="1">
            <div class="plugin-icon"></div>
          </f.column>
          <f.column size="11" end="true">
            <f.row>
              <div><span>ID: </span>{profile.id()}</div>
              <div><span>Plugin ID: </span>{profile.pluginId()}</div>
              <div>
                <f.link class='edit-profile' onclick={args.onEdit}/>
                <f.link class='delete-profile' onclick={args.onDelete}/>
              </div>
            </f.row>
          </f.column>
        </f.row>
      );
    }
  };

  var ElasticProfilesWidget = {
    controller: function () {
      var ctrl = this;
      ComponentMixins.ManagesCollection.call(this, {as: 'Profile'});

      this.modal = null;

      this.reloadPage = function () {
        this.profiles   = ElasticProfiles.all();
        window.profiles = this.profiles;
      };

      this.reloadPage();

      this.edit = function (profile) {
        m.sync([
          ElasticProfiles.Profile.get(profile.id()), PluginInfos.PluginInfo.byId(profile.pluginId())
        ]).then(function (args) {
          var newProfile = args[0];
          var pluginInfo = args[1];

          ctrl.modal = new Modal({
            subView: {
              component: ElasticProfileEditModal,
              args:      {
                profile:    newProfile,
                pluginInfo: pluginInfo,
                onUpdate:   function () {
                  newProfile.update().then(function () {
                    ctrl.modal.destroy();
                    ctrl.modal = null;
                    ctrl.reloadPage();
                  });
                }
              }
            },
            size:    'large',
            title:   'Editing Profile ' + profile.id()
          });

          m.redraw(true);

          ctrl.modal.open();
        });
      };

      this.delete = function (profile) {
        profile.delete().then(this.reloadPage.bind(this));
      };

      this.add = function () {
        var newProfile = new ElasticProfiles.Profile({});

        ctrl.modal = new Modal({
          subView: {
            component: ElasticProfileNewModal,
            args:      {
              profile: newProfile,
              onSave:  function () {
                newProfile.update().then(function () {
                  ctrl.modal.destroy();
                  ctrl.modal = null;
                  ctrl.reloadPage();
                });
              }
            }
          },
          size:    'large',
          title:   'Add a new profile'
        });

        m.redraw(true);

        ctrl.modal.onClose(function () {
          //ctrl.modal.destroy();
          //ctrl.modal = null;
        });

        ctrl.modal.open();
      };

    },

    view: function (ctrl) {
      return (
        <div>
          <div class="header-panel">
            <header class="page-header">
              <f.row>
                <f.column size={5}>
                  <h1>Elastic Agent Profiles</h1>
                </f.column>

                <f.column size={7}>
                  <ul class="button-group header-panel-button-group">
                    <li>
                      <f.button onclick={ctrl.add.bind(ctrl)}>
                        Add
                      </f.button>
                    </li>
                  </ul>
                </f.column>
              </f.row>
            </header>
          </div>

          <div class="profiles">
            {ctrl.profiles().mapProfiles(function (profile) {
              return (
                <ElasticProfileWidget
                  profile={profile}
                  onEdit={ctrl.edit.bind(ctrl, profile)}
                  onDelete={ctrl.delete.bind(ctrl, profile)}
                />
              );
            })}
          </div>

          {ctrl.modal ? ctrl.modal.view() : undefined}
        </div>
      );
    }
  };

  return ElasticProfilesWidget;
});