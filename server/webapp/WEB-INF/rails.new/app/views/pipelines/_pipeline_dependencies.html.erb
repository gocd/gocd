<%
   scope[:pipeline] = @graph.pipeline()
   scope[:current_pipeline_name] = scope[:pipeline].getName()
%>
    <div class="upstream">
        <h4 class="secondary">Upstream</h4>
        <% scope[:pipeline].getCurrentRevisions().each_with_index do |revision_in_pipeline_dep, index_upstream|
            scope[:material] = revision_in_pipeline_dep.getMaterial()
            scope[:rev] = revision_in_pipeline_dep.getRevision()
        %>
            <div id="upstream_<%=index_upstream%>" class="pipeline">
                <div class="content">
                    <div class="material <%= material_type(scope[:material]) %>" title="<%= scope[:material].getDisplayName() %> - <%= revision_for(revision_in_pipeline_dep) %>"><%= scope[:material].getTypeForDisplay() %></div>
                    <% if dependency?(scope[:material]) -%>
                        <% scope[:upstream_pipeline_name] = scope[:rev].getPipelineName() -%>
                        <% scope[:upstream_pipeline_label] = scope[:rev].getPipelineLabel() -%>
                        <div><%= link_to(scope[:upstream_pipeline_name], url_for_pipeline(scope[:upstream_pipeline_name]), :class => 'wrapped_word') %></div>
                        <div class="wrapped_word"><%= revision_in_pipeline_dep.getLatestShortRevision() %></div>
                        <%= link_to scope[:upstream_pipeline_label], url_for_dmr(scope[:rev]), :class => 'wrapped_word' -%>
                    <% else -%>
                        <div class="wrapped_word"><%= scope[:material].getDisplayName() %> - <%= revision_in_pipeline_dep.getLatestShortRevision() %></div>
                    <% end -%>
                </div>
            </div>
        <% end %>
    </div>
    <div class="current">
        <h4 class="secondary">Current</h4>

        <div id="current_<%= scope[:current_pipeline_name] %>" class="pipeline">
            <div class="name">
                <%= link_to(scope[:current_pipeline_name], url_for_pipeline(scope[:current_pipeline_name]), :class => 'wrapped_word') %>
            </div>
            <div class="content">
                Instance: <%= link_to truncate(scope[:pipeline].getLabel(), :length => 25), "#", {:title => scope[:pipeline].getLabel(), :class => 'wrapped_word'} %>
                <%= render :partial=> 'shared/bare_stage_bar.html', :locals => {:scope => {:pipeline => scope[:pipeline], :total_width => 10.0 }} %>
            </div>
        </div>
    </div>
    <div class="downstream">
        <h4 class="secondary">Downstream</h4>
        <%           
           @graph.groupedDependencies().each do |entry_in_dep|
           scope[:downstream_pipeline_name], scope[:models] = entry_in_dep
        %>
            <div id="downstream_<%=scope[:downstream_pipeline_name]%>" class="pipeline">

                <div class="title">
                    <span class="name"><%= link_to(scope[:downstream_pipeline_name], url_for_pipeline(scope[:downstream_pipeline_name]), :class => 'wrapped_word') %></span>
                </div>
                <div class="content">
                    <% scope[:models].each do |model_in_dep| %>
                        <div class="pipeline_instance">
                            <% if model_in_dep.getCounter() > 0 %>
                                <%= link_to truncate(model_in_dep.getLabel(), :length => 25), url_for_pipeline_instance(model_in_dep), {:title => model_in_dep.getLabel(), :class => 'wrapped_word'} %>
                            <% end %>
                            <%= render :partial=> 'shared/bare_stage_bar.html', :locals => { :scope => {:pipeline => model_in_dep, :total_width => 10.0 }} %>
                        </div>
                    <%end%>
                    <% scope[:model] = scope[:models].first()
                        scope[:has_upstream_material], scope[:pegged_pipeline], scope[:pegged_revision] = @graph.hasUpStreamRevisionFor(scope[:model]), nil, nil
                        if scope[:has_upstream_material]
                            scope[:pegged_pipeline] = @graph.dependencyMaterialFor(scope[:model]).getPipelineUniqueFingerprint()
                            scope[:pegged_revision] = @graph.dependencyRevisionFor(scope[:model])
                        end
                    %>
                    <%= render :partial=>"shared/trigger_pipeline_with_options.html", :locals => {:scope => {:pipeline=>scope[:model], :label=>"Trigger with options",
                                                                                                  :can_trigger => (scope[:has_upstream_material] && scope[:model].getCanRun()),
                                                                                                  :has_upstream_material => scope[:has_upstream_material],
                                                                                                  :pegged_pipeline => scope[:pegged_pipeline],
                                                                                                  :pegged_revision => scope[:pegged_revision] }} %>
                </div>
            </div>
        <%
           end
        %>
    </div>
    <script type="text/javascript">
        Util.on_load(initPipelineVisualization);
        $j(window).resize(function(){
            initPipelineVisualization();
        });
    </script>