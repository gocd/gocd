/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m                       = require('mithril');
const f                       = require('helpers/form_helper');
const Stream                  = require('mithril/stream');
const _                       = require('lodash');
const $                       = require('jquery');
const ComponentMixins         = require('helpers/mithril_component_mixins');
const PipelineWidget          = require('views/dashboard/pipeline_widget');
const PersonalizedViewsWidget = require('views/dashboard/personalized_views_widget');

const DashboardWidget = {
  oninit(vnode) {
    const self               = vnode.state;
    self.personalizeWidgetOpen = Stream(false);

    self.searchTextUpdated = (e) => {
      const filterText = e.target.value;
      vnode.attrs.dashboard.searchText(filterText);
    };

    ComponentMixins.HasViewModel.call(self);

    const attachClickEventToBody = () => {
      const body = $("body");
      body.click(() => {
        vnode.attrs.vm.dropdown.hide();
        vnode.attrs.personalizeVM.hideDropdown();
        m.redraw();
      });
    };

    attachClickEventToBody();
  },

  view(vnode) {
    const args   = vnode.attrs;
    const personalizeVM = args.personalizeVM;

    const noPermissionText = "You do not have permission to edit the pipeline group.";

    if (args.showSpinner()) {
      return (<span class="page-spinner"/>);
    }

    let messageView;

    if (!_.isEmpty(vnode.attrs.dashboard.message())) {
      const content = (<h3 class="dashboard-message text-center">{vnode.attrs.dashboard.message().content}</h3>);
      messageView   = (vnode.attrs.dashboard.message().type === 'info')
        ? (<f.info>{content} </f.info>)
        : (<f.alert>{content} </f.alert>);
    }

    return (
      <div class="pipeline_wrapper">
        <div class="page_header" key="page-header">
          <h1 class="page_title">Pipelines</h1>
          <div class="filter">
            <input type="text"
                   class="pipeline-search"
                   value={vnode.attrs.dashboard.searchText()}
                   oninput={vnode.state.searchTextUpdated.bind(vnode.state)}
                   placeholder="Search for pipeline"/>
          </div>
        </div>
        <div class="dashboard" key="dashboard-content">
          <PersonalizedViewsWidget vm={personalizeVM} />
          {messageView}
          {_.map(vnode.attrs.dashboard.getPipelineGroups(), (pipelineGroup) => {
            let name, settingsIcon;

            if (pipelineGroup.canAdminister) {
              name         = (<a href={pipelineGroup.path}>{pipelineGroup.name}</a>);
              settingsIcon = (<a href={pipelineGroup.editPath} class="edit_config pipeline-group_edit-config"/>);
            } else {
              name         = pipelineGroup.name;
              settingsIcon = (<f.link class="edit_config pipeline-group_edit-config disabled"
                                                 tooltipText={noPermissionText}/>);
            }

            return (
              <div class="pipeline-group" key={pipelineGroup.name}>
                <h2 class="pipeline-group_title">
                  <span>pipeline group</span>
                  <strong>{name}</strong>
                  {settingsIcon}
                </h2>
                <ul class="pipeline-group_items">
                  {_.map(pipelineGroup.pipelines, (pipelineName) => {
                    return (
                      <PipelineWidget pipeline={vnode.attrs.dashboard.findPipeline(pipelineName)}
                                      doCancelPolling={vnode.attrs.doCancelPolling}
                                      doRefreshImmediately={vnode.attrs.doRefreshImmediately}
                                      isQuickEditPageEnabled={vnode.attrs.isQuickEditPageEnabled}
                                      pluginsSupportingAnalytics={vnode.attrs.pluginsSupportingAnalytics}
                                      shouldShowAnalyticsIcon={vnode.attrs.shouldShowAnalyticsIcon}
                                      key={pipelineName}
                                      vm={args.vm}/>
                    );
                  })}
                </ul>
              </div>
            );
          })}
        </div>
      </div>
    );
  }
};

module.exports = DashboardWidget;
