<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2022 ThoughtWorks, Inc.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">
    <suppress>
        <notes><![CDATA[
   Suppressing false positive as GoCD internal mysql support JAR is not the same thing as MySQL.
   ]]></notes>
        <cpe>cpe:/a:mysql:mysql</cpe>
    </suppress>
    <suppress>
        <notes><![CDATA[
   Suppressing false positive caused by OWASP Dependency Check thinking the shaded/packaged dirgra library is the same
   as the JRuby version. These are versioned independently and not the same thing.
   ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.jruby/dirgra@.*$</packageUrl>
        <cpe>cpe:/a:jruby:jruby</cpe>
    </suppress>
    <suppress>
        <notes><![CDATA[
   Suppressing false positive caused by OWASP Dependency Check thinking shaded RubyGems are the same thing as
   as JRuby or their related libraries independently. These are not the same things.
   ]]></notes>
        <packageUrl regex="true">^pkg:maven/rubygems/jruby\-(openssl|readline)@.*$</packageUrl>
        <cpe>cpe:/a:jruby:jruby</cpe>
        <cpe>cpe:/a:openssl:openssl</cpe>
    </suppress>
    <suppress>
        <notes><![CDATA[
   Suppressing false positive caused by OWASP Dependency Check thinking jruby-rack is the same thing as
   as JRuby independently. These are not the same things.
   ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.jruby\.rack/jruby\-rack@.*$</packageUrl>
        <vulnerabilityName>CVE-2010-1330</vulnerabilityName>
        <vulnerabilityName>CVE-2011-4838</vulnerabilityName>
    </suppress>

    <suppress>
        <notes><![CDATA[
   This one only affects Spring Framework 5.0.5 when combined with Spring Security so is a false positive.
   https://nvd.nist.gov/vuln/detail/CVE-2018-1258 OWASP Dependency Check code does not currently understand "A and B"
   CPE constraints and how to apply them. See https://github.com/jeremylong/DependencyCheck/issues/1827
   ]]></notes>
        <gav regex="true">^org\.springframework\.security:spring-security-.*:4\..*$</gav>
        <cve>CVE-2018-1258</cve>
    </suppress>

    <suppress>
        <notes><![CDATA[
   https://nvd.nist.gov/vuln/detail/CVE-2020-13697 as described only affects usage of "Nanolets" which is packaged
   separately and which is not used within GoCD.
   ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.nanohttpd/nanohttpd@.*$</packageUrl>
        <cve>CVE-2020-13697</cve>
    </suppress>

    <suppress>
        <notes><![CDATA[
   Hibernate Commons Annotations is a different project, versioned separately to the core "Hibernate ORM", so CVEs against this are misleading
   and false positives. We will still seem them reported against other Hibernate dependencies, however.
   ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.hibernate/hibernate\-commons\-annotations@.*$</packageUrl>
        <cpe>cpe:/a:hibernate:hibernate_orm</cpe>
    </suppress>

    <suppress>
        <notes><![CDATA[
   It is not possible to upload/modify Velocity Templates within GoCD, so GoCD does not appear to be vulnerable to this
   vulnerability. See https://nvd.nist.gov/vuln/detail/CVE-2020-13936
   ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.apache\.velocity/velocity@.*$</packageUrl>
        <cve>CVE-2020-13936</cve>
    </suppress>

    <suppress>
        <notes><![CDATA[
   The Velocity Tools/Velocity Tools View are versioned separately to the Engine, so it is not correct to have Engine CVEs
   reported against the tools jar.
   ]]></notes>
        <packageUrl regex="true">^pkg:maven/velocity\-tools/velocity\-tools\-view@.*$</packageUrl>
        <cpe>cpe:/a:apache:velocity_engine</cpe>
    </suppress>

    <suppress>
        <notes><![CDATA[
   The vulnerability in Velocity Tools View is in the VelocityViewServlet per https://nvd.nist.gov/vuln/detail/CVE-2020-13959
   which we do not use - we use Spring's WebMVC VelocityView implementation, so we are not vulnerable to this issue.
   ]]></notes>
        <packageUrl regex="true">^pkg:maven/velocity\-tools/velocity\-tools\-view@.*$</packageUrl>
        <cve>CVE-2020-13959</cve>
    </suppress>

    <suppress>
        <notes><![CDATA[
   From review of https://tanzu.vmware.com/security/cve-2021-22112 and the code of GoCD, GoCD does not appear to be
   subject to this defect, since it does not alter the security context in the manner required to elevate privileges
   in a small portion of the application and potentially be subject to this defect.
   ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.springframework\.security/spring\-security\-(core|web|config)@.*$</packageUrl>
        <cve>CVE-2021-22112</cve>
    </suppress>

    <suppress>
        <notes><![CDATA[
   From review of https://nvd.nist.gov/vuln/detail/CVE-2019-14900 and the fix on Hibernate 5.3 at https://github.com/hibernate/hibernate-orm/pull/3440/files
   GoCD is not subject to this defect, since at time of writing we do not use literals on the Criteria API (it's also
   unclear whether older Hibernate versions are subject to the same defect)
   ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.hibernate/hibernate\-(core|ehcache)@.*$</packageUrl>
        <cve>CVE-2019-14900</cve>
    </suppress>

    <suppress>
        <notes><![CDATA[
   From review of https://nvd.nist.gov/vuln/detail/CVE-2020-25638 and https://bugzilla.redhat.com/show_bug.cgi?id=1881353
   GoCD is not subject to this defect, because `hibernate.use_sql_comments` is left as the default (false) value.
   ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.hibernate/hibernate\-(core|ehcache)@.*$</packageUrl>
        <cve>CVE-2020-25638</cve>
    </suppress>

    <suppress>
        <notes><![CDATA[
   From review of https://nvd.nist.gov/vuln/detail/CVE-2021-23463 GoCD is not subject to this XXE vulnerability, because
   neither GoCD, Hibernate or MyBatis use JdbcResultSet.getSQLXML(). It seems this is unlikely to get a backport to
   H2 1.4.x which is a breaking change. See https://github.com/h2database/h2database/issues/3195 and
   https://github.com/h2database/h2database/issues/3271
   ]]></notes>
        <packageUrl regex="true">^pkg:maven/com\.h2database/h2@.*$</packageUrl>
        <cve>CVE-2021-23463</cve>
    </suppress>

    <suppress>
        <notes><![CDATA[
   The CVEs as documented at https://github.com/h2database/h2database/security/advisories/GHSA-h376-j262-vhq6 and
   https://github.com/advisories/GHSA-45hx-wfhj-473x only affect the H2 console (not enabled on GoCD),
   context-dependent use of JdbcUtils.getConnection (not possible from remote properties in GoCD)
   so GoCD does not appear to be vulnerable to these problems even when running with H2 DB.
   ]]></notes>
        <packageUrl regex="true">^pkg:maven/com\.h2database/h2@1\.4\.200$</packageUrl>
        <cve>CVE-2021-42392</cve>
        <cve>CVE-2022-23221</cve>
        <vulnerabilityName>CWE-94: Improper Control of Generation of Code ('Code Injection')</vulnerabilityName>
    </suppress>

    <suppress until="2022-05-01Z">
        <notes><![CDATA[
   Time-limited suppression for https://nvd.nist.gov/vuln/detail/CVE-2021-29425. GoCD is not vulnerable as the use of
   FilenameUtils.normalize does not "use the result to construct a path value" as required by the defect. Neither does
   any of GoCD's libraries use this functionality.

   This was fixed in Commons IO 2.7 and GoCD originally upgraded to 2.11.0, however unfortunately all later versions
   have some regressions as noted in https://github.com/gocd/gocd/issues/9397 https://github.com/gocd/gocd/pull/9517
   and https://github.com/gocd/gocd/issues/9927

   While the last issue appears to be fixed by Commons IO 2.12 (not yet released) there are other regressions in 2.12
   master due to ongoing work and it feels the path to stability might take some time.
   ]]></notes>
        <packageUrl regex="true">^pkg:maven/commons\-io/commons\-io@.*$</packageUrl>
        <cve>CVE-2021-29425</cve>
    </suppress>

</suppressions>
