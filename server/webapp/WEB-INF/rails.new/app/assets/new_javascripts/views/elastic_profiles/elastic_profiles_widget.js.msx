/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'string-plus', 'jquery', 'angular', 'helpers/form_helper', 'views/shared/new_modal', 'views/shared/angular_plugin', 'helpers/mithril_component_mixins',
  'models/elastic_profiles/elastic_profiles',
  'models/pipeline_configs/plugin_infos',
  'jquery.textcomplete'
], function (m, _, s, $, angular, f, Modal, AngularPlugin, ComponentMixins, ElasticProfiles, PluginInfos) {

  var autoComplete = function (model, attrName, selectCb) {
    return function (elem, isInitialized) {
      if (isInitialized) {
        return;
      }

      var $inputElem = $($(elem).find("input[data-prop-name='" + attrName + "']"));
      var values     = _.map(PluginInfos(), function (pi) {
        return pi.id();
      });

      $inputElem.textcomplete([
        {
          words:   values, //the list of auto-completes
          match:   /(^|,)\s*([^,]+)$/,
          index:   2, // use the second match in the regex to extract the search term
          search:  function (term, callback) {
            term = term.toLowerCase();
            callback($.map(this.words, function (word) {
              return word.toLowerCase().indexOf(term) >= 0 ? word : null;
            }));
          },
          replace: function (word) {
            return '$1' + word;
          }
        }
      ], {
        zIndex: '10000'
      });

      $inputElem.on('textComplete:select', function () {
        model[attrName]($inputElem.val());
        if (selectCb) {
          selectCb($inputElem.val());
        }
      });
    };
  };

  var ElasticProfileModalBody = {
    controller: function (args) {
      var setPluginInfo = function (pluginInfo) {
        args.pluginInfo(pluginInfo);
        args.saveDisabled(!pluginInfo);
      };

      setPluginInfo(args.pluginInfo());

      this.selectPluginId = function () {
        var pluginInfo = _.find(PluginInfos(), function (pi) {
          return pi.id() === args.profile().pluginId();
        });

        setPluginInfo(pluginInfo);

        if (!pluginInfo) {
          return;
        }

        PluginInfos.PluginInfo.byId(pluginInfo.id()).then(function (pluginInfo) {
          setPluginInfo(pluginInfo);
          args.profile(new ElasticProfiles.Profile({id: args.profile().id(), pluginId: pluginInfo.id()}));
        });
      };
    },

    view: function (ctrl, args) {
      var profile = args.profile();
      return (
        <div>
          <f.row key="static-stuff">
            <f.inputWithLabel model={profile}
                              attrName="id"
                              validate="true"
                              isRequired="true"
                              label="Id"
                              key="profile-id"/>
            <f.inputWithLabel model={profile}
                              key="plugin-id-autocomplete"
                              validate="true"
                              attrName="pluginId"
                              isRequired="true"
                              label="Plugin Id"
                              onChange={ctrl.selectPluginId.bind(ctrl)}
                              config={autoComplete(profile, 'pluginId', ctrl.selectPluginId.bind(ctrl))}
                              end="true"/>
          </f.row>

          <AngularPlugin pluginInfo={args.pluginInfo}
                         configuration={profile.properties()}
                         key={args.pluginInfo() ? args.pluginInfo().id() : 'no-plugin'}/>
        </div>
      );
    }
  };

  var ElasticProfileWidget = {
    view: function (ctrl, args) {
      var profile = args.profile;
      return (
        <f.row>
          <f.column size="1">
            <div class="plugin-icon"></div>
          </f.column>
          <f.column size="11" end="true">
            <f.row>
              <div><span>ID: </span>{profile.id()}</div>
              <div><span>Plugin ID: </span>{profile.pluginId()}</div>
              <div>
                <f.link class='edit-profile' onclick={args.onEdit}/>
                <f.link class='delete-profile' onclick={args.onDelete}/>
              </div>
            </f.row>
          </f.column>
        </f.row>
      );
    }
  };

  var ElasticProfilesWidget = {
    controller: function () {
      var ctrl = this;
      ComponentMixins.ManagesCollection.call(this, {as: 'Profile'});

      this.modal = null;

      this.reloadPage = function () {
        this.profiles   = ElasticProfiles.all();
        window.profiles = this.profiles;
      };

      this.reloadPage();

      this.edit = function (profile) {
        m.sync([
          ElasticProfiles.Profile.get(profile.id()), PluginInfos.PluginInfo.byId(profile.pluginId())
        ]).then(function (args) {
          var newProfile   = m.prop(args[0]);
          var pluginInfo   = m.prop(args[1]);
          var saveDisabled = m.prop(false);

          var modal = new Modal({
            size:    'large',
            title:   'Edit profile ' + newProfile().id(),
            body:    (<ElasticProfileModalBody profile={newProfile}
                                               pluginInfo={pluginInfo}
                                               saveDisabled={saveDisabled}/>),
            onclose: function () {
              modal.destroy();
            },
            buttons: [
              {
                text:     'Save',
                onclick:  function () {
                  var onFulfilled = function () {
                    modal.destroy();
                    ctrl.reloadPage();
                  };
                  var onRejected  = function () {
                    debugger;
                  };
                  newProfile().update().then(onFulfilled, onRejected);
                },
                disabled: saveDisabled
              }
            ]
          });
          modal.render();
        });
      };

      this.delete = function (profile) {
        profile.delete().then(this.reloadPage.bind(this));
      };

      this.add = function () {
        var newProfile    = m.prop(new ElasticProfiles.Profile({}));
        var newPluginInfo = m.prop(null);
        var saveDisabled  = m.prop(true);

        var modal = new Modal({
          size:    'large',
          title:   'Add a new profile',
          body:    (<ElasticProfileModalBody profile={newProfile}
                                             pluginInfo={newPluginInfo}
                                             saveDisabled={saveDisabled}/>),
          onclose: function () {
            modal.destroy();
          },
          buttons: [
            {
              text:     'Save',
              onclick:  function () {
                var onFulfilled = function () {
                  modal.destroy();
                  ctrl.reloadPage();
                };
                var onRejected  = function (profileWithErrors) {
                  newProfile(new ElasticProfiles.Profile.fromJSON(profileWithErrors));
                };
                newProfile().create().then(onFulfilled, onRejected);
              },
              disabled: saveDisabled
            }
          ]
        });
        modal.render();
      };

    },

    view: function (ctrl) {
      return (
        <div>
          <div class="header-panel">
            <header class="page-header">
              <f.row>
                <f.column size={5}>
                  <h1>Elastic Agent Profiles</h1>
                </f.column>

                <f.column size={7}>
                  <ul class="button-group header-panel-button-group">
                    <li>
                      <f.button onclick={ctrl.add.bind(ctrl)}>
                        Add
                      </f.button>
                    </li>
                  </ul>
                </f.column>
              </f.row>
            </header>
          </div>

          <div class="profiles">
            {ctrl.profiles().mapProfiles(function (profile) {
              return (
                <ElasticProfileWidget
                  profile={profile}
                  onEdit={ctrl.edit.bind(ctrl, profile)}
                  onDelete={ctrl.delete.bind(ctrl, profile)}
                />
              );
            })}
          </div>
        </div>
      );
    }
  };

  return ElasticProfilesWidget;
});