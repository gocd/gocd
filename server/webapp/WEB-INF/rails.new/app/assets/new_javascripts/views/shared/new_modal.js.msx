/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define(['mithril', 'lodash', 'jquery', 'string-plus', 'helpers/form_helper'], function (m, _, $, s, f) {
  // instead of each modal being a top level component of its own (and causing a redraw of everything else on the page)
  // we manage a single component that's always mounted as soon as the page loads up, creating a new modal will create
  // a sub-component in the top level component.
  // see https://github.com/lhorie/mithril.js/issues/694
  var allModals      = {};
  var defaultOptions = {
    title:   'This is the title',
    body:    (<small>This is the body</small>),
    size:    'tiny',
    buttons: [
      {
        text:     'OK',
        onclick:  _.noop(),
        disabled: _.identity(false)
      },
    ],
    onclose: _.noop()
  };

  var Modal = function (options) {
    var self     = this;
    this.modalId = "modal-" + s.uuid();
    options      = _.assign({}, defaultOptions, options);

    this.modalDialog = {
      controller: function () {
        this.close = function (onclose, destroy, e) {
          if (onclose) {
            onclose(e);
          }

          if (!e.defaultPrevented) {
            destroy();
          }
        };
      },

      view: function (ctrl) {
        return (
          <div class={"reveal-overlay " + options.class} style={{display: 'block'}}>
            <div class={'reveal ' + (options.size ? options.size : '')}
                 style={{display: 'block'}}>

              <h4 class='modal-title'>{options.title}</h4>

              <div class="modal-body">
                {options.body}
              </div>

              <button class="close-button"
                      aria-label="Close modal"
                      type="button"
                      onclick={ctrl.close.bind(ctrl, options.onclose, self.destroy)}>
                <span aria-hidden="true">&times;</span>
              </button>

              <f.row class="modal-buttons">
                <div class="columns medium-12">
                  {_.map(_.isFunction(options.buttons) ? options.buttons() : options.buttons, function (button) {
                    return (

                      <f.button disabled={button.disabled ? button.disabled() : false}
                                onclick={button.onclick}
                                class={button.class}>{button.text}</f.button>
                    );
                  })}
                </div>
              </f.row>
            </div>
          </div>
        );
      }
    };

    this.render = function () {
      allModals[this.modalId] = this;
    };

    this.destroy = function () {
      delete allModals[this.modalId];
    };
  };

  $(function () {
    var $body        = $('body');
    var $modalParent = $('<div class="new-modal-container"/>').appendTo($body);

    // so you can directly access the modals in tests via `$('.modal-parent').data('modal')`
    $modalParent.data('modals', allModals);
    var ModalDialogs = {
      view: function () {
        var sortedModalKeys = _.keysIn(allModals).sort();
        return (
          <div>
            {_.map(sortedModalKeys, function (key) {
              return m.component(allModals[key].modalDialog);
            })}
          </div>
        );
      }
    };
    m.mount($modalParent.get(0), ModalDialogs);
  });

  Modal.destroyAll = function () {
    _.each(_.values(allModals), function (modal) {
      modal.destroy();
    });
  };

  return Modal;
});
