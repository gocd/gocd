/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'string-plus', 'helpers/form_helper', 'views/shared/new_modal', 'helpers/mithril_component_mixins',
  'models/roles/roles',
  'models/pipeline_configs/plugin_infos',
  'views/roles/role_widget',
  'views/roles/role_modal_body',
  'models/auth_configs/auth_configs',
  'jquery.textcomplete'
], function (m, _, s, f, Modal, ComponentMixins, Roles, PluginInfos, RoleWidget, RoleModelBody, AuthConfigs) {

  function showErrors(modal, ctrl, newEntity) {
    return function (errorMessageOrEntityWithErrors) {
      if (_.isString(errorMessageOrEntityWithErrors)) {
        modal.destroy();
        ctrl.message({type: 'alert', message: errorMessageOrEntityWithErrors});
      } else {
        ctrl.clearMessage();
        newEntity(errorMessageOrEntityWithErrors);
      }
    };
  }

  function showSuccess(modal, ctrl, message) {
    return function () {
      modal.destroy();
      ctrl.reloadPage();
      ctrl.message({
        type:    'success',
        message: message
      });
    };
  }

  var RolesWidget = {
    controller: function () {
      var ctrl = this;
      ComponentMixins.ManagesCollection.call(this, {as: 'Role'});
      ComponentMixins.HasViewModel.call(this);

      this.modal = null;
      this.roles = m.prop(new Roles());

      this.message = m.prop({type: undefined, message: undefined});

      this.clearMessage = function () {
        this.message({});
      };

      this.getAuthConfigs = function () {
        var authConfigs = m.prop(new AuthConfigs());
        var onSuccess   = function (data) {
          authConfigs(data);
        };
        var onFailure   = function () {
          ctrl.message({type: 'alert', message: "Failed to get AuthConfig"});
        };
        AuthConfigs.all().then(onSuccess, onFailure);
        return authConfigs;
      };

      this.authConfigs    = this.getAuthConfigs();

      this.findPluginInfoFor = function (role) {
        var authConfig = ctrl.authConfigs().findAuthConfig(function (ac) {
          return ac.id() === role.authConfigId();
        });

        if (!authConfig) {
          return;
        }

        var pluginInfo = _.find(PluginInfos(), function (pi) {
          return pi.id() === authConfig.pluginId();
        });

        return pluginInfo;
      };


      this.reloadPage = function () {
        Roles.all().then(function (roles) {
          ctrl.roles(roles);
        }, function (message) {
          ctrl.message({type: 'alert', message: message});
        });
      };

      this.reloadPage();

      this.edit = function (role) {
        var newRole      = m.prop();
        var pluginInfo   = m.prop(ctrl.findPluginInfoFor(role));
        var saveDisabled = m.prop(false);
        var errorMessage = m.prop();

        ctrl.clearMessage();

        var modal = new Modal({
          size:    'large',
          title:   'Edit role ' + role.name(),
          body:    (<RoleModelBody role={newRole}
                                   pluginInfo={pluginInfo}
                                   newRole={false}
                                   errorMessage={errorMessage}
                                   saveDisabled={saveDisabled}
                                   authConfigs={ctrl.authConfigs}/>),
          onclose: function () {
            modal.destroy();
          },
          buttons: function () {
            if (!newRole()) {
              return [];
            }
            return [
              {
                text:     'Save',
                class:    'save primary',
                onclick:  function () {
                  newRole().update().then(showSuccess(modal, ctrl, 'The role ' + newRole().name() + ' was updated successfully.'), showErrors(modal, ctrl, newRole));
                },
                disabled: saveDisabled
              }
            ];
          }
        });

        var showError = function (args) {
          var messages = _.chain(args).map(function (arg) {
            if (_.isString(arg)) {
              return s.terminateWithPeriod(arg);
            }
          }).compact().uniq().join(' ').value();

          errorMessage(messages);
        };

        var onFulfilled = function (args) {
          newRole(args[0]);
          pluginInfo(args[1]);
          errorMessage(null);
        };

        modal.render();
        m.redraw(true);

        m.sync([Roles.Role.get(role.name()), PluginInfos.PluginInfo.get(pluginInfo().id())]).then(onFulfilled, showError);
      };


      this.add = function () {
        var newRole       = m.prop(new Roles.Role({}));
        var newPluginInfo = m.prop(new PluginInfos.PluginInfo({}));
        var saveDisabled  = m.prop(true);

        var modal = new Modal({
          size:    'large',
          title:   'Add a new role',
          body:    (<RoleModelBody role={newRole}
                                   newRole={true}
                                   pluginInfo={newPluginInfo}
                                   saveDisabled={saveDisabled}
                                   authConfigs={ctrl.authConfigs}/>),
          onclose: function () {
            modal.destroy();
          },
          buttons: [
            {
              text:     'Save',
              class:    'save primary',
              onclick:  function () {
                newRole().create().then(showSuccess(modal, ctrl, 'The role ' + newRole().name() + ' was created successfully.'), showErrors(modal, ctrl, newRole));
              },
              disabled: saveDisabled
            }
          ]
        });
        modal.render();
      };

      var deleteInProgress = m.prop(false);

      var performDelete = function (modal, role) {
        var onSuccess = function (message) {
          modal.destroy();
          ctrl.deleteVm(role.name());
          ctrl.reloadPage();
          ctrl.message({type: 'success', message: message});
          deleteInProgress(false);
        };

        var onFailure = function (message) {
          modal.destroy();
          ctrl.message({type: 'alert', message: message});
          deleteInProgress(false);
        };

        deleteInProgress(true);
        m.redraw(true);
        role.delete().then(onSuccess, onFailure);
      };

      this.deleteConfirm = function (role) {
        var modal = new Modal({
          title:    'Are you sure?',
          body:     (<div>Are you sure you want to delete the role <strong>{role.name()}</strong>?</div>),
          onclose: function () {
            modal.destroy();
          },
          buttons:  function () {
            return [
              {
                text:    'Delete',
                class:   deleteInProgress() ? 'delete-role in-progress' : 'delete-role',
                onclick: function () {
                  performDelete(modal, role);
                }
              }
            ];
          }
        });
        modal.render();
      };
    },

    view: function (ctrl) {
      var message;
      if (ctrl.message().message) {
        message = (
          <f.row>
            <f.callout type={ctrl.message().type}>
              {ctrl.message().message}

              <button class="close-button" aria-label="Dismiss alert" type="button"
                      onclick={ctrl.clearMessage.bind(ctrl)}>
                <span aria-hidden="true">&times;</span>
              </button>
            </f.callout>
          </f.row>
        );
      }

      return (
        <div>
          <div class="header-panel">
            <header class="page-header">
              <f.row>
                <f.column size={6}>
                  <h1>Role Configurations</h1>
                </f.column>

                <f.column size={6}>
                  <f.button onclick={ctrl.add.bind(ctrl)} class="add-role">
                    Add
                  </f.button>
                </f.column>
              </f.row>
            </header>
          </div>


          <div class="roles">
            {message}
            <f.row>

              {ctrl.roles().mapRoles(function (role) {
                var pluginInfo = ctrl.findPluginInfoFor(role);

                return (
                  <RoleWidget
                    role={role}
                    pluginInfo={pluginInfo}
                    key={role.name()}
                    vm={ctrl.vmState(role.name())}
                    onEdit={ctrl.edit.bind(ctrl, role)}
                    onDelete={ctrl.deleteConfirm.bind(ctrl, role)}/>
                );
              })}
            </f.row>
          </div>
        </div>
      );
    }
  };

  return RolesWidget;
});