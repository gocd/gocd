= Net::SFTP

* Docs: http://net-ssh.github.com/net-sftp
* Issues: https://github.com/net-ssh/net-sftp/issues
* Codes: https://github.com/net-ssh/net-sftp
* Email: net-ssh@solutious.com

<em>As of v2.1.0, all gem releases are signed. See INSTALL.</em>


== DESCRIPTION:

Net::SFTP is a pure-Ruby implementation of the SFTP protocol (specifically, versions 1 through 6 of the SFTP protocol). Note that this is the "Secure File Transfer Protocol", typically run over an SSH connection, and has nothing to do with the FTP protocol.

== FEATURES/PROBLEMS:

* Transfer files or even entire directory trees to or from a remote host via SFTP
* Completely supports all six protocol versions
* Asynchronous and synchronous operation
* Read and write files using an IO-like interface

== SYNOPSIS:

In a nutshell:

  require 'net/sftp'

  Net::SFTP.start('host', 'username', :password => 'password') do |sftp|
    # upload a file or directory to the remote host
    sftp.upload!("/path/to/local", "/path/to/remote")

    # download a file or directory from the remote host
    sftp.download!("/path/to/remote", "/path/to/local")

    # grab data off the remote host directly to a buffer
    data = sftp.download!("/path/to/remote")

    # open and write to a pseudo-IO for a remote file
    sftp.file.open("/path/to/remote", "w") do |f|
      f.puts "Hello, world!\n"
    end

    # open and read from a pseudo-IO for a remote file
    sftp.file.open("/path/to/remote", "r") do |f|
      puts f.gets
    end

    # create a directory
    sftp.mkdir! "/path/to/directory"

    # list the entries in a directory
    sftp.dir.foreach("/path/to/directory") do |entry|
      puts entry.longname
    end
  end

For the full documentation, start with Net::SFTP::Session. Also see Net::SFTP::Operations::Upload, Net::SFTP::Operations::Download, Net::SFTP::Operations::FileFactory, Net::SFTP::Operations::File, and Net::SFTP::Operations::Dir.

== REQUIREMENTS:

* Net::SSH 2

If you wish to run the tests, you'll need:

* Echoe (if you want to use the Rakefile)
* Mocha

== INSTALL:

* gem install net-sftp (might need sudo privileges)

However, in order to be sure the code you're installing hasn't been tampered with, it's recommended that you verify the signiture[http://docs.rubygems.org/read/chapter/21]. To do this, you need to add my public key as a trusted certificate (you only need to do this once):

    # Add the public key as a trusted certificate
    # (You only need to do this once)
    $ curl -O https://raw.github.com/net-ssh/net-ssh/master/gem-public_cert.pem
    $ gem cert --add gem-public_cert.pem

Then, when install the gem, do so with high security:

    $ gem install net-sftp -P HighSecurity

If you don't add the public key, you'll see an error like "Couldn't verify data signature". If you're still having trouble let me know and I'll give you a hand.

Or, if you prefer to do it the hard way (sans Rubygems):

* tar xzf net-ssh-*.tgz
* cd net-ssh-*
* ruby setup.rb config
* ruby setup.rb install (might need sudo privileges)

== LICENSE:

(The MIT License)

Copyright (c) 2008 Jamis Buck <jamis@37signals.com>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
