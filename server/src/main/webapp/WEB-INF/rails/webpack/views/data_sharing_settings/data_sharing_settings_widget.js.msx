/*
 * Copyright 2019 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import m from "mithril";
import {f} from "helpers/form_helper";
import Stream from "mithril/stream";
import {HeaderPanel} from "views/shared/header_panel";
import {ToggleConsentWidget} from "views/data_sharing_settings/toggle_consent_widget";
import {DataCollectedByGoCDWidget} from "views/data_sharing_settings/data_collected_by_gocd_widget";
import {ConsentInformationWidget} from "views/data_sharing_settings/data_sharing_information_widget";

export const DataSharingSettingsWidget = {
  oninit(vnode) {
    this.flashMessage     = Stream();
    this.flashMessageType = Stream();

    const clearFlashMessage = function () {
      vnode.state.flashMessage(undefined);
      vnode.state.flashMessageType(undefined);
      m.redraw();
    };

    this.save = function (settings) {
      settings.save()
        .then(() => {
          const msg = `Data Sharing Settings updated Successfully!`;
          vnode.state.flashMessageType('success');
          vnode.state.flashMessage(msg);
        }, (jqXhr) => {
          const msg = jqXhr.responseJSON.message;
          vnode.state.flashMessageType('alert');
          vnode.state.flashMessage(msg);
        })
        .always(() => {
          m.redraw();
          setTimeout(clearFlashMessage, 5000);
        });
    };

    this.reset = function (settings) {
      settings.resetConsent();
    };
  },

  view(vnode) {
    const settings    = vnode.attrs.settings;
    const message     = vnode.state.flashMessage();
    const messageType = vnode.state.flashMessageType();

    let flashMessage;
    if (message) {
      flashMessage = (<div class={`callout radius ${messageType}`}>
        {message}
      </div>);
    }

    return (<div>
      <HeaderPanel title="Help improve GoCD by sharing technical data"/>
      <div class="data-sharing">
        {flashMessage}
        <ConsentInformationWidget/>
        <div class="share-box">
          <ToggleConsentWidget settings={settings}/>
          <DataCollectedByGoCDWidget settings={settings} usageData={vnode.attrs.usageData}/>
        </div>
        <div class="button-wrapper">
          <f.button class="update-consent" onclick={vnode.state.save.bind(this, settings)}>Save</f.button>
          <f.button class="reset-consent" onclick={vnode.state.reset.bind(this, settings)}>Reset</f.button>
        </div>
      </div>
    </div>);
  }
};
