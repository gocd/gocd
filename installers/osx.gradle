import com.thoughtworks.go.build.DownloadFile
import org.apache.commons.codec.digest.DigestUtils

/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

private File destFile(String url) {
  new File(gradle.gradleUserHomeDir, "download-cache/${DigestUtils.md5Hex(url)}/${new File(new URL(url).path).name}")
}

task downloadOSXJre(type: DownloadFile) {
  def srcUrl = System.getenv("OSX_JDK_URL") ?: 'https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u202-b08/OpenJDK8U-jre_x64_mac_hotspot_8u202b08.tar.gz'
  src srcUrl
  dest destFile(srcUrl)
  checksum 'd7be3dfd5cd10323e1272e06d26f0709fbbc4a6f25a3992c2f2eef7022517fba'
}

task agentOSXZip(type: Zip) {
  dependsOn agentGenericZip, downloadOSXJre

  destinationDirectory = file("${project.convention.plugins.get("base").distsDir}/osx")
  archiveBaseName = 'go-agent'
  archiveClassifier = 'osx'

  from(zipTree(agentGenericZip.outputs.files.singleFile))

  // puts the content of the tar under `go-agent-XXX/jre`
  from(tarTree(downloadOSXJre.outputs.files.singleFile)) {
    eachFile { FileCopyDetails fcd ->
      List<String> segments = fcd.relativePath.segments
      segments.add(0, "${archiveBaseName.get()}-${project.goVersion}".toString())
      segments.set(1, "jre")
      fcd.relativePath = new RelativePath(!fcd.isDirectory(), (segments as String[]))
    }
  }
}

task serverOSXZip(type: Zip) {
  dependsOn serverGenericZip, downloadOSXJre

  destinationDirectory = file("${project.convention.plugins.get("base").distsDir}/osx")
  archiveBaseName = 'go-server'
  archiveClassifier = 'osx'

  from(zipTree(serverGenericZip.outputs.files.singleFile))

  // puts the content of the tar under `go-server-XXX/jre`
  from(tarTree(downloadOSXJre.outputs.files.singleFile)) {
    eachFile { FileCopyDetails fcd ->
      List<String> segments = fcd.relativePath.segments
      segments.add(0, "${archiveBaseName.get()}-${project.goVersion}".toString())
      segments.set(1, "jre")
      fcd.relativePath = new RelativePath(!fcd.isDirectory(), (segments as String[]))
    }
  }
}

assemble.dependsOn(":installers:agentOSXZip", ":installers:serverOSXZip")
