/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def agent = [
    dirs       : [
        '/etc/default'           : [ownedByPackage: false],
        '/etc/init.d'            : [ownedByPackage: false],
        '/usr/share/doc/go-agent': [mode: 0755, owner: 'root', group: 'root', ownedByPackage: true],
        '/usr/share/go-agent'    : [mode: 0755, owner: 'root', group: 'root', ownedByPackage: true],
        '/var/lib/go-agent'      : [mode: 0750, owner: 'go', group: 'go', ownedByPackage: true],
        '/var/log/go-agent'      : [mode: 0770, owner: 'go', group: 'go', ownedByPackage: true],
        '/var/run/go-agent'      : [mode: 0770, owner: 'go', group: 'go', ownedByPackage: true]
    ],
    files      : [
        '/etc/default/go-agent'                     : [mode: 0640, owner: 'root', group: 'go', source: file('go-agent/release/go-agent.default').path, confFile: true],
        '/etc/init.d/go-agent'                      : [mode: 0755, owner: 'root', group: 'root', source: file('go-agent/release/go-agent.init').path],
        '/usr/share/doc/go-agent/LICENSE'           : [mode: 0644, owner: 'root', group: 'root', source: rootProject.file('LICENSE').path],
        '/usr/share/go-agent/agent-bootstrapper.jar': [mode: 0644, owner: 'root', group: 'root', source: configurations.agentBootstrapperJar.singleFile.path],
        '/usr/share/go-agent/agent.sh'              : [mode: 0755, owner: 'root', group: 'root', source: file('go-agent/release/agent.sh').path],
        '/usr/share/go-agent/stop-agent.sh'         : [mode: 0755, owner: 'root', group: 'root', source: file('go-agent/release/stop-agent.sh').path],
        '/var/lib/go-agent/log4j.properties'        : [mode: 0644, owner: 'root', group: 'root', source: project(':agent').file('properties/log4j.properties').path, confFile: true],
    ],
    description: '''
      Go Agent Component
      Next generation continuous integration and release management server from ThoughtWorks.
      '''.stripIndent().trim()
]

def server = [
    dirs       : [
        '/etc/default'            : [ownedByPackage: false],
        '/etc/go'                 : [mode: 0770, owner: 'go', group: 'go', ownedByPackage: true],
        '/etc/init.d'             : [ownedByPackage: false],
        '/usr/share/doc/go-server': [mode: 0755, owner: 'root', group: 'root', ownedByPackage: true],
        '/usr/share/go-server'    : [mode: 0755, owner: 'root', group: 'root', ownedByPackage: true],
        '/var/lib/go-server'      : [mode: 0750, owner: 'go', group: 'go', ownedByPackage: true],
        '/var/log/go-server'      : [mode: 0770, owner: 'go', group: 'go', ownedByPackage: true],
        '/var/run/go-server'      : [mode: 0770, owner: 'go', group: 'go', ownedByPackage: true]
    ],
    files      :
        [
            '/etc/default/go-server'             : [mode: 0640, owner: 'root', group: 'go', source: file('go-server/release/go-server.default').path, confFile: true],
            '/etc/go/log4j.properties'           : [mode: 0640, owner: 'root', group: 'go', source: project(':server').file('properties/src/log4j.properties').path, confFile: true],
            '/etc/init.d/go-server'              : [mode: 0755, owner: 'root', group: 'root', source: file('go-server/release/go-server.init').path],
            '/usr/share/doc/go-server/LICENSE'   : [mode: 0644, owner: 'root', group: 'root', source: rootProject.file('LICENSE').path],
            '/usr/share/go-server/go.jar'        : [mode: 0644, owner: 'root', group: 'root', source: configurations.serverJar.singleFile.path],
            '/usr/share/go-server/server.sh'     : [mode: 0755, owner: 'root', group: 'root', source: file('go-server/release/server.sh').path],
            '/usr/share/go-server/stop-server.sh': [mode: 0755, owner: 'root', group: 'root', source: file('go-server/release/stop-server.sh').path]
        ],
    description: '''
      Go Server Component
      Next generation continuous integration and release management server from ThoughtWorks.
      '''.stripIndent().trim()
]

abstract class LinuxPackagingTask extends DefaultTask {
  @Input
  String packageName
  @Input
  String packageDescription
  @Input
  def directories
  @Input
  def files
  @Input
  String version
  @Input
  String distVersion


  @OutputFile
  abstract public File getOutputFile()

  LinuxPackagingTask() {
    outputs.upToDateWhen { false }
  }

  @TaskAction
  public void perform() {
    prepareFileSystem()
    buildPackage()
  }

  protected List fpmOpts() {
    def cmd = []
    cmd += ['fpm']

//  cmd += ['--debug']
//  cmd += ['-e']
//  cmd += ['--debug-workspace']
    cmd += ['--force']
    cmd += ['-s', 'dir']
    cmd += ['-C', buildRoot()]
    cmd += ['--name', packageName]
    cmd += ['--description', packageDescription]
    cmd += ['--version', version]
    cmd += ['--iteration', distVersion]
    cmd += ['--license', 'Apache-2.0']
    cmd += ['--vendor', 'ThoughtWorks, Inc.']
    cmd += ['--category', 'Development/Build Tools']
    cmd += ['--architecture', 'all']
    cmd += ['--maintainer', 'ThoughtWorks, Inc.']
    cmd += ['--url', 'https://go.cd']
    cmd += ['--before-upgrade', project.file('linux-shared/before-upgrade.sh.erb')]
    cmd += ['--before-install', project.file('linux-shared/before-install.sh.erb')]
    cmd += ['--after-install', project.file('linux-shared/after-install.sh.erb')]
    cmd += ['--before-remove', project.file('linux-shared/before-remove.sh.erb')]
    cmd += ['--after-remove', project.file('linux-shared/after-remove.sh.erb')]
    cmd += ['--template-scripts']

    directories.each { dirName, permissions ->
      if (permissions.ownedByPackage) {
        cmd += ['--directories', dirName]
      }
    }

    files.each { fileName, permissions ->
      if (permissions.confFile) {
        cmd += ['--config-files', fileName.replaceAll(/^\//, '')]
      }
    }

    cmd
  }

  def buildRoot() {
    project.file("${project.buildDir}/${packageName}/${packageType()}/BUILD_ROOT")
  }

  final buildPackage() {
    project.exec {
      commandLine fpmOpts()
      workingDir project.convention.plugins.get("base").distsDir

      if (project.logger.isInfoEnabled()) {
        standardOutput = System.out
        errorOutput = System.err
      } else {
        standardOutput = new ByteArrayOutputStream()
        errorOutput = new ByteArrayOutputStream()
      }
    }
  }

  protected void prepareFileSystem() {
    buildRoot().deleteDir()
    buildRoot().mkdirs()
    project.convention.plugins.get("base").distsDir.mkdirs()
    // prepare the filesystem
    directories.each { dirName, permissions ->
      project.file("${buildRoot()}/${dirName}").mkdirs()
    }

    files.each { fileName, permissions ->
      project.copy {
        from permissions.source
        into project.file("${buildRoot()}/${new File(fileName).parentFile}")
        rename new File(permissions.source).name, new File(fileName).name
      }
    }

    File propertiesFile = project.fileTree(buildRoot()) { include("**/*/log4j.properties") }.files.first()

    def text = propertiesFile.getText().
        replaceAll(/go-agent\.log/, '/var/log/go-agent/go-agent.log').
        replaceAll(/go-server\.log/, '/var/log/go-agent/go-server.log').
        replaceAll(/go-shine\.log/, '/var/log/go-agent/go-shine.log')

    propertiesFile.write(text)

  }

}

@ParallelizableTask
class RpmPackagingTask extends LinuxPackagingTask {

  public File getOutputFile() {
    project.file("${project.convention.plugins.get("base").distsDir}/${packageName}-${version}-${distVersion}.noarch.rpm")
  }

  def packageType() {
    'rpm'
  }

  @Override
  protected List fpmOpts() {
    def cmd = super.fpmOpts()
    cmd += ['-t', packageType()]
    cmd += ['--depends', 'which']
    cmd += ['--rpm-defattrfile', '0440']
    cmd += ['--rpm-defattrdir', '0440']

    directories.each { dirName, permissions ->
      if (permissions.ownedByPackage) {
        cmd += ['--rpm-attr', "${Integer.toOctalString(permissions.mode)},${permissions.owner},${permissions.group}:${dirName}"]
      }
    }

    files.each { fileName, permissions ->
      // set ownership and mode on the rpm manifest
      cmd += ['--rpm-attr', "${Integer.toOctalString(permissions.mode)},${permissions.owner},${permissions.group}:${fileName}"]
    }
    cmd
  }

}

@ParallelizableTask
class DebPackagingTask extends LinuxPackagingTask {

  public File getOutputFile() {
    project.file("${project.convention.plugins.get("base").distsDir}/${packageName}_${version}-${distVersion}_all.deb")
  }

  def packageType() {
    'deb'
  }

  @Override
  protected List fpmOpts() {
    def cmd = super.fpmOpts()
    cmd += ['-t', packageType()]
    cmd += ['--depends', 'java7-runtime-headless']
    cmd += ['--deb-no-default-config-files']

    // HACK: for debian packages :(, since manifests cannot contain fine grained ownership
    def tmpDir = project.file("${project.buildDir}/tmp")
    tmpDir.mkdirs()

    File dirPermissons = File.createTempFile("dirPermissions-", ".json", tmpDir)
    File filePermissions = File.createTempFile("filePermissions-", ".json", tmpDir)

    cmd += ['--template-value', "dir_permissions=${dirPermissons}"]
    cmd += ['--template-value', "file_permissions=${filePermissions}"]

    dirPermissons.write(groovy.json.JsonOutput.toJson(directories))
    filePermissions.write(groovy.json.JsonOutput.toJson(files))

    cmd
  }
}

task agentPackageDeb(dependsOn: [':agent-bootstrapper:fatJar'], type: DebPackagingTask) {
  packageName 'go-agent'
  version rootProject.version
  distVersion rootProject.distVersion
  packageDescription agent.description
  files agent.files
  directories agent.dirs
}

task agentPackageRpm(dependsOn: [':agent-bootstrapper:fatJar'], type: RpmPackagingTask) {
  packageName 'go-agent'
  version rootProject.version
  distVersion rootProject.distVersion
  packageDescription agent.description
  files agent.files
  directories agent.dirs
}

task serverPackageDeb(dependsOn: [':server-launcher:fatJar'], type: DebPackagingTask) {
  packageName 'go-server'
  version rootProject.version
  distVersion rootProject.distVersion
  packageDescription server.description
  files server.files
  directories server.dirs
}

task serverPackageRpm(dependsOn: [':server-launcher:fatJar'], type: RpmPackagingTask) {
  packageName 'go-server'
  version rootProject.version
  distVersion rootProject.distVersion
  packageDescription server.description
  files server.files
  directories server.dirs
}

assemble.dependsOn(":installers:agentPackageRpm", ":installers:serverPackageRpm", ":installers:agentPackageDeb", ":installers:serverPackageDeb")
