/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let m = require('mithril');
let f = require('helpers/form_helper');

const _              = require('lodash');
const tt             = require('helpers/pipeline_configs/tooltips');
const Tasks          = require('models/pipeline_configs/tasks');
const TaskBasicViews = require('views/pipeline_configs/task_basic_views_widget');
const PluginInfos    = require('models/shared/plugin_infos');

const CancelTaskWidget = {
  oninit (vnode) {
    const self              = this;
    self.task               = vnode.attrs.task;
    const DEFAULT_TASK_TYPE = 'exec';


    this.selected = function (val) {
      if (val === undefined) {
        return self.task.onCancelTask.type();
      }
      self.addCancelTask(val);
    };

    this.addCancelTask = function (type) {
      if (Tasks.isBuiltInTaskType(type)) {
        self.task.onCancelTask = Tasks.createByType({type});
      } else {
        self.task.onCancelTask = Tasks.createByType({type, pluginInfo: PluginInfos.findById(type)});
      }
    };

    this.removeCancelTask = function () {
      self.task.onCancelTask = null;
    };

    this.checked = function (val) {
      if (val === undefined) {
        return self.task.hasOnCancelTask();
      }
      val ? self.addCancelTask(DEFAULT_TASK_TYPE) : self.removeCancelTask();
    };
  },

  view (vnode) {
    const task = vnode.state.task;

    const cancelTask = function () {
      if (task.hasOnCancelTask()) {
        const cancelTask = task.onCancelTask;
        return (
          <f.row>
            <div class="cancel-task-container">
              <div class="task-header">
                <strong>{cancelTask.type()}</strong>
              </div>
              {
                m(TaskBasicViews[cancelTask.type()], {
                  task:      cancelTask,
                  key:       cancelTask.uuid(),
                  basicView: true
                })
              }
            </div>
          </f.row>
        );
      }
    };

    const taskSelector = function () {
      if (task.hasOnCancelTask()) {
        const items = _.reduce(_.merge({}, Tasks.Types, vnode.attrs.pluginInfos().pluggableTasksTypes()), (accumulator, value, key) => {
          if (key !== 'fetchartifact') {
            accumulator.push({id: key, text: value.description});
          }
          return accumulator;
        }, []);

        return (
          <f.select model={vnode.state}
                    attrName='selected'
                    items={items}
                    size={3}
                    largeSize={3}
                    end="true"/>
        );
      }
    };

    return (
      <div class='on-cancel'>
        <f.row>
          <f.checkBox model={vnode.state}
                      attrName='checked'
                      label='On cancel task'
                      class="check"
                      size={3}
                      largeSize={3}
                      tooltip={{
                        content:   tt.onCancelTask,
                        direction: 'bottom',
                        size:      'small'
                      }}/>
          {taskSelector()}
        </f.row>
        {cancelTask()}
      </div>
    );
  }
};

module.exports = CancelTaskWidget;
