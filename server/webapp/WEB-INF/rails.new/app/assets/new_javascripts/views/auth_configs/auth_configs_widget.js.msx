/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'string-plus', 'helpers/form_helper', 'views/shared/new_modal', 'helpers/mithril_component_mixins',
  'models/auth_configs/auth_configs',
  'models/pipeline_configs/plugin_infos',
  'views/auth_configs/auth_config_widget',
  'views/auth_configs/auth_config_modal_body',
  'jquery.textcomplete'
], function (m, _, s, f, Modal, ComponentMixins, AuthConfigs, PluginInfos, AuthConfigWidget, AuthConfigModalBody) {

  function showErrors(modal, ctrl, newAuthConfig) {
    return function (errorMessageOrAuthConfiWithErrors) {
      if (_.isString(errorMessageOrAuthConfiWithErrors)) {
        modal.destroy();
        ctrl.message({type: 'alert', message: errorMessageOrAuthConfiWithErrors});
      } else {
        ctrl.clearMessage();
        newAuthConfig(errorMessageOrAuthConfiWithErrors);
      }
    };
  }

  function showSuccess(modal, ctrl, message) {
    return function () {
      modal.destroy();
      ctrl.reloadPage();
      ctrl.message({
        type:    'success',
        message: message
      });
    };
  }

  function getVerifyConnectionButton(ctrl, newAuthConfig, saveDisabled, checkConnectionClasses, message) {
    return {
      text:     'Check connection',
      class:    checkConnectionClasses(),
      onclick:  function () {
        ctrl.clearMessage();
        checkConnectionClasses().splice(checkConnectionClasses().indexOf("green-check"));
        checkConnectionClasses().push('in-progress');
        m.redraw(true);

        var onSuccess = function () {
          checkConnectionClasses().splice(checkConnectionClasses().indexOf("in-progress"));
          checkConnectionClasses().push("green-check");
          message({type: 'success', message: 'Connection OK.'});
        };

        var onFail = function (errorMessageOrAuthConfiWithErrors) {
          checkConnectionClasses().splice(checkConnectionClasses().indexOf("in-progress"));
          if (_.isString(errorMessageOrAuthConfiWithErrors)) {
            message({type: 'alert', message: errorMessageOrAuthConfiWithErrors});
          } else {
            ctrl.clearMessage();
            newAuthConfig(errorMessageOrAuthConfiWithErrors);
          }
        };

        newAuthConfig().verifyConnection().then(onSuccess, onFail);
      },
      disabled: saveDisabled
    };
  }

  var AuthConfigsWidget = {
    controller: function () {
      var ctrl = this;
      ComponentMixins.ManagesCollection.call(this, {as: 'AuthConfig'});
      ComponentMixins.HasViewModel.call(this);

      this.modal       = null;
      this.authConfigs = m.prop(new AuthConfigs());

      this.message = m.prop({type: undefined, message: undefined});

      this.clearMessage = function () {
        this.message({});
      };

      this.reloadPage = function () {
        AuthConfigs.all().then(function (authConfigs) {
          ctrl.authConfigs(authConfigs);
        }, function (message) {
          ctrl.message({type: 'alert', message: message});
        });
      };

      this.reloadPage();

      this.edit = function (authConfig) {
        var newAuthConfig          = m.prop();
        var pluginInfo             = m.prop();
        var saveDisabled           = m.prop(false);
        var errorMessage           = m.prop();
        var message                = m.prop({type: undefined, message: undefined});
        var checkConnectionClasses = m.prop(['save', 'primary']);
        ctrl.clearMessage();

        var modal = new Modal({
          size:    'large',
          title:   'Edit Authorization Configuration ' + authConfig.id(),
          body:    (<AuthConfigModalBody authConfig={newAuthConfig}
                                         pluginInfo={pluginInfo}
                                         newAuthConfig={false}
                                         key="edit-authorization"
                                         errorMessage={errorMessage}
                                         message={message}
                                         saveDisabled={saveDisabled}
          />),
          onclose: function () {
            modal.destroy();
          },
          buttons: function () {
            if (!newAuthConfig()) {
              return [];
            }
            return [
              {
                text:     'Save',
                class:    'save primary',
                onclick:  function () {
                  newAuthConfig().update().then(showSuccess(modal, ctrl, 'The authorization configuration ' + newAuthConfig().id() + ' was updated successfully.'), showErrors(modal, ctrl, newAuthConfig));
                },
                disabled: saveDisabled
              }, getVerifyConnectionButton(ctrl, newAuthConfig, saveDisabled, checkConnectionClasses, message)];
          }
        });

        var showError = function (args) {
          var messages = _.chain(args).map(function (arg) {
            if (_.isString(arg)) {
              return s.terminateWithPeriod(arg);
            }
          }).compact().uniq().join(' ').value();

          errorMessage(messages);
        };

        var onFulfilled = function (args) {
          newAuthConfig(args[0]);
          pluginInfo(args[1]);
          errorMessage(null);
        };

        modal.render();
        m.redraw(true);

        m.sync([AuthConfigs.AuthConfig.get(authConfig.id()), PluginInfos.PluginInfo.get(authConfig.pluginId())]).then(onFulfilled, showError);
      };

      this.add = function () {
        var newAuthConfig          = m.prop(new AuthConfigs.AuthConfig({}));
        var newPluginInfo          = m.prop(new PluginInfos.PluginInfo({}));
        var saveDisabled           = m.prop(true);
        var message                = m.prop({type: undefined, message: undefined});
        var checkConnectionClasses = m.prop(['save', 'primary']);
        ctrl.clearMessage();

        var modal = new Modal({
          size:    'large',
          title:   'Add a new authorization configuration',
          body:    (<AuthConfigModalBody authConfig={newAuthConfig}
                                         newAuthConfig={true}
                                         pluginInfo={newPluginInfo}
                                         message={message}
                                         saveDisabled={saveDisabled}/>),
          onclose: function () {
            modal.destroy();
          },
          buttons: [
            {
              text:     'Save',
              class:    'save primary',
              onclick:  function () {
                newAuthConfig().create().then(showSuccess(modal, ctrl, 'The authorization configuration ' + newAuthConfig().id() + ' was created successfully.'), showErrors(modal, ctrl, newAuthConfig));
              },
              disabled: saveDisabled
            }, getVerifyConnectionButton(ctrl, newAuthConfig, saveDisabled, checkConnectionClasses, message)]
        });
        modal.render();
      };

      var deleteInProgress = m.prop(false);

      var performDelete = function (modal, authConfig) {
        var onSuccess = function (message) {
          modal.destroy();
          ctrl.deleteVm(authConfig.id());
          ctrl.reloadPage();
          ctrl.message({type: 'success', message: message});
          deleteInProgress(false);
        };

        var onFailure = function (message) {
          modal.destroy();
          ctrl.message({type: 'alert', message: message});
          deleteInProgress(false);
        };

        deleteInProgress(true);
        m.redraw(true);
        authConfig.delete().then(onSuccess, onFailure);
      };

      this.deleteConfirm = function (authConfig) {
        var modal = new Modal({
          title:    'Are you sure?',
          body:     (<div>Are you sure you want to delete the authorization configuration
            <strong>{authConfig.id()}</strong>?</div>),
          oncancel: function () {
            modal.destroy();
          },
          buttons:  function () {
            return [
              {
                text:    'Delete',
                class:   deleteInProgress() ? 'delete-auth-config in-progress' : 'delete-auth-config',
                onclick: function () {
                  performDelete(modal, authConfig);
                }
              }
            ];
          }
        });
        modal.render();
      };
    },

    view: function (ctrl) {
      var message;
      if (ctrl.message().message) {
        message = (
          <f.row>
            <f.callout type={ctrl.message().type}>
              {ctrl.message().message}

              <button class="close-button" aria-label="Dismiss alert" type="button"
                      onclick={ctrl.clearMessage.bind(ctrl)}>
                <span aria-hidden="true">&times;</span>
              </button>
            </f.callout>
          </f.row>
        );
      }

      return (
        <div>
          <div class="header-panel">
            <header class="page-header">
              <f.row>
                <f.column size={6}>
                  <h1>Authorization Configurations</h1>
                </f.column>

                <f.column size={6}>
                  <f.button onclick={ctrl.add.bind(ctrl)} class="add-auth-config">
                    Add
                  </f.button>
                </f.column>
              </f.row>
            </header>
          </div>


          <div class="auth-configs">
            {message}
            <f.row>

              {ctrl.authConfigs().mapAuthConfigs(function (authConfig) {
                var pluginInfo = _.find(PluginInfos(), function (pi) {
                  return pi.id() === authConfig.pluginId();
                });

                return (
                  <AuthConfigWidget
                    authConfig={authConfig}
                    pluginInfo={pluginInfo}
                    key={authConfig.id()}
                    vm={ctrl.vmState(authConfig.id())}
                    onEdit={ctrl.edit.bind(ctrl, authConfig)}
                    onDelete={ctrl.deleteConfirm.bind(ctrl, authConfig)}/>
                );
              })}
            </f.row>
          </div>
        </div>
      );
    }
  };

  return AuthConfigsWidget;
});