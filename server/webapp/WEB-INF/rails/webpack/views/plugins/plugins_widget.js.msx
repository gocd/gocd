/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//fixme: Delete this file and use plugins_widget_new after componentization is complete

const m                      = require('mithril');
const f                      = require('helpers/form_helper');
const Stream                 = require('mithril/stream');
const _                      = require('lodash');
const Modal                  = require('views/shared/new_modal');
const HeaderPanel            = require('views/shared/header_panel');
const ComponentMixins        = require('helpers/mithril_component_mixins');
const PluginWidget           = require('views/plugins/plugin_widget');
const PluginSettingModalBody = require('views/plugins/plugin_setting_modal_body');
const PluginSetting          = require('models/plugins/plugin_setting');

require('jquery-textcomplete');

const showErrors = (modal, ctrl, newPluginSetting) => {
  return function (errorMessageOrPluginSettingWithErrors) {
    if (_.isString(errorMessageOrPluginSettingWithErrors)) {
      modal.destroy();
      ctrl.message({type: 'alert', message: errorMessageOrPluginSettingWithErrors});
    } else {
      ctrl.clearMessage();
      newPluginSetting(errorMessageOrPluginSettingWithErrors);
    }
  };
};

function showSuccess(modal, ctrl, message) {
  return function () {
    modal.destroy();
    ctrl.message({
      type: 'success',
      message
    });
    m.redraw();
  };
}

const PluginsWidget = {
  oninit (vnode) {
    const ctrl = vnode.state;
    ComponentMixins.ManagesCollection.call(this, {as: 'PluginInfo'});
    ComponentMixins.HasViewModel.call(this);

    this.message = Stream({type: undefined, message: undefined});

    this.clearMessage = function () {
      this.message({});
    };

    this.createModal = function (options) {
      const newPluginSetting   = options.newPluginSetting;
      const pluginInfo   = options.pluginInfo;
      const modalTitle   = options.modalTitle;
      const errorMessage = options.errorMessage;
      const callback     = options.callback || _.noop;

      const modal = new Modal({
        size:    'large',
        title:   modalTitle,
        body:    () => (<PluginSettingModalBody newPluginSetting={newPluginSetting}
                                                pluginInfo={pluginInfo}
                                                errorMessage={errorMessage}/>),
        onclose: () => modal.destroy(),
        buttons: [
          {
            text:    "Save",
            class:   'save primary',
            onclick: callback
          }
        ]
      });
      return modal;
    };

    this.edit = function (pluginInfo, event) {
      event.stopPropagation();

      const newPluginSetting   = Stream();
      const errorMessage = Stream();
      ctrl.clearMessage();

      const modal = this.createModal({
        newPluginSetting,
        pluginInfo,
        modalTitle: `Edit plugin settings`,
        errorMessage,
        callback:   () => {
          if (newPluginSetting().etag()) {
            newPluginSetting().update().then(showSuccess(modal, ctrl, `The plugin settings for ${newPluginSetting().pluginId()} were updated successfully.`), showErrors(modal, ctrl, newPluginSetting)).always(m.redraw);
          }
          else {
            newPluginSetting().create().then(showSuccess(modal, ctrl, `The plugin settings for ${newPluginSetting().pluginId()} were created successfully.`), showErrors(modal, ctrl, newPluginSetting)).always(m.redraw);
          }
        }
      });

      const onFulfilled = function (pluginSettingsFromRequest) {
        newPluginSetting(pluginSettingsFromRequest);
        errorMessage(null);
      };

      const onFailure = function (error) {
        errorMessage(error);
        newPluginSetting(new PluginSetting({pluginId: pluginInfo.id()}));
      };
      modal.render();
      PluginSetting.get(pluginInfo.id()).then(onFulfilled, onFailure).always(m.redraw);
    };
  },

  view (vnode) {

    const noPluginsInstalled = (!vnode.attrs.pluginInfos || vnode.attrs.pluginInfos().countPluginInfo() === 0);

    let noPluginsMessage;
    if (noPluginsInstalled) {
      noPluginsMessage = (
        <f.infoRow message="No plugins are installed."/>
      );
    }

    return (
      <div>
        <HeaderPanel title="Plugins"/>

        <div class="plugins-settings">
          {noPluginsMessage}
          <f.dismissableCallout message={vnode.state.message} />

          <f.row>

            {vnode.attrs.pluginInfos().sortByPluginInfos((pi) => pi.id()).map((pluginInfo) => {
              return (
                <PluginWidget
                  pluginInfo={pluginInfo}
                  key={pluginInfo.id()}
                  vm={vnode.state.vmState(pluginInfo.id())}
                  onEdit={vnode.state.edit.bind(vnode.state, pluginInfo)}
                  isUserAnAdmin={vnode.attrs.isUserAnAdmin}
                />
              );
            })}
          </f.row>
        </div>
      </div>
    );
  }
};

module.exports = PluginsWidget;
