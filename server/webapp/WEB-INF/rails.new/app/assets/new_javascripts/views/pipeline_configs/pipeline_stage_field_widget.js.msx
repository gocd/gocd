/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define(['mithril', 'lodash', 'jquery', 'string-plus', 'jquery.textcomplete'],
  function (m, _, $, s) {
    var PipelineStageFieldWidget = {
      textComplete: function (attrName, values) {
        return function (elem, isInitialized) {
          if (!isInitialized) {
            var $inputElem = $(elem).find("input[name='" + attrName + "']");

            $inputElem.textcomplete([
              {
                words:   values,
                match:   /(^|,)\s*([^,]+)$/,
                index:   2,
                search:  function (term, callback) {
                  term = term.toLowerCase();
                  callback($.map(this.words, function (word) {
                    return word.toLowerCase().indexOf(term) === 0 ? word : null;
                  }));
                },
                replace: function (word) {
                  return word;
                }
              }
            ]);
          }
        };
      },

      vm: function (material) {
        var PIPELINE_STAGE_PATTERN = /^(.+) \[(.+)\]$/;
        this.material  = material;
        this.errors    = [];

        this.getPipelineStage = function () {
          if(this.material.pipeline() && this.material.stage()){
            return _.join([this.material.pipeline(), ' ', '[', this.material.stage(), ']'], '');
          }
          return '';
        };

        this.pipelineStage = m.prop(this.getPipelineStage());

        this.setPipelineStage = function (e) {
          var target  = (e || event).target;
          this.pipelineStage(target.value || target.getAttribute('value'));
          this.validate();

          var match = PIPELINE_STAGE_PATTERN.exec(this.pipelineStage());

          match ? this.material.pipeline(match[1]) : this.material.pipeline('');
          match ? this.material.stage(match[2]) : this.material.stage('');
        };

        this.validate = function () {
          this.errors    = [];
          this.material.errors().clear();

          if (s.isBlank(this.pipelineStage())) {
            return;
          }

          if (!PIPELINE_STAGE_PATTERN.test(this.pipelineStage())) {
            this.errors.push(_.join(["'", this.pipelineStage(), "'", " ", "should conform to the pattern 'pipeline [stage]'"], ''));
          }
        };

        this.hasErrors = function () {
          return (!_.isEmpty(this.errors) || !_.isEmpty( this.material.errors().errors()));
        };

        this.errorsForDisplay = function () {
          return !_.isEmpty(this.errors) ? this.errors : _.values(this.material.errors().errors()).join(". ");
        };
      },

      controller: function (args) {
        this.pipelines = args.pipelines;
        this.vm = new PipelineStageFieldWidget.vm(args.material);

        this.pipelineStages = function() {
          var data = _.map(this.pipelines(), function (pipeline) {
            return _.map(pipeline.stages, function (stage) {
              return _.join([pipeline.name, ' ', '[', stage.name, ']'], '');
            }
              );
          }
          );
          return _.flattenDeep(data);
        };
      },

      view: function (ctrl) {
        var propertyError = ctrl.vm.hasErrors() ? (<span class='form-error is-visible'>{ctrl.vm.errorsForDisplay()}</span>) : undefined;

        return (
          <div
            config={PipelineStageFieldWidget.textComplete('pipeline-stage', ctrl.pipelineStages())}>
            <label>Pipeline [Stage]
              <span class='asterisk'>*</span>
            </label>
            <input type='text'
                   name='pipeline-stage'
                   autocomplete="off"
                   autocapitalize="off"
                   autocorrect="off"
                   spellcheck="off"
                   value={ctrl.vm.pipelineStage()}
                   onblur={ctrl.vm.setPipelineStage.bind(ctrl.vm)}/>
            {propertyError}
          </div>
        );
      }
    };

    return PipelineStageFieldWidget;
  });
