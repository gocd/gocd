/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'helpers/form_helper', 'views/shared/new_modal',
  'models/pipeline_configs/packages', 'models/pipeline_configs/repositories', 'models/pipeline_configs/plugin_infos', 'views/pipeline_configs/package_repositories/package_config_new_widget',
  'views/pipeline_configs/package_repositories/package_config_edit_widget'
], function (m, _, f, Modal, Packages, Repositories, PluginInfos, PackageConfigNewWidget, PackageConfigEditWidget) {

  var onSuccessOfPackageApi = function (vm, modal, material, data) {
    vm.saveSuccess();
    material.ref(data.id());
    Repositories.findById(material.repository().id()).then(function (repository) {
      material.repository(repository);
    });
    modal.destroy();
  };

  var onFailureOfPackageApi = function (vm, data) {
    vm.saveFailed(data);
  };

  var EditPackageWidget = {
    controller: function (args) {
      var ctrl = {
        isPluginMissing: function () {
          return _.isNil(PluginInfos.findById(args.material.repository().pluginMetadata().id()));
        },

        editPackage:     function (vm, modal) {
          args.packageForEdit().update().then(onSuccessOfPackageApi.bind(this, vm, modal, args.material), onFailureOfPackageApi.bind(this, vm));
        },

        update:         function () {
          args.create(args.packageForEdit, args.material.repository, PackageConfigEditWidget, 'Edit Package', ctrl.editPackage);
        }
      };
      return ctrl;
    },

    view: function (ctrl, args) {
      var packageForEdit = args.packageForEdit();
      var data           = {Name: packageForEdit.name(), AutoUpdate: packageForEdit.autoUpdate()};

      packageForEdit.configuration().mapConfigurations(function (conf) {
        data[_.capitalize(conf.key())] = conf.isSecureValue() ? "***********" : conf.value();
      });

      var editButton = ctrl.isPluginMissing() ? (
        <f.alert><b>{args.material.repository().pluginMetadata().id()}</b> plugin seems to be removed.</f.alert>)
        : (<f.editButton class={null} onclick={ctrl.update}/>);

      return (
        <div>
          <div class='package'>
            {editButton}
            <f.row>
              <ul>
                {_.map(data, function (v, k) {
                  return (
                    <li>
                      <label class={_.toLower(k)}>{k}</label><span>{v}</span>
                    </li>
                  );
                })}
              </ul>
            </f.row>
          </div>
        </div>
      );
    }
  };


  var NewPackageWidget = {
    controller: function (args) {
      var ctrl = {
        createPackage: function (vm, modal) {
          args.packageForEdit().create().then(onSuccessOfPackageApi.bind(this, vm, modal, args.material), onFailureOfPackageApi.bind(this, vm));
        },
        create:        function () {
          args.create(args.packageForEdit, args.material.repository, PackageConfigNewWidget, 'Add Package', ctrl.createPackage);
        }
      };
      return ctrl;

    },

    view: function (ctrl, args) {
      return (
        <f.row>
          <f.column class='no-package' size={4} largeSize={6} end>
            {args.material.repository().packages().countPackage() === 0 ?
              <div>
                <label>No packages available in this repository.</label> <a class='add-button button'
                                                                            href="javascript:void(0)"
                                                                            onclick={ctrl.create}>Create New Package</a>
              </div>
              : <a class='add-button button' href="javascript:void(0)"
                   onclick={ctrl.create}/>}

          </f.column>
        </f.row>
      );
    }
  };

  var SelectPackageWidget = {
    controller: function (args) {
      args.getPackageForEdit(args.defaultPackageId());
      args.material.ref(args.defaultPackageId());
      return {
        selectPackage: function () {
          var packageId = args.defaultPackageId();
          args.material.ref(packageId);
          args.getPackageForEdit(packageId);
        }
      };
    },

    view: function (ctrl, args) {
      var items = [];
      args.material.repository().packages().mapPackages(function (packageInfo) {
        var item     = {};
        item['id']   = packageInfo.id();
        item['text'] = packageInfo.name();
        items.push(item);
      });

      return (
        <f.row class='package-selector'>
          <f.select
            model={args}
            attrName="defaultPackageId"
            items={items}
            size={6}
            largeSize={2}
            onchange={ctrl.selectPackage}
          />
        </f.row>
      );
    }
  };

  var PackageWidget = {
    controller: function (args) {
      var getMaterialReference = function () {
        if(args.material.repository().packages().countPackage() === 0) {
          return args.material.ref();
        }
        if(args.material.ref()) {
          return args.material.ref();
        }
        return args.material.repository().packages().firstPackage().id();
      };
      var ctrl = {
        packageForEdit: m.prop(new Packages.Package({})),

        getPackageForEdit: function (packageId) {
          var packageForEdit = this.packageForEdit;
          if(packageId) {
            Packages.getPackage(packageId, packageForEdit);
          }
          return this.packageForEdit;
        },

        defaultPackageId: m.prop(getMaterialReference()),

        create: function (packageForEdit, repository, PackageConfigurationWidget, modalTitle, performOperation) {
          var vm             = new Packages.vm();

          var modal = new Modal({
            size:    'small',
            title:   modalTitle,
            body:    (<PackageConfigurationWidget packageForEdit={packageForEdit}
                                              repository={repository()}
                                              vm={vm}/>),
            onclose: function () {
              vm.reset();
              modal.destroy();
            },
            buttons: [
              {
                text:    'Save',
                class:   'save primary',
                onclick: function () {
                  vm.startUpdating();
                  performOperation(vm, modal);
                }
              }
            ]
          });
          modal.render();
        }

      };
      return ctrl;
    },
    view:       function (ctrl, args) {
      return (
        <div>
          {args.material.repository().packages().countPackage() === 0 ? '' :
            <SelectPackageWidget material={args.material}
                                 defaultPackageId={ctrl.defaultPackageId}
                                 getPackageForEdit={ctrl.getPackageForEdit.bind(ctrl)}/>}

          <NewPackageWidget material={args.material}
                            packageForEdit={ctrl.packageForEdit}
                            create={ctrl.create}/>

          {args.material.repository().packages().countPackage() === 0 ? '' : <EditPackageWidget packageForEdit={ctrl.packageForEdit}
                                                                                                material={args.material}
                                                                                                create={ctrl.create}/>}
        </div>
      );
    }
  };
  return PackageWidget;
});