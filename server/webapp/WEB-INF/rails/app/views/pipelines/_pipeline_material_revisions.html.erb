<% scope[:pipeline_name] = @pipeline.getName()
   scope[:pegged_revisions] ||= {}
%>

<%= pipeline_operations_blocking_form_remote_tag(:url => api_pipeline_action_path(:pipeline_name => scope[:pipeline_name], :action => "schedule"),
                             :html => {
                                     :onsubmit => ("PipelineOperations.onTriggerWithOptionsDialog(this, '#{scope[:pipeline_name]}', '#{api_pipeline_action_path(:pipeline_name => scope[:pipeline_name], :action => "schedule")}'); return false;").html_safe
                             }
    ) -%>

<div class="change_materials">
    <div class="sub_tabs_container">
        <ul>
            <li id="materials_tab" class="current_tab">
                <a class="tab_button_body_match_text">materials</a>
                <a><%= l.string('MATERIALS') -%></a>
            </li>
            <% if !@variables.empty? %>
                <li id="environment_variables_tab">
                    <a class="tab_button_body_match_text">environment-variables</a>
                    <a><%= l.string('ENVIRONMENT_VARIABLES') -%></a>
                </li>
            <% end %>
            <% scope[:secure_variables] = @variables.getSecureVariables() %>
            <% unless scope[:secure_variables].empty? %>
                <li id="secure_environment_variables_tab">
                    <a class="tab_button_body_match_text">secure-environment-variables</a>
                    <a><%= l.string('SECURE_ENVIRONMENT_VARIABLES') -%></a>
                </li>
            <% end %>
        </ul>
    </div>
    <div class="sub_tab_container">

        <div class="sub_tab_container_content">
            <div class="materials" id="tab-content-of-materials">

                <div class="material_summaries">
                    <% @pipeline.getMaterials().each_with_index do |material_config_in_pim, index_in_pim|
                        scope[:material_summary_display_css] = index_in_pim == 0 ? "selected first" : ""
                        scope[:material_finger_print] = material_config_in_pim.getPipelineUniqueFingerprint()
                        scope[:pegged_revision] = scope[:pegged_revisions][scope[:material_finger_print]]
                        scope[:revision] = @pipeline.findCurrentMaterialRevisionForUI(material_config_in_pim)
                    %>
                        <div class="material_summary <%= scope[:material_summary_display_css] %>">
                            <% if scope[:pegged_revision] %>
                                <div id="material-number-<%= index_in_pim %>" class="revision_number updated" title="<%= scope[:pegged_revision] %>"><%= material_config_in_pim.getShortRevision(scope[:pegged_revision]) %></div>
                            <% elsif scope[:revision] %>
                                <div id="material-number-<%= index_in_pim %>" class="revision_number" title="<%= scope[:revision].getLatestRevisionString() %>"><%= scope[:revision].getLatestShortRevision() %></div>
                            <% else %>
                                <div id="material-number-<%= index_in_pim %>" class="revision_number updated" title="Latest Available Revision">latest</div>
                            <% end %>
                            <div class="material_name" title="<%= material_config_in_pim.getDisplayName() %>"><%= material_config_in_pim.getTruncatedDisplayName() %></div>
                        </div>
                    <% end %>
                </div>
                <%= content_wrapper_tag -%>
                <div class="material_details">
                    <% @pipeline.getMaterials().each_with_index do |material_in_pmr, index_in_pmr|
                        scope[:material_summary_display_css] = index_in_pmr == 0 ? "selected first" : ""
                        scope[:material_finger_print] = material_in_pmr.getPipelineUniqueFingerprint()
                        scope[:pegged_revision] = scope[:pegged_revisions][scope[:material_finger_print]]
                        scope[:revision] = @pipeline.findCurrentMaterialRevisionForUI(material_in_pmr)
                        scope[:latest_revision] = @pipeline.getLatestMaterialRevision(material_in_pmr)
                        scope[:current_or_latest_revision] = scope[:revision] || scope[:latest_revision]
                        scope[:is_dependency_material] = material_in_pmr.is_a?(com.thoughtworks.go.config.materials.dependency.DependencyMaterial)
                    %>
                            <%- scope[:material_details_display_class] = index_in_pmr == 0 ? "" : "hidden" -%>
                            <div class="material_detail <%= scope[:material_details_display_class] %>">
                                <dl>
                                    <dt><%= material_in_pmr.getTypeForDisplay() %></dt>
                                    <dd><span class="material_name" title="<%= material_in_pmr.getDisplayName() %>"><%= material_in_pmr.getTruncatedDisplayName() %></span></dd>

                                    <% scope[:folder_not_set] = material_in_pmr.getFolder() == nil -%>
                                    <dt><%= l.string('DEST') %></dt>
                                    <dd class='folder
                                <% if scope[:folder_not_set] %> not_set
                                <% end %>'>
                                        <% if scope[:folder_not_set] %>not-set
                                            <% else %><%= material_in_pmr.getFolder() -%>
                                        <% end %></dd>

                                    <dt><%= l.string('DATE') %></dt>
                                    <dd class="date" title="<%= (scope[:revision] && scope[:revision].getDateOfLatestModification().iso8601) || l.string("NOT_APPLICABLE") %>">
                                        <%= (scope[:revision] && scope[:revision].getDateOfLatestModification().display_time) || l.string("NOT_APPLICABLE") %>
                                    </dd>

                                    <% if scope[:is_dependency_material] %>
                                        <dt><%= l.string('LABEL:') %></dt>
                                        <dd class="label"><%= (scope[:revision] && h(scope[:revision].getLatestModification().getPipelineLabel())) || l.string("NOT_APPLICABLE") -%></dd>
                                    <% else %>
                                        <dt><%= l.string('USER') %></dt>
                                        <dd class='user'><%= (scope[:revision] && h(scope[:revision].getLatestUser())) || l.string("NOT_APPLICABLE") %></dd>

                                        <dt><%= l.string('COMMENT:') %></dt>
                                        <dd class="comment"><%= (scope[:revision] && h(render_simple_comment(scope[:revision].getLatestComment()))) || l.string("NOT_APPLICABLE") %></dd>
                                    <% end %>

                                    <dt><%= scope[:show_on_pipelines] ? l.string('LAST_RUN_WITH') : l.string('CURRENTLY_DEPLOYED') -%></dt>
                                    <dd>
                                        <span id="currently-deployed-<%= index_in_pmr %>" class="revision_number" title="<%= (scope[:revision] && scope[:revision].getLatestRevisionString()) || l.string("NOT_APPLICABLE") %>"><%= (scope[:revision] && scope[:revision].getLatestShortRevision()) || l.string("NOT_APPLICABLE") %></span>
                                    </dd>

                                    <dt><%= scope[:show_on_pipelines] ? l.string('REVISION_TO_TRIGGER_WITH') : l.string('REVISION_TO_DEPLOY') -%></dt>
                                    <dd>
                                        <%
                                           if scope[:current_or_latest_revision].hasModifications()
                                        -%>
                                            <input id="material-number-<%= index_in_pmr %>-original" type="hidden" class="original-revision"
                                                   name="original_fingerprint[<%= scope[:material_finger_print] %>]" value="<%= scope[:pegged_revision] ? scope[:pegged_revision] : scope[:current_or_latest_revision].getLatestRevisionString() %>"/>


                                            <% if scope[:pegged_revision] %>
                                                <div id="material-number-<%= index_in_pmr %>-pegged" title="<%= scope[:pegged_revision] %>"><%= scope[:pegged_revision] %></div>
                                            <% else %>
                                                <input id="material-number-<%= index_in_pmr %>-autocomplete" type="text" class="autocomplete-input" name="material_fingerprint[<%= scope[:material_finger_print] %>]"/>
                                            <% end %>

                                            <div id="material-number-<%= index_in_pmr %>-autocomplete-content" class="autocomplete bring_to_front"></div>
                                            <% if !scope[:pegged_revision] %>
                                                <script type="text/javascript">
                                                    Util.on_load(function() {
                                                        CruiseAutocomplete.materialSearch(<%= index_in_pmr == 0 -%>, '<%= scope[:pipeline_name] %>',
                                                                '<%= scope[:current_or_latest_revision].getMaterial().getFingerprint() %>', 'material-number-<%= index_in_pmr %>-autocomplete',
                                                                function(short_revision, long_revision) {
                                                                    var external_revision = $('material-number-<%= index_in_pmr %>');
                                                                    external_revision.update(short_revision);
                                                                    external_revision.writeAttribute('title', long_revision);
                                                                    if ($("currently-deployed-<%= index_in_pmr %>").title == long_revision) {
                                                                        external_revision.removeClassName('updated');
                                                                        materialDirtyTracker.undoUpdate(<%= index_in_pmr %>);
                                                                    } else {
                                                                        external_revision.addClassName('updated');
                                                                        materialDirtyTracker.update(<%= index_in_pmr %>);
                                                                    }
                                                                });
                                                    });
                                                </script>
                                            <% end %>
                                        <% else -%>
                                            <div id="material-number-<%= index_in_pmr %>-latest" title="<%= l.string('LATEST_AVAILABLE_REVISION') %>">latest</div>
                                        <% end -%>
                                    </dd>
                                </dl>

                            </div>

                        <%- end -%>
                </div>
                <%= end_content_wrapper -%>
            </div>

            <% if !@variables.empty? %>
                <div class="variables" id="tab-content-of-environment-variables" style="display: none;">
                    <%= content_wrapper_tag %>
                    <span><%= l.string('Override Environment and Pipeline level variables') -%></span>
                    <% @variables.each_with_index do |variable, index| %>
                        <% unless variable.isSecure() %>
                            <div class="variable">
                                <label for="variables[<%= variable.getName() %>]"><%= variable.getName() %></label>
                                <input id="variable-<%= index -%>" type='text' name="variables[<%= variable.getName() %>]" value="<%= variable.getValue() %>"/>
                                <input type='hidden' name="original_variables[<%= variable.getName() %>]" value="<%= variable.getValue() %>"/>
                                <span class="message hidden">Overwritten. Default: <%= h(variable.getValue()) %></span>
                            </div>
                        <% end %>
                    <% end %>
                    <%= end_content_wrapper %>
                </div>
            <% end %>

            <% unless scope[:secure_variables].empty? %>
                <div class="secure_variables" id="tab-content-of-secure-environment-variables" style="display: none;">
                    <%= content_wrapper_tag %>
                    <span><%= l.string('OVERRIDE_SECURE_ENVIRONMENT_AND_PIPELINE_LEVEL_VARIABLES') -%></span>
                    <% scope[:secure_variables].each_with_index do |variable, index| %>
                        <div>
                            <%= label_tag "secure_variables[#{variable.getName()}]", variable.getName(), :class => 'inline' -%>
                            <%
                               secure_variable_action_random_dom_id = random_dom_id("secure_variable_action")
                               secure_variable_value_random_dom_id = random_dom_id("secure_variable")
                            %>
                            <%= password_field_tag("secure_variables[#{variable.getName()}]", "******", :disabled => 'disabled', :class => secure_variable_value_random_dom_id, :id => "variable-#{index}") -%>
                            <%= link_to "Override", '#', :class => "override #{secure_variable_action_random_dom_id}" -%>
                            <%= link_to "Reset", '#', :class => "reset #{secure_variable_action_random_dom_id} hidden" -%>
                            <script type="text/javascript">
                                jQuery(document).ready(function() {
                                    jQuery('.override.<%= secure_variable_action_random_dom_id -%>').click(function() {
                                        var value_textbox = jQuery(".<%= secure_variable_value_random_dom_id -%>");
                                        var override_link = jQuery('.override.<%= secure_variable_action_random_dom_id -%>');
                                        var reset_link = jQuery('.reset.<%= secure_variable_action_random_dom_id -%>');
                                        value_textbox.removeAttr("disabled");
                                        value_textbox.val('');
                                        value_textbox.focus();
                                        override_link.hide();
                                        reset_link.show();
                                    });
                                    jQuery('.reset.<%= secure_variable_action_random_dom_id -%>').click(function() {
                                        var value_textbox = jQuery(".<%= secure_variable_value_random_dom_id -%>");
                                        var override_link = jQuery('.override.<%= secure_variable_action_random_dom_id -%>');
                                        var reset_link = jQuery('.reset.<%= secure_variable_action_random_dom_id -%>');
                                        value_textbox.val("******");
                                        value_textbox.attr("disabled", "disabled");
                                        override_link.show();
                                        reset_link.hide();
                                    });
                                });
                            </script>
                        </div>
                    <% end %>
                    <%= end_content_wrapper %>
                </div>
            <%end%>
        </div>

    </div>
    <div class="actions">
        <% if scope[:show_on_pipelines]
            scope[:button_value]=l.string('TRIGGER_PIPELINE')
        else
            scope[:button_value]=l.string('DEPLOY_CHANGES')
        end %>
        <%= submit_button(scope[:button_value], :class => 'primary', :disabled => !@pipeline.canRun()) %>
        <%= submit_button(l.string('Close'), :id => 'close', :type => 'button') %>
    </div>
</div>

<%= end_form_tag %>

<script type='text/javascript'>
    Util.on_load(function() {
        init_trigger_popup();
        materialDirtyTracker = new DirtyTracker('materials_tab');
        environmentVariableDirtyTracker = new DirtyTracker('environment_variables_tab');
        new TabsManager('materials_tab', 'material_popup', 'UNIQUE_ID');
    });
</script>