import com.thoughtworks.go.build.DownloadFile
import org.apache.commons.codec.digest.DigestUtils
import org.apache.tools.ant.filters.ReplaceTokens

/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


def tanukiWrapperUrl() {
  System.getenv('TANUKI_WRAPPER_URL') ?: 'https://wrapper.tanukisoftware.com/download/3.5.33/wrapper-delta-pack-3.5.33-st.tar.gz'
}


def tanukiWrapperFile() { new File(new URL(tanukiWrapperUrl()).getFile()) }

private File destFile() {
  new File(gradle.gradleUserHomeDir, "download-cache/${DigestUtils.md5Hex(tanukiWrapperUrl())}/${tanukiWrapperFile().getName()}")
}

task downloadTanukiWrapper(type: DownloadFile) {
  src tanukiWrapperUrl()
  dest destFile()
  checksum 'd7679eef1398e66c51f09f3efcc392365e14cf1da4ef222f03d388345ff5f3bf'
}

task unpackTanukiWrapper(type: Copy) {
  dependsOn downloadTanukiWrapper
  from project.tarTree(downloadTanukiWrapper.outputs.files.singleFile)
  into "${buildDir}/tanuki-wrapper"
  includeEmptyDirs = false
  // strip out the directory prefix
  eachFile { FileCopyDetails fcp ->
    def segments = fcp.relativePath.segments
    def pathsegments = segments[1..-1] as String[]
    fcp.relativePath = new RelativePath(!fcp.file.isDirectory(), pathsegments)
  }

  doLast {
    project.mkdir("${buildDir}/tanuki-wrapper/run")
    ant.touch(file: "${buildDir}/tanuki-wrapper/run/.keep")
  }
}

def replacementTokens(String service) {
  [
    'app.name'          : "go-${service}",
    'app.long.name'     : "Go ${service.capitalize()}",
    'app.description'   : "Go ${service.capitalize()}",
    'script.description': "Go ${service.capitalize()}",
    'wrapper.command'   : '-c'
  ].collectEntries { k, v ->
    [k.toString(), v.toString()]
  }
}


def configureGenericZip(Zip zipTask, Configuration configuration, String jarFile, String service) {
  zipTask.with {
    def replacementTokens = replacementTokens(service)
    dependsOn unpackTanukiWrapper
    destinationDir = file("${project.convention.plugins.get("base").distsDir}/zip")
    archiveName = "go-${service}-${rootProject.fullVersion}.zip"
    // the base dir inside the zip
    into("go-${service}-${project.goVersion}")

    from("${rootProject.projectDir}/LICENSE")

    from(configuration) {
      rename "(.*)-${project.version}.(.*)", jarFile
    }

    into("logs") {
      from "${unpackTanukiWrapper.outputs.files.singleFile}/logs"
    }

    into("run") {
      from "${unpackTanukiWrapper.outputs.files.singleFile}/run"
    }

    def copySpec = project.copySpec {
      from("${unpackTanukiWrapper.outputs.files.singleFile}/src/bin") {
        into 'bin'
        include 'sh.script.in', 'App.bat.in'
        rename "(.*).in", '$1'
        rename 'sh.script', "go-${service}.sh"
        rename 'App.bat', "go-${service}.bat"
        filter(ReplaceTokens, tokens: replacementTokens)
        filter { String line ->
          if (line.startsWith('WRAPPER_CMD=')) {
            'WRAPPER_CMD=../wrapper/bin/wrapper'
          } else if (line.startsWith('WRAPPER_CONF=')) {
            'WRAPPER_CONF=../wrapper/conf/wrapper.conf'
          } else if (line.startsWith("PIDDIR=")) {
            "PIDDIR=../run"
          } else {
            line
          }
        }
        eachFile { fcp ->
          if (fcp.name.endsWith(".sh")) {
            fileMode = 0755
          }
        }
      }
    }

    with(copySpec)

    into('wrapper') {
      from("${unpackTanukiWrapper.outputs.files.singleFile}/bin") {
        into "bin"
        include 'wrapper*'
        include 'wrapper*.*'
      }

      from("${unpackTanukiWrapper.outputs.files.singleFile}/lib") {
        into "lib"
        include 'libwrapper*'
        include 'wrapper.jar'
      }
    }
  }
}

task agentGenericZip(type: Zip) { Zip zipTask ->
  def jarFile = 'agent-bootstrapper.jar'
  def service = 'agent'

  configureGenericZip(zipTask, configurations.agentBootstrapperJar, jarFile, service)

  def replacementTokens = replacementTokens(service)

  into('wrapper') {
    into('conf') {
      from "${unpackTanukiWrapper.outputs.files.singleFile}/src/conf/wrapper.conf.in"
      from "${unpackTanukiWrapper.outputs.files.singleFile}/conf/wrapper-license.conf"
      rename "(.*).in", '$1'
      filter(ReplaceTokens, tokens: replacementTokens)
      filter { String line ->
        if (line.startsWith("wrapper.java.mainclass=")) {
          "wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperJarApp"
        } else if (line.startsWith("wrapper.app.parameter.1=")) {
          [
            "wrapper.app.parameter.1=${jarFile}",
            "wrapper.app.parameter.2=-serverUrl",
            "wrapper.app.parameter.3=https://localhost:8154/go",
            "wrapper.working.dir=../../",
          ].join("\r\n")
        } else if (line.startsWith("wrapper.java.classpath.1=")) {
          [
            "wrapper.java.classpath.1=./wrapper/lib/wrapper.jar",
            "wrapper.java.classpath.2=${jarFile}"
          ].join("\r\n")
        } else if (line.startsWith("wrapper.java.library.path.1=")) {
          [
            "wrapper.java.library.path.1=./wrapper/lib"
          ].join("\r\n")
        } else if (line.startsWith("wrapper.logfile")) {
          [
            "wrapper.logfile=./logs/wrapper.log"
          ].join("\r\n")
        } else {
          line
        }
      }
    }
  }

}

task serverGenericZip(type: Zip) { Zip zipTask ->
  dependsOn unpackTanukiWrapper
  def jarFile = 'go.jar'
  def service = 'server'

  configureGenericZip(zipTask, configurations.serverJar, jarFile, service)

  def replacementTokens = replacementTokens(service)

  into('wrapper') {

    into('conf') {
      from "${unpackTanukiWrapper.outputs.files.singleFile}/src/conf/wrapper.conf.in"
      from "${unpackTanukiWrapper.outputs.files.singleFile}/conf/wrapper-license.conf"
      rename "(.*).in", '$1'
      filter(ReplaceTokens, tokens: replacementTokens)
      filter { String line ->
        if (line.startsWith("wrapper.java.mainclass=")) {
          "wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperJarApp"
        } else if (line.startsWith("wrapper.app.parameter.1=")) {
          [
            "wrapper.app.parameter.1=./${jarFile}",
            "wrapper.working.dir=../../",
          ].join("\r\n")
        } else if (line.startsWith("wrapper.java.classpath.1=")) {
          [
            "wrapper.java.classpath.1=./wrapper/lib/wrapper.jar",
            "wrapper.java.classpath.2=./${jarFile}"
          ].join("\r\n")
        } else if (line.startsWith("wrapper.java.library.path.1=")) {
          [
            "wrapper.java.library.path.1=./wrapper/lib"
          ].join("\r\n")
        } else if (line.startsWith("wrapper.logfile")) {
          [
            "wrapper.logfile=./logs/wrapper.log"
          ].join("\r\n")
        } else {
          line
        }
      }
    }
  }

}

assemble.dependsOn(":installers:agentGenericZip", ":installers:serverGenericZip")
