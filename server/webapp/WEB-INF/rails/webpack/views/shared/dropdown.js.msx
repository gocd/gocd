/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m = require('mithril');
const _ = require('lodash');
const $ = require('jquery');

function selectionChange(model, attrName, event) {
  model[attrName]($(event.target).attr('data-id'));
  toggleDropdown(model);
  event.preventDefault();
}

function toggleDropdown(model) {
  model.schemeDropDownOpen(!model.schemeDropDownOpen());
}

function hideOnBlur(elem, model) {
  if (!elem.contains(event.target)) {
    model.schemeDropDownOpen(false);
  }
}

function isOpen(model) {
  return model.schemeDropDownOpen() ? "open" : "";
}

class Dropdown {

  oncreate(vnode) {
    window.addEventListener('click', hideOnBlur.bind(this, vnode.dom, vnode.attrs.model));
  }

  onremove(vnode) {
    window.removeEventListener('click', hideOnBlur.bind(this, vnode.dom, vnode.attrs.model));
  }

  view(vnode) {
    const label    = vnode.attrs.label;
    const options  = vnode.attrs.items;
    const model    = vnode.attrs.model;
    const attrName = vnode.attrs.attrName;

    const dropdownHtml = _.map(options, (option) => {
      return <a tabindex="0" class="c-dropdown_item" onclick={selectionChange.bind(this, model, attrName)}
                aria-label={`Group by ${option.text}`} data-id={option.id}>{option.text}</a>;

    });

    return <div class="groupby">
      <label class="grouping_label">{label}</label>
      <div class={`c-dropdown ${isOpen(model)}`}>
        <a aria-label={`Group by ${model.selectedSchemeText()}`} tabindex="0" class="c-dropdown_head"
           onclick={toggleDropdown.bind(this, model)}>{model.selectedSchemeText()}</a>
        <i role="presentation" class="c-down-arrow" onclick={toggleDropdown.bind(this, model)}/>
        <div className="c-dropdown_body">
          {dropdownHtml}
        </div>
      </div>
    </div>;
  }
}

module.exports = Dropdown;
