/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define(['mithril', 'lodash', 'helpers/form_helper', 'views/pipeline_configs/repository_config_angular_widget', 'models/pipeline_configs/repositories', 'views/pipeline_configs/errors_widget'],
  function (m, _, f, RepositoryConfigAngularWidget, Repositories, ErrorsWidget) {
    //This has to be done to get around mithril's controller caching
    var submodule = function (module, args) {
      return module.view.bind(module, new module.controller(args));
    };

    /*
     'scmForEdit' is a cloned copy of the actual SCM, this is required since SCMConfigEditWidget is rendered in a modal. There might be scenarios
     wherein a user can make changes to the scm but not save it and close the modal, in this scenario the changes should not
     be retained. To achieve this behaviour the widget works with a cloned copy of scm.
     */

    var RepositoryConfigEditWidget = {
      controller: function (args) {
        var self           = this;
        self.parentView    = args.parentView;
        self.material      = args.material;
        self.repoForEdit   = args.material.repository().clone();
        self.angularModule = submodule(RepositoryConfigAngularWidget, {
          repository: self.repoForEdit,
          parentView: self.parentView

        });
        self.vm            = new Repositories.vm();

        self.update = function () {
          self.vm.startUpdating();

          self.repoForEdit.update().then(function (repository) {
            self.vm.saveSuccess();
            self.material.repository().reInitialize(JSON.parse(JSON.stringify(repository)));
            self.parentView.close();
          }, function (data) {
            self.vm.saveFailed(data);
            if (data.data) {
              self.repoForEdit.reInitialize(data.data);
            }
          });
        };

        self.parentView.onClose(function () {
          self.repoForEdit.reInitialize(JSON.parse(JSON.stringify(args.material.repository())));
          self.vm.reset();
        });
      },

      view: function (ctrl) {
        var errors = ctrl.vm.hasErrors() ? (<ErrorsWidget errors={ctrl.vm.errors()}/>) : undefined;

        return (
          <div class='modal-content'>
            <div class='modal-body'>
              <div class='key-value' size={6}>
                <label>Name</label><span>{ctrl.repoForEdit.name()}</span>
              </div>
              <f.row>
                <f.checkBox model={ctrl.repoForEdit}
                            attrName='autoUpdate'
                            class='align'
                            size={6}
                            end={true}/>
              </f.row>
              {ctrl.angularModule()}
              <f.row>
                <f.button onclick={ctrl.update.bind(ctrl)}
                          class={'save-pipeline ' + ctrl.vm.saveState()}>
                  <span class={'save-state ' + ctrl.vm.saveState()}/>
                  Save
                </f.button>
              </f.row>
            </div>
          </div>
        );
      }
    };

    return RepositoryConfigEditWidget;
  }
);