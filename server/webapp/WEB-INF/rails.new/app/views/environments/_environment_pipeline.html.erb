<% scope[:pipeline] = scope[:pipeline_model].getLatestPipelineInstance()
   scope[:pipeline_name] = scope[:pipeline].getName() -%>

<%= render :partial => "shared/pipeline.html", :locals => {:scope => {:pipeline_model => scope[:pipeline_model], :show_compare => true}} %>

<% if (scope[:material_count] = scope[:pipeline].getMaterials().size()) > 0 -%>
    <%
        has_new_materials_class = ""
        if scope[:pipeline_model].hasNewRevisions()
            has_new_materials_class = "has_new_materials"
        end
    %>
    <div class="deployed_revisions <%=has_new_materials_class%>">
        <a class='materials_count hidereveal_expander' id="<%= scope[:show_hide_link] = scope[:pipeline_name] + '_show_hide_revisions' %>"><%= scope[:material_count] %> Material(s):</a>
        <table style='width: 100%' class="materials hidereveal_content list_table">
            <tr>
                <th style='width: 10%' class="noshow"></th>
                <th style='width: 30%' class="material_name">Material</th>
                <th style='width: 30%' class="revision_number">Revision</th>
                <th style='width: 30%' class="date">Check-in/trigger</th>
            </tr>
            <% scope[:pipeline].getMaterials().each do |material_in_env_pipeline|
                scope[:revision] = scope[:pipeline].findCurrentMaterialRevisionForUI(material_in_env_pipeline) -%>
                <tr <% if scope[:pipeline].hasNewRevisions(material_in_env_pipeline) -%>class="revision-row"<% end -%> >
                    <td class="noshow">
                    <% if scope[:pipeline].hasNewRevisions(material_in_env_pipeline) -%>
                        <img class="has_new_material_revisions" src="<%=image_path('icon-12-alert.png')%>">
                    <% end -%>
                    </td>
                    <td class="material_name wrapped_word" title="<%= material_in_env_pipeline.getDisplayName() %>">
                        <%= material_in_env_pipeline.getTruncatedDisplayName() %>
                    </td>
                    <td class="revision_number wrapped_word" title="<%= scope[:revision] ? scope[:revision].getLatestRevisionString() : "N/A" %>">
                        <%= scope[:revision] ? scope[:revision].getLatestShortRevision() : "N/A" %>
                    </td>
                    <td class="date" title="<%= scope[:revision] ? scope[:revision].getDateOfLatestModification().iso8601 : "N/A" %>">
                        <%= scope[:revision] ? scope[:revision].getDateOfLatestModification().display_time : "N/A" %>
                    </td>
                </tr>
            <% end %>
        </table>
    </div>
    <%- scope[:pipeline_model_id] = env_pipeline_dom_id(scope[:pipeline_model]) -%>
    <script type='text/javascript'>Util.on_load(function() { AjaxRefreshers.main().afterRefreshOf('<%= scope[:pipeline_model_id] -%>', function() { make_collapsable('<%= scope[:pipeline_model_id] -%>'); });});</script>
<% end %>
<div class='deploy'>
    <% if scope[:pipeline_model].hasNewRevisions() || scope[:pipeline_model].hasNeverCheckedForRevisions() -%>
        <%= render :partial=>"shared/trigger_pipeline.html.erb", :locals => {:scope => {:pipeline_model=>scope[:pipeline_model], :label=>"Deploy Latest"}}%>
    <% end -%>
    <%= blocking_form_remote_tag :url => { :controller => 'pipelines', :action => 'show' },
                       :success => "Modalbox.show(request.responseText, { title: '#{scope[:pipeline_name]} - Deploy', overlayClose: false, width: 850, height: 525, slideDownDuration: 0, overlayDuration: 0});" %>
        <div class='operate trigger_with_options_wrapper'>
            <input type="hidden" name="pipeline_name" value="<%= scope[:pipeline_name] %>"/>
            <%= submit_button(l.string("DEPLOY_SPECIFIC_REVISION"), :type => 'image', :class=> "change_revision") %>
        </div>
    <%= end_form_tag %>
</div>