import com.thoughtworks.go.build.DownloadFile
import org.apache.commons.codec.digest.DigestUtils

/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

private File destFile(String url) {
  new File(gradle.gradleUserHomeDir, "download-cache/${DigestUtils.md5Hex(url)}/${new File(new URL(url).path).name}")
}

task downloadOSXJre(type: DownloadFile) {
  def srcUrl = System.getenv("OSX_JDK_URL") ?: 'https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u202-b08/OpenJDK8U-jre_x64_mac_hotspot_8u202b08.tar.gz'
  src srcUrl
  dest destFile(srcUrl)
  checksum 'd7be3dfd5cd10323e1272e06d26f0709fbbc4a6f25a3992c2f2eef7022517fba'
}

task downloadTanukiDeltaPack(type: DownloadFile) {
  def srcUrl = System.getenv("TANKUK_WRAPPER_URL") ?: "https://nexus.gocd.io/repository/s3-mirrors/local/tanuki/wrapper-delta-pack-${project.versions.tanuki}-st.tar.gz"
  src srcUrl
  dest destFile(srcUrl)
  checksum 'c640701769c140ad5e05f3e6058b3650dd44c6abc0f2d456180307ba076340d2'
}

task extractDeltaPack(type: Copy) {
  dependsOn downloadTanukiDeltaPack
  from(project.tarTree(downloadTanukiDeltaPack.outputs.files.singleFile))
  into project.buildDir
}

enum Type {

  agent("Go Agent", "go-agent", "agent-bootstrapper.jar", "go-agent-bootstrapper-wrapper.log",
    [
      AGENT_STARTUP_ARGS: '-Xms128m -Xmx256m'
    ],
    []),

  sever("Go Server", "go-server", "go.jar", "go-server-wrapper.log",
    [:],
    [
      '-Xms512m',
      '-Xmx1024m',
      '-XX:MaxMetaspaceSize=400m',
      '-Duser.language=en',
      '-Duser.country=US',
    ])

  final String appName
  final String baseName
  final String jarFileName
  final String logFileName
  final Map<String, String> additionalEnvVars
  final List<String> jvmArgs


  Type(String appName,
       String baseName,
       String jarFileName,
       String logFileName,
       Map<String, String> additionalEnvVars,
       List<String> jvmArgs) {

    this.jvmArgs = jvmArgs
    this.additionalEnvVars = additionalEnvVars
    this.logFileName = logFileName
    this.jarFileName = jarFileName
    this.baseName = baseName
    this.appName = appName
  }
}

class ConcatFileReader extends FilterReader {
  ConcatFileReader(Reader reader) {
    super(new StringReader("${reader.text}\n\n# Create this file and specify any overrides for environment/jvm args\n#include ../conf/wrapper-properties.conf\n"))
  }
}

def configureOSXZip(Zip zipTask,
                    Type type) {
  zipTask.with {
    dependsOn downloadOSXJre
    dependsOn extractDeltaPack
    destinationDirectory = file("${project.buildDir}/${project.distsDirName}/osx")
    archiveBaseName = type.baseName
    archiveClassifier = 'osx'

    def baseDirInsideArchive = "${type.baseName}-${project.goVersion}"
    into(baseDirInsideArchive)

    from("${rootProject.projectDir}/LICENSE")

    from("${extractDeltaPack.outputs.files.singleFile}/wrapper-delta-pack-${project.versions.tanuki}-st/src/bin/sh.script.in") {
      filter({ String eachLine ->
        eachLine = eachLine
          .replaceAll('@app.name@', type.appName)
          .replaceAll('@app.long.name@', type.appName)
          .replaceAll('@app.description@', type.appName)

        if (eachLine == 'WRAPPER_CMD="./wrapper"') {
          eachLine = 'WRAPPER_CMD="../tanuki/wrapper"'
        }

        if (eachLine == 'PIDDIR="."') {
          eachLine = 'PIDDIR="../run"'
        }

        if (eachLine == '#PASS_THROUGH=true') {
          eachLine = 'PASS_THROUGH=true'
        }

        return eachLine
      })
      rename 'sh.script.in', type.baseName
      into "bin"
      fileMode = 0755
    }

    from("${extractDeltaPack.outputs.files.singleFile}/wrapper-delta-pack-${project.versions.tanuki}-st/src/conf/wrapper.conf.in") {
      filter({ String eachLine ->
        eachLine = eachLine
          .replaceAll('@app.name@', type.appName)
          .replaceAll('@app.long.name@', type.appName)
          .replaceAll('@app.description@', type.appName)

        if (eachLine == 'wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperSimpleApp') {
          eachLine = 'wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperJarApp'
        }

        if (eachLine == '#encoding=UTF-8') {
          def newLines = [
            '#encoding=UTF-8',
            'wrapper.working.dir=..'
          ]

          type.additionalEnvVars.forEach { k, v ->
            newLines.add("set.${k}=${v}")
          }

          eachLine = newLines.join('\n')
        }

        if (eachLine == 'wrapper.java.additional.1=' && !type.jvmArgs.isEmpty()) {
          def newLines = []

          type.jvmArgs.eachWithIndex { String eachArg, int index ->
            newLines << "wrapper.java.additional.${index + 1}=${eachArg}"
          }

          eachLine = newLines.join('\n')
        }

        if (eachLine == 'wrapper.java.additional.auto_bits=TRUE') {
          eachLine = 'wrapper.java.additional.auto_bits=FALSE'
        }

        if (eachLine == 'wrapper.java.command=java') {
          eachLine = 'wrapper.java.command=jre/Contents/Home/bin/java'
        }

        if (eachLine == 'wrapper.java.classpath.1=../lib/wrapper.jar') {
          eachLine = [
            'wrapper.java.classpath.1=tanuki/wrapper.jar',
            "wrapper.java.classpath.2=lib/${type.jarFileName}",
          ].join("\n")
        }

        if (eachLine == 'wrapper.java.library.path.1=../lib') {
          eachLine = 'wrapper.java.library.path.1=tanuki'
        }

        if (eachLine == 'wrapper.app.parameter.1=<YourMainClass>') {
          eachLine = "wrapper.app.parameter.1=lib/${type.jarFileName}"
        }

        if (eachLine == 'wrapper.logfile=../logs/wrapper.log') {
          eachLine = "wrapper.logfile=../logs/${type.logFileName}"
        }

        if (eachLine == 'wrapper.logfile.maxsize=0') {
          eachLine = "wrapper.logfile.maxsize=10m"
        }

        if (eachLine == 'wrapper.logfile.maxfiles=0') {
          eachLine = "wrapper.logfile.maxfiles=4"
        }

        return eachLine
      })

      filter(ConcatFileReader)

      into "conf"
      rename 'wrapper.conf.in', 'wrapper.conf'
    }

    from("wrapper-properties.conf.example") {
      into 'conf'
    }

    from("${extractDeltaPack.outputs.files.singleFile}/wrapper-delta-pack-${project.versions.tanuki}-st/bin") {
      include 'wrapper-macosx-*'
      into "tanuki"
    }

    from("${extractDeltaPack.outputs.files.singleFile}/wrapper-delta-pack-${project.versions.tanuki}-st/lib") {
      include 'wrapper.jar'
      include 'libwrapper-macosx-*'
      into "tanuki"
    }

    from('empty-ignore-file') {
      into "logs"
      rename ".*", ".ignore"
    }

    from('empty-ignore-file') {
      into "run"
      rename ".*", ".ignore"
    }

    // puts the content of the tar under `go-agent-XXX/jre`
    from(tarTree(downloadOSXJre.outputs.files.singleFile)) {
      eachFile { FileCopyDetails fcd ->
        List<String> segments = fcd.relativePath.segments
        segments.set(1, "jre")
        fcd.relativePath = new RelativePath(!fcd.isDirectory(), (segments as String[]))
      }
    }
  }
}

task agentOSXZip(type: Zip) { Zip thisTask ->
  configureOSXZip(thisTask, Type.agent)

  from(configurations.agentBootstrapperJar) {
    rename "(.*)-${project.version}.(.*)", '$1.$2'
    into "lib"
  }

  from('wrapper-license-agent.conf') {
    into "conf"
    rename 'wrapper-license-agent.conf', 'wrapper-license.conf'
  }

}

task serverOSXZip(type: Zip) { Zip thisTask ->
  configureOSXZip(thisTask, Type.sever)

  from(configurations.serverJar) {
    rename "(.*)-${project.version}.(.*)", 'go.jar'
    into "lib"
  }

  from('wrapper-license-server.conf') {
    into "conf"
    rename 'wrapper-license-server.conf', 'wrapper-license.conf'
  }
}

assemble.dependsOn(":installers:agentOSXZip", ":installers:serverOSXZip")
