/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'helpers/form_helper',
  'views/agents/agent_state_count_widget',
  'views/agents/agent_row_widget',
  'views/agents/agent_table_header',
  'views/agents/button_row_widget',
  'models/agents/agents'
], function (m, _, f,
             AgentStateCountWidget,
             AgentRowWidget,
             AgentTableHeader,
             ButtonRowWidget, Agents) {

  var vm = {};

  vm.dropdown = {
    states: {},

    reset: m.prop(true),

    add: function (name) {
      if (!this.states[name]) {
        this.states[name] = m.prop(false);
      }
    },

    hide: function (name) {
      this.states[name](false);
    },

    hideAllDropDowns: function () {
      if (this.reset()) {
        for (var item in this.states) {
          this.states[item](false);
        }
      }
      this.reset(true);
    },

    hideAllDropDownsExcept: function (name) {
      for (var item in this.states) {
        if (!_.isEqual(item, name)) {
          this.states[item](false);
        }
      }
    }
  };

  vm.agents = {
    all: {
      selected: m.prop(false)
    }
  };

  vm.filterText = m.prop('');

  vm.agentsCheckedState = {};


  var AgentsWidget = {
    controller: function () {

      var toggleAllAgentsSelected = function () {
        return vm.agents.all.selected(!vm.agents.all.selected());
      };

      var clearAllCheckboxes = function () {
        _.each(vm.agentsCheckedState, function (boxState) {
          boxState(false);
        });
      };

      var timeoutID         = m.prop();
      var currentRefreshXHR = m.prop();

      var isUpdateInProgress = m.prop(false);

      var ctrl = {

        message: m.prop(),

        type: m.prop(),

        allAgents: m.prop(new Agents()),

        performingUpdate: function () {
          isUpdateInProgress(true);
          this.cancelRefresh();
          m.redraw(true);
        },

        donePerformingUpdate: function () {
          isUpdateInProgress(false);
          clearAllCheckboxes();
          this.cancelRefresh();
          this.refresh();
          m.redraw(true);
        },

        isUpdateInProgress: function () {
          return isUpdateInProgress();
        },

        hideDropDowns: function () {
          vm.dropdown.hideAllDropDowns();
        },

        refreshAfterInterval: function () {
          if (!_.isNil(timeoutID())) {
            window.clearTimeout(timeoutID());
            timeoutID(undefined);
          }

          timeoutID(window.setTimeout(ctrl.refresh.bind(ctrl), 10000));
        },

        cancelRefresh: function () {
          if (!_.isNil(currentRefreshXHR())) {
            currentRefreshXHR().isAbortedByGoCD = true;
            currentRefreshXHR().abort();
            currentRefreshXHR(undefined);
          }
        },

        refresh: function () {
          this.cancelRefresh();
          var requestPromise      = Agents.all(currentRefreshXHR);
          var request             = currentRefreshXHR();
          request.isAbortedByGoCD = false;
          var onSuccess           = function (data) {
            ctrl.allAgents(data);
            ctrl.refreshAfterInterval();
          };
          var onError             = function () {
            if (!request.isAbortedByGoCD) {
              ctrl.refreshAfterInterval()
            }
          };
          requestPromise.then(onSuccess, onError);
        },

        selectAllAgents: function () {
          var isChecked  = toggleAllAgentsSelected();
          var filterText = vm.filterText();

          var filteredAgents = this.allAgents().filterAgent(function (agent) {
            return agent.matches(filterText);
          });

          _.each(filteredAgents, function (agent) {
            vm.agentsCheckedState[agent.uuid()](isChecked);
          });
        },

        areAllAgentsSelected: function () {
          var filterText     = vm.filterText();
          var filteredAgents = this.allAgents().filterAgent(function (agent) {
            return agent.matches(filterText);
          });

          var isChecked = _.every(filteredAgents, function (agent) {
            var agentsCheckedState = vm.agentsCheckedState[agent.uuid()];
            if (agentsCheckedState) {
              return agentsCheckedState();
            }
          });

          vm.agents.all.selected(isChecked);
          return isChecked;
        },

        selectedAgentsUuids: function () {
          return _.compact(_.map(vm.agentsCheckedState, function (boxSate, agentId) {
              if (boxSate()) {
                return agentId;
              }
            }
          ));
        },

        selectedAgentsCount: function () {
          return this.selectedAgentsUuids().length;
        },

        displaySuccessMessage: function (action) {
          var count = this.selectedAgentsCount();
          this.message(action + ' ' + count + ' ' + _('agent').pluralize(count));
          this.type('success');
        },

        displayErrorMessage: function (errors) {
          var count = this.selectedAgentsCount();
          this.message(errors.message + count + ' ' + _('agent').pluralize(count));
          this.type('warning');
        },

        displayModifiedMessage: function (action, addedItems, removedItems) {
          var count = this.selectedAgentsCount();
          this.message(_(action).pluralize(_.compact(_.concat(addedItems, removedItems)).length) + ' modified on ' + count + ' ' + _('agent').pluralize(count));
          this.type('success');
        },

        disableAgents: function () {
          this.performingUpdate();
          ctrl.allAgents().disableAgents(ctrl.selectedAgentsUuids())
            .then(this.displaySuccessMessage.bind(this, 'Disabled'), ctrl.displayErrorMessage.bind(ctrl))
            .then(this.donePerformingUpdate.bind(this));
        },

        enableAgents: function () {
          this.performingUpdate();
          this.allAgents().enableAgents(this.selectedAgentsUuids())
            .then(this.displaySuccessMessage.bind(this, 'Enabled'), this.displayErrorMessage.bind(this))
            .then(this.donePerformingUpdate.bind(this));
        },

        deleteAgents: function () {
          this.performingUpdate();
          this.allAgents().deleteAgents(this.selectedAgentsUuids())
            .then(this.displaySuccessMessage.bind(this, 'Deleted'), this.displayErrorMessage.bind(this))
            .then(this.donePerformingUpdate.bind(this));
        },

        updateResources: function (addResources, removeResources) {
          this.performingUpdate();
          this.allAgents().updateResources(this.selectedAgentsUuids(), addResources, removeResources)
            .then(this.displayModifiedMessage.bind(this, 'Resource', addResources, removeResources), this.displayErrorMessage.bind(this))
            .then(this.donePerformingUpdate.bind(this));
        },

        updateEnvironments: function (addEnvironments, removeEnvironments) {
          this.performingUpdate();
          this.allAgents().updateEnvironments(this.selectedAgentsUuids(), addEnvironments, removeEnvironments)
            .then(this.displayModifiedMessage.bind(this, 'Environment', addEnvironments, removeEnvironments), this.displayErrorMessage.bind(this))
            .then(this.donePerformingUpdate.bind(this));
        },

        findAgent: function (uuid) {
          return this.allAgents().findAgent(function (agent) {
            return agent.uuid() == uuid;
          });
        },

        selectedAgents: function () {
          return _.map(this.selectedAgentsUuids(), this.findAgent.bind(this));
        },

        filteredAgents: function () {
          var filterText = vm.filterText();

          return new Agents(this.allAgents().filterAgent(function (agent) {
            return agent.matches(filterText);
          }));
        }
      };

      ctrl.refresh();

      return ctrl;
    },

    view: function (ctrl) {
      var filterText     = vm.filterText();
      var filteredAgents = ctrl.filteredAgents();

      return (
        <div onclick={ctrl.hideDropDowns}>
          <ButtonRowWidget agentsCheckedState={ vm.agentsCheckedState }
                           dropdown={ vm.dropdown }
                           selectedAgents={ ctrl.selectedAgents.bind(ctrl) }
                           onDisable={ ctrl.disableAgents.bind(ctrl) }
                           onEnable={ ctrl.enableAgents.bind(ctrl) }
                           onDelete={ ctrl.deleteAgents.bind(ctrl) }
                           onResourcesUpdate={ ctrl.updateResources.bind(ctrl) }
                           onEnvironmentsUpdate={ ctrl.updateEnvironments.bind(ctrl) }
                           isUpdateInProgress={ctrl.isUpdateInProgress}/>

          <div class="search-panel">
            <f.row>
              <f.column size={6} largeSize={3}>
                <div class="search-bar">
                  <input type="text"
                         oninput={m.withAttr("value", vm.filterText)}
                         value={filterText}
                         placeholder="Filter Agents"
                         id="filter-agent"/>
                </div>
              </f.column>

              <f.column size={6} largeSize={8}>
                <AgentStateCountWidget agents={ctrl.filteredAgents.bind(ctrl)}/>
              </f.column>

            </f.row>
          </div>
          <f.flashMessage message={ ctrl.message } type={ ctrl.type } timeout={ 10000 }/>
          <f.row>
            <div class="container">
              <table class="go-table">
                <AgentTableHeader
                  onCheckboxClick={ctrl.selectAllAgents.bind(ctrl)}
                  checkboxValue={ctrl.areAllAgentsSelected.bind(ctrl)}/>
                <tbody>
                {
                  filteredAgents.mapAgents(function (agent) {
                    var uuid = agent.uuid();

                    var checkboxModel = vm.agentsCheckedState[uuid];
                    if (!checkboxModel) {
                      checkboxModel = vm.agentsCheckedState[uuid] = m.prop();
                    }

                    return (
                      <AgentRowWidget agent={agent}
                                      key={uuid}
                                      checkBoxModel={checkboxModel}
                                      show={agent.matches(filterText)}/>
                    )

                  })
                }
                </tbody>
              </table>
            </div>
          </f.row>
        </div>
      );
    }
  };

  return AgentsWidget;
});
