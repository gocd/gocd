<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  ~ Copyright 2023 Thoughtworks, Inc.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.20.xsd">
    <changeSet author="gocd(generated)" id="107">
        <!-- prevent liquibase from splitting the statements on `;` -->
        <sql dbms="postgresql" splitStatements="false">
            <!-- @formatter:off -->
            CREATE FUNCTION update_stages_lastTransitionedTime() RETURNS TRIGGER AS $$
                BEGIN
                    UPDATE stages SET lastTransitionedTime = NEW.statechangetime WHERE stages.id = NEW.stageid;
                    RETURN NEW;
                END;
            $$ LANGUAGE plpgsql;

            CREATE TRIGGER lastTransitionedTimeUpdate
                AFTER INSERT ON buildStateTransitions
                FOR EACH ROW
                EXECUTE PROCEDURE update_stages_lastTransitionedTime();
            <!-- @formatter:on -->
        </sql>
        <sql dbms="h2">
            <!-- @formatter:off -->
            CREATE TRIGGER lastTransitionedTimeUpdate
                AFTER INSERT ON buildStateTransitions
                FOR EACH ROW
                CALL "com.thoughtworks.go.server.database.h2.UpdateLastTransitionedTime";
            <!-- @formatter:on -->
        </sql>
        <createProcedure dbms="mysql">
            <!-- @formatter:off -->
            CREATE TRIGGER lastTransitionedTimeUpdate
                AFTER INSERT ON buildStateTransitions
                FOR EACH ROW
                BEGIN
                    UPDATE stages SET lastTransitionedTime = NEW.statechangetime WHERE stages.id = NEW.stageid;
                END
            <!-- @formatter:on -->
        </createProcedure>
        <comment>Adds a trigger to update `stages.lastTransitionedTime`</comment>
    </changeSet>
</databaseChangeLog>
