/*
 * Copyright 2023 Thoughtworks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.thoughtworks.go.build.VerifyJarTask

description = 'GoCD Agent'

repositories {
  maven { url 'https://jitpack.io' } // Needed for spring-test-junit5
}

sourceSets {
  functionalTest {
    java {
      srcDirs = [file('src/test-functional/java')]
    }
    resources {
      srcDirs = [file('src/test-functional/resources')]
    }

    compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.functionalTestCompileClasspath
    runtimeClasspath = output + compileClasspath + configurations.functionalTestRuntimeClasspath
  }
}

idea {
  module {
    testSources.from(sourceSets.functionalTest.java.srcDirs)
  }
}

configurations {
  functionalTestCompileClasspath.extendsFrom testCompileClasspath
  functionalTestRuntimeClasspath.extendsFrom testRuntimeClasspath
  runtimeElements.extendsFrom packagingOnly
}

dependencies {
  packagingOnly project.deps.bouncyCastle
  packagingOnly project.deps.bouncyCastlePkix

  implementation project(path: ':agent-common', configuration: 'runtimeElements')
  implementation project(path: ':common', configuration: 'runtimeElements')
  implementation project.deps.jakartaAnnotation
  implementation project.deps.commonsConfiguration
  implementation project.deps.nanohttpd
  implementation project.deps.oshi
  compileOnly project.deps.jetBrainsAnnotations

  testImplementation project(path: ':common', configuration: 'testOutput')
  testImplementation project(path: ':config:config-api', configuration: 'testOutput')
  testImplementation project(path: ':test:test-utils', configuration: 'runtimeElements')

  testImplementation project.deps.junit5Api
  testRuntimeOnly project.deps.junit5Engine
  testImplementation project.deps.springTestJunit5

  extractedAtTopLevel project(path: ':agent-process-launcher', configuration: 'runtimeElements')
  extractedAtTopLevel project(path: ':jar-class-loader', configuration: 'runtimeElements')
}

jar {
  archiveClassifier = 'classes'
}

clean {
  delete 'config'
  delete 'felix-cache'
  delete 'main'
  delete 'pipelines'
  delete 'plugins'
  delete 'plugins_work'
  delete 'agent-plugins.zip'
  delete 'tfs-impl.jar'
}

task fatJar(type: Jar) {
  finalizedBy 'verifyJar'
  dependsOn jar, project.configurations.extractedAtTopLevel, project.configurations.packagingOnly

  manifest {
    attributes 'Main-Class': 'com.thoughtworks.gocd.Boot'
    attributes 'GoCD-Main-Class': 'com.thoughtworks.go.agent.AgentMain'
    attributes 'Go-Agent-Bootstrap-Class': 'com.thoughtworks.go.agent.AgentProcessParentImpl'
  }

  from(configurations.runtimeClasspath + project.configurations.packagingOnly + jar.archiveFile) {
    into "lib/"
    rename "go-plugin-activator-${project.version}.jar", "go-plugin-activator.jar"
  }

  from(project.configurations.extractedAtTopLevel.collect { it.isDirectory() ? it : zipTree(it) }) {
    into("/")
  }
}

task verifyJar(type: VerifyJarTask) {
  jarTask = fatJar
  expectedJars = [
    "lib": [
      "agent-${project.version}-classes.jar",
      "agent-common-${project.version}.jar",
      "angus-activation-${project.versions.angusActivation}.jar",
      "animal-sniffer-annotations-1.9.jar",
      "ant-${project.versions.apacheAnt}.jar",
      "base-${project.version}.jar",
      "bcpkix-jdk18on-${project.versions.bouncyCastle}.jar",
      "bcprov-jdk18on-${project.versions.bouncyCastle}.jar",
      "bcutil-jdk18on-${project.versions.bouncyCastle}.jar",
      "checker-qual-3.33.0.jar",
      "cloning-${project.versions.cloning}.jar",
      "commandline-${project.version}.jar",
      "common-${project.version}.jar",
      "commons-codec-${project.versions.commonsCodec}.jar",
      "commons-collections4-${project.versions.commonsCollections4}.jar",
      "commons-configuration2-${project.versions.commonsConfiguration}.jar",
      "commons-io-${project.versions.commonsIO}.jar",
      "commons-lang3-${project.versions.commonsLang3}.jar",
      "commons-text-${project.versions.commonsText}.jar",
      "config-api-${project.version}.jar",
      "db-${project.version}.jar",
      "dom4j-${project.versions.dom4j}.jar",
      "domain-${project.version}.jar",
      "error_prone_annotations-2.18.0.jar",
      "failureaccess-1.0.1.jar",
      "go-plugin-access-${project.version}.jar",
      "go-plugin-activator.jar",
      "go-plugin-api-${project.version}.jar",
      "go-plugin-api-internal-${project.version}.jar",
      "go-plugin-config-repo-${project.version}.jar",
      "go-plugin-domain-${project.version}.jar",
      "go-plugin-infra-${project.version}.jar",
      "gson-${project.versions.gson}.jar",
      "guava-${project.versions.guava}.jar",
      "httpclient-${project.versions.apacheHttpComponents}.jar",
      "httpcore-4.4.16.jar",
      "httpmime-${project.versions.apacheHttpComponents}.jar",
      "istack-commons-runtime-4.1.2.jar",
      "j2objc-annotations-2.8.jar",
      "jackson-annotations-${project.versions.jacksonBom}.jar",
      "jackson-core-${project.versions.jacksonBom}.jar",
      "jackson-databind-${project.versions.jacksonBom}.jar",
      "jakarta.activation-api-2.1.2.jar",
      "jakarta.annotation-api-${project.versions.jakartaAnnotation}.jar",
      "jakarta.servlet-api-${project.versions.servletApi}.jar",
      "jakarta.xml.bind-api-4.0.0.jar",
      "javax.inject-1.jar",
      "jaxb-core-${project.versions.jaxb}.jar",
      "jaxb-runtime-${project.versions.jaxb}.jar",
      "jcl-over-slf4j-${project.versions.slf4j}.jar",
      "jcommander-${project.versions.jcommander}.jar",
      "jdom2-${project.versions.jdom}.jar",
      "jna-jpms-5.13.0.jar",
      "jna-platform-jpms-5.13.0.jar",
      "joda-time-${project.versions.jodaTime}.jar",
      "jolt-core-${project.versions.jolt}.jar",
      "json-utils-${project.versions.jolt}.jar",
      "jsr305-3.0.2.jar",
      "listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar",
      "logback-classic-${project.versions.logback}.jar",
      "logback-core-${project.versions.logback}.jar",
      "nanohttpd-${project.versions.nanohttpd}.jar",
      "objenesis-${project.versions.objenesis}.jar",
      "org.apache.felix.framework-${project.versions.felix}.jar",
      "oshi-core-java11-${project.versions.oshi}.jar",
      "plugin-metadata-store-${project.version}.jar",
      "quartz-${project.versions.quartz}.jar",
      "semantic-version-${project.versions.semanticVersion}.jar",
      "slf4j-api-${project.versions.slf4j}.jar",
      "spring-aop-${project.versions.spring}.jar",
      "spring-beans-${project.versions.spring}.jar",
      "spring-context-${project.versions.spring}.jar",
      "spring-core-${project.versions.spring}.jar",
      "spring-expression-${project.versions.spring}.jar",
      "spring-tx-${project.versions.spring}.jar",
      "spring-web-${project.versions.spring}.jar",
      "spring-webmvc-${project.versions.spring}.jar",
      "txw2-${project.versions.jaxb}.jar",
      "util-${project.version}.jar"
    ]
  ]
}

task functionalTest(type: Test) {
  description = 'Runs the functional tests.'
  group = 'verification'
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  mustRunAfter test

  reports {
    html.required = true
    junitXml.required = true
  }
}

check.dependsOn(functionalTest)

artifacts {
  fatJarConfig fatJar
}
