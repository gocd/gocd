/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define(['string-plus', 'mithril', 'lodash', 'helpers/form_helper'], function (s, m, _, f) {
  var ComponentMixins = {};

  ComponentMixins.HasViewModel = function () {
    var vm;

    if (this.args && this.args.vm) {
      vm = this.args.vm || {};
      delete this.args.vm;
    }

    vm = vm || {};

    this.vmState = function (key, value) {
      if (!key) {
        return _.merge({}, vm);
      }
      return (vm[key] = vm[key] || value || {});
    };
  };

  ComponentMixins.ManagesCollection = function (options) {
    var associationName                  = options.as;
    var associationNamePlural            = s.camelcase(s.defaultToIfBlank(options.plural, options.as + 's'), true);
    var associationNamePluralCapitalized = s.camelcase(s.defaultToIfBlank(options.plural, options.as + 's'));

    this.add = options.add || function () {
      this.args[associationNamePlural]()['create' + associationName]();
    };

    this.remove = function (thing) {
      this.args[associationNamePlural]()['remove' + associationName](thing);
      this.changed();
    };

    this.last = options.last || function () {
      return this.args[associationNamePlural]()['last' + associationName]();
    };

    this.changed = function () {
      var last = this.last();
      if (!(last && last.isBlank())) {
        this.add();
      }
    };

    this.removeLink = function (thing) {
      if (thing !== this.last()) {
        return (<f.removeButton class='position-remove-button' onclick={this.remove.bind(this, thing)}/>);
      }
    };

    this.map = options.map || function (callback) {
      return this.args[associationNamePlural]()['map' + associationNamePluralCapitalized](function (thing, index) {
        return callback(thing, index);
      });
    };

    options.onInitialize && options.onInitialize.call(this);
  };

  return ComponentMixins;
});
