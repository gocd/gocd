<div id="new_template_container">
    <%= render(:partial => "shared/flash_message") %>
    <%= render :partial => "shared/config_save_actions", :locals => {:scope => {}} -%>
    <%= form_for(@pipeline,
                :as => :pipeline,
                :url => template_create_path,
                :html => {:method => "POST", :onsubmit => "return AjaxForm.jquery_ajax_submit(this);", :class => "popup_form"}) do |f| %>
        <%= md5_field %>
        <div class="form_content">
            <%= render :partial => "admin/shared/global_errors.html", :locals => {:scope => {}} -%>
            <h3>General Options</h3>

            <div class="instructions">
                Provides options to create a new template from scratch or from an existing pipeline
            </div>
            <div class="fieldset required">
                <div class="form_item_block">
                    <%= f.fields_for com.thoughtworks.go.presentation.PipelineTemplateConfigViewModel::TEMPLATE, @pipeline.templateConfig() do |t| %>
                        <%= required_label(t, com.thoughtworks.go.config.PipelineTemplateConfig::NAME, 'Template Name') -%>
                        <%= t.text_field com.thoughtworks.go.config.PipelineTemplateConfig::NAME %>
                        <%= error_message_on(@pipeline.templateConfig(), com.thoughtworks.go.config.PipelineTemplateConfig::NAME, :css_class => "form_error") %>
                    <% end %>
                </div>
                <div class="form_item_block">
                    <%- extract_from = @pipeline.selectedPipelineName() -%>
                    <div class="checkbox_row">
                        <% pipelineEmptyOrPegged = @pipeline.pipelineNames.empty? || ( extract_from && !allow_pipeline_selection?)
                           check_box_options = { :class => "pipeline_to_extract_selector", :include_hidden => false }
                           check_box_label_options = {}
                           if pipelineEmptyOrPegged
                             check_box_options[:disabled] = "disabled"
                             check_box_label_options[:class] = "disabled"
                           end
                           check_box_options[:checked] = "checked" if extract_from
                           use_existing_pipeline_value = extract_from ? "1" : "0"
                        %>

                        <%= f.hidden_field com.thoughtworks.go.presentation.PipelineTemplateConfigViewModel::USE_EXISTING_PIPELINE, :value => use_existing_pipeline_value %>
                        <%= f.check_box com.thoughtworks.go.presentation.PipelineTemplateConfigViewModel::USE_EXISTING_PIPELINE, check_box_options %>

                        <%= f.label com.thoughtworks.go.presentation.PipelineTemplateConfigViewModel::USE_EXISTING_PIPELINE, 'Extract From Pipeline', check_box_label_options %>
                        <% extract_pipeline_tool_tip = if @pipeline.pipelineNames.empty?
                                                        'No pipelines available for extracting template. Either all pipelines use templates already or no pipelines exists.'
                                                      else
                                                        'If a pipeline is not selected, a template with a default stage and default job is created. If a pipeline is selected, the template will use the stages from the pipeline and the pipeline itself will start using this template.'
                                                      end %>
                        <div class="contextual_help has_go_tip_right" title="<%= extract_pipeline_tool_tip -%>"></div>
                    </div>
                    <% if !allow_pipeline_selection? %>
                        <div id="pipelines_to_extract_from">
                            <div class="form_item_block">
                                <%= f.select(com.thoughtworks.go.presentation.PipelineTemplateConfigViewModel::PIPELINE_NAMES, @pipeline.pipelineNames, {:selected => extract_from}, {:disabled => "disabled"}) %>
                                <%= f.hidden_field(com.thoughtworks.go.presentation.PipelineTemplateConfigViewModel::SELECTED_PIPELINE_NAME) %>
                            </div>
                            <div>This pipeline will now start using the newly created template.</div>
                        </div>
                    <% else %>
                        <div id="pipelines_to_extract_from" class='<%= @pipeline.useExistingPipeline ? "" : "hidden" %>'>
                            <div class="form_item_block">
                                <%= f.select(com.thoughtworks.go.presentation.PipelineTemplateConfigViewModel::SELECTED_PIPELINE_NAME, @pipeline.pipelineNames, {:selected => @pipeline.selectedPipelineName()}) %>
                            </div>
                            <div>This pipeline will now start using the newly created template.</div>
                        </div>
                    <% end %>
                </div>
            </div>
			<%= render :partial => "shared/form_required_message.html" %>
        </div>
        <%= render :partial => "shared/form_buttons.html", :locals => {:scope => {:submit_label => "SAVE"}} %>
        <%= render :partial => 'shared/convert_tool_tips.html', :locals => {:scope => {}} %>
    <% end %>
</div>
<script type="text/javascript">
    function isChecked(checkbox) {
        return checkbox.is(':checked');
    }

    function hide() {
        jQuery("#pipelines_to_extract_from").addClass("hidden");
    }

    function show() {
        jQuery("#pipelines_to_extract_from").removeClass("hidden");
    }

    Util.on_load(function() {
        var checkbox = jQuery(".pipeline_to_extract_selector");
        checkbox.click(function() {
            if (isChecked(checkbox)) {
                show();
            } else {
                hide();
            }
        });
    });
</script>
