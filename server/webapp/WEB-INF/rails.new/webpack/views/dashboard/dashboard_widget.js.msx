/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m                   = require('mithril');
const f                   = require('helpers/form_helper');
const Stream              = require('mithril/stream');
const _                   = require('lodash');
const $                   = require('jquery');
const ComponentMixins     = require('helpers/mithril_component_mixins');
const PipelineWidget      = require('views/dashboard/pipeline_widget');
const PersonalizeWidget   = require('views/dashboard/personalize_widget');
const PipelineSelectionVM = require('views/dashboard/models/pipeline_selection_view_model');
const PipelineSelection   = require('models/dashboard/pipeline_selection');
const Routes              = require('gen/js-routes');

const DashboardWidget = {
  oninit(vnode) {
    const self               = vnode.state;
    self.pipelineSelection   = Stream();
    self.pipelineSelectionVM = new PipelineSelectionVM();

    self.searchTextUpdated = (e) => {
      const filterText = e.target.value;
      vnode.attrs.dashboard.searchText(filterText);
    };

    ComponentMixins.HasViewModel.call(self);

    self.togglePersonalizeDropdown = (e) => {
      if (vnode.attrs.vm.personalizeView.isOpen()) {
        self.pipelineSelection(undefined);
      } else {
        PipelineSelection.get().then((selection) => {
          self.pipelineSelection(selection);
          self.pipelineSelectionVM.initialize(selection.pipelineGroups());
        }).then(m.redraw);
      }

      vnode.attrs.vm.personalizeView.toggle();
      e.stopPropagation();
      m.redraw();
    };

    const attachClickEventToBody = () => {
      const body = $("body");
      body.click(() => {
        vnode.attrs.vm.dropdown.hide();
        vnode.attrs.vm.personalizeView.hide();
        m.redraw();
      });
    };

    attachClickEventToBody();
  },

  view(vnode) {
    const args             = vnode.attrs;
    const vm               = args.vm;
    const noPermissionText = "You do not have permission to edit the pipeline group.";

    if (args.showSpinner()) {
      return (<span class="page-spinner"/>);
    }

    let messageView;

    if (!_.isEmpty(vnode.attrs.dashboard.message())) {
      const content = (<h3 class="dashboard-message text-center">{vnode.attrs.dashboard.message().content}</h3>);
      messageView   = (vnode.attrs.dashboard.message().type === 'info')
        ? (<f.info>{content} </f.info>)
        : (<f.alert>{content} </f.alert>);
    }

    let personalizeView;

    if (vm.personalizeView.isOpen()) {
      personalizeView = (<PersonalizeWidget pipelineSelection={vnode.state.pipelineSelection}
                                            doRefreshImmediately={vnode.attrs.doRefreshImmediately}
                                            hideSelectionDropdown={vm.personalizeView.hide}
                                            vm={vnode.state.pipelineSelectionVM}/>);
    }

    let groupByEnvironment;

    if (vm.groupByEnvironment.visible()) {
      groupByEnvironment = <f.checkbox model={vm.groupByEnvironment} attrName="enabled" listener="onclick" label="Group by Environment?" />;
    }

    function renderEnvironments(pipelinesByEnvironment) {
      const envs = Object.keys(pipelinesByEnvironment).sort();

      if (envs.indexOf("*") > -1) {
        envs.splice(envs.indexOf("*"), 1);
        envs.push("*");
      }

      return _.map(envs, (env) => {
        let name, settingsIcon;

        if ("*" === env) {
          name = "(no environment)";
        } else if (args.dashboard.environmentsAdmin()) {
          name         = <a href={Routes.environmentShowPath(env)}>{env}</a>;
          settingsIcon = <a href={Routes.environmentShowPath(env)} class="edit_config dashboard-group_edit-config"/>;
        } else {
          name         = env;
          settingsIcon = <f.link class="edit_config dashboard-group_edit-config disabled"
                                 tooltipText="You do not have permission to edit this environment."/>;
        }

        return (
          <div class="dashboard-group" key={name}>
            <h2 class="dashboard-group_title">
              <span>environment</span>
              <strong>{name}</strong>
              {settingsIcon}
            </h2>
            <ul class="dashboard-group_items">
              {_.map(pipelinesByEnvironment[env], (pipeline) => {
                return (
                  <PipelineWidget pipeline={pipeline}
                                  doCancelPolling={args.doCancelPolling}
                                  doRefreshImmediately={args.doRefreshImmediately}
                                  isQuickEditPageEnabled={args.isQuickEditPageEnabled}
                                  pluginsSupportingAnalytics={args.pluginsSupportingAnalytics}
                                  shouldShowAnalyticsIcon={args.shouldShowAnalyticsIcon}
                                  key={pipeline.name}
                                  vm={vm}/>
                );
              })}
            </ul>
          </div>
        );
      });
    }

    const pipelines = vm.groupByEnvironment.enabled() ?
      renderEnvironments(args.dashboard.getPipelinesByEnvironment()) :
      _.map(args.dashboard.getPipelineGroups(), (pipelineGroup) => {
        let name, settingsIcon;

        if (pipelineGroup.canAdminister) {
          name         = (<a href={pipelineGroup.path}>{pipelineGroup.name}</a>);
          settingsIcon = (<a href={pipelineGroup.editPath} class="edit_config dashboard-group_edit-config"/>);
        } else {
          name         = pipelineGroup.name;
          settingsIcon = (<f.link class="edit_config dashboard-group_edit-config disabled"
                                             tooltipText={noPermissionText}/>);
        }

        return (
          <div class="dashboard-group" key={pipelineGroup.name}>
            <h2 class="dashboard-group_title">
              <span>pipeline group</span>
              <strong>{name}</strong>
              {settingsIcon}
            </h2>
            <ul class="dashboard-group_items">
              {_.map(pipelineGroup.pipelines, (pipelineName) => {
                return (
                  <PipelineWidget pipeline={args.dashboard.findPipeline(pipelineName)}
                                  doCancelPolling={args.doCancelPolling}
                                  doRefreshImmediately={args.doRefreshImmediately}
                                  isQuickEditPageEnabled={args.isQuickEditPageEnabled}
                                  pluginsSupportingAnalytics={args.pluginsSupportingAnalytics}
                                  shouldShowAnalyticsIcon={args.shouldShowAnalyticsIcon}
                                  key={pipelineName}
                                  vm={vm}/>
                );
              })}
            </ul>
          </div>
        );
      });

    return (
      <div class="pipeline_wrapper">
        <div class="page_header" key="page-header">
          <h1 class="page_title">Pipelines</h1>
          <div class="filter">
            <input type="text"
                   class="pipeline-search"
                   value={vnode.attrs.dashboard.searchText()}
                   oninput={vnode.state.searchTextUpdated.bind(vnode.state)}
                   placeholder="Search for pipeline"/>
            <button class="filter_btn"
                    onclick={vnode.state.togglePersonalizeDropdown.bind(vnode.state)}>
              Filter View
            </button>
          </div>
          {personalizeView}
          {groupByEnvironment}
        </div>
        <div class="dashboard" key="dashboard-content">
          {messageView}
          {pipelines}
        </div>
      </div>
    );
  }
};

module.exports = DashboardWidget;
