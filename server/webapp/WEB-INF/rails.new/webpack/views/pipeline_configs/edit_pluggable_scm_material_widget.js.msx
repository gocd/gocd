/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m                    = require('mithril');
const _                    = require('lodash');
const f                    = require('helpers/form_helper');
const SCMs                 = require('models/pipeline_configs/scms');
const Stream               = require('mithril/stream');
const tt                   = require('helpers/pipeline_configs/tooltips');
const Modal                = require('views/shared/new_modal');
const MaterialFilterWidget = require('views/pipeline_configs/material_filter_widget');
const SCMConfigEditWidget  = require('views/pipeline_configs/scm_config_edit_widget');


const EditPluggableSCMMaterialWidget = {
  oninit (vnode) {
    const args = vnode.attrs;
    const self = this;
    this.scm   = Stream();

    SCMs.findById(vnode.attrs.scmId()).then(self.scm).always(m.redraw);

    this.editPluginMetadata = function () {
      const saveButtonClasses = Stream(['save-pipeline']);
      const modalErrors       = Stream([]);
      const scmForEdit        = Stream(self.scm());

      const updateMaterial = function (modal) {
        saveButtonClasses().push('in-progress', 'disabled');
        scmForEdit().update().then((scm) => {
          saveButtonClasses(['save-pipeline', 'success']);
          args.material.scm().reInitialize(JSON.parse(JSON.stringify(scm)));
          modal.destroy();
        }, (data) => {
          modalErrors().push(data.message);

          if (data.data) {
            if (data.data.configuration) {
              modalErrors(_.concat(modalErrors(), _.flattenDeep(_.map(data.data.configuration, (conf) => {
                return _.values(conf.errors);
              }))));
            }
          }
          if (data.data) {
            self.scmForEdit.reInitialize(data.data);
          }
        });
      };

      const modal = new Modal({
        size:    'medium',
        title:   `Edit - ${scmForEdit().name()}`,
        body:    () => (<SCMConfigEditWidget scm={scmForEdit}
                                             pluginInfos={vnode.attrs.pluginInfos}/>),
        buttons: () => [
          {
            text:    'Save',
            class:   saveButtonClasses(),
            onclick: updateMaterial.bind(this, modal, scmForEdit)
          }
        ]
      });

      modal.render();
    };

    this.isPluginMissing = function () {
      return _.isNil(args.pluginInfos().findById(args.material.scm().pluginMetadata().id()));
    };

    this.modalView = function () {
      if (!this.isPluginMissing()) {
        return this.modal.view();
      }
    };
  },

  view (vnode) {
    const ctrl = vnode.state;
    const args = vnode.attrs;
    const scm  = ctrl.scm();

    if (!scm) {
      return <div />; //todo: this should be a page spinner
    }

    ctrl.onunload = function () {
      ctrl.modal.destroy();
    };

    const data = {Name: scm.name(), AutoUpdate: scm.autoUpdate()};

    scm.configuration().mapConfigurations((conf) => {
      data[_.capitalize(conf.key())] = conf.isSecureValue() ? "***********" : conf.value();
    });

    const editButton = ctrl.isPluginMissing() ? (
      <f.alert><b>{scm.pluginMetadata().id()}</b> plugin seems to be removed.</f.alert>)
      : (<f.editButton class={null} onclick={ctrl.editPluginMetadata.bind(ctrl.modal)}/>);

    return (
      <div>
        <div class='pluggable-scm'>
          {editButton}
          <f.row>
            <ul>
              {_.map(data, (v, k) => {
                return (
                  <li>
                    <label class={_.toLower(k)}>{k}</label><span>{v}</span>
                  </li>
                );
              })}
            </ul>
          </f.row>
        </div>
        <f.row>
          <f.inputWithLabel attrName='destination'
                            label="Destination"
                            model={args.material}
                            validate={true}
                            tooltip={{
                              content:   tt.material.destination,
                              direction: 'bottom',
                              size:      'small'
                            }}/>
        </f.row>
        <MaterialFilterWidget material={args.material}/>
      </div>
    );
  }
};

module.exports = EditPluggableSCMMaterialWidget;
