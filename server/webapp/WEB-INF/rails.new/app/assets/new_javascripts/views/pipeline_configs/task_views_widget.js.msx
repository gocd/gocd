/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'jquery', 'angular', 'helpers/form_helper', 'models/pipeline_configs/tasks',
  'models/pipeline_configs/pluggable_tasks', 'js-routes', 'models/pipeline_configs/argument', 'helpers/mithril_component_mixins',
  'views/pipeline_configs/run_if_conditions_widget', 'views/pipeline_configs/task_basic_views_widget', 'views/pipeline_configs/cancel_task_widget',
  'models/pipeline_configs/plugin_infos'
], function (m, _, $, angular, f, Tasks, PluggableTasks, Routes, Argument, ComponentMixins,
             RunIfConditionsWidget, TaskBasicViews, CancelTaskWidget, PluginInfos) {

  var TaskViews = {
    base: {
      controller: function (args) {
        var self = this;
        self.args = args;
        self.task = args.task;
        var vmStateKey = 'taskEdit' + self.task.uuid();

        ComponentMixins.HasViewModel.call(this);
        self.vmState(vmStateKey, m.prop(self.task.isEmpty() ? true : false));

        this.isEditing = function () {
          return self.vmState(vmStateKey)();
        };

        this.toggleIsEditing = function () {
          var isEditing = self.vmState(vmStateKey)();
          self.vmState('taskEdit' + self.task.uuid())(!isEditing);
        };

        this.taskDisplayName = function () {
          return Tasks.isBuiltInTaskType(self.task.type()) ? self.task.type() : PluginInfos.findById(self.task.pluginId()).name();
        }
      },

      view: function (ctrl, args, children) {
        var classNameForTaskBody = function () {
          return ctrl.isEditing() ? 'show' : 'hide';
        };

        return (
          <div class={'task-definition task-type-' + args.task.type()} data-task-index={args.taskIndex}>
            <div>
              <div class="task-header" onclick={ctrl.toggleIsEditing.bind(ctrl)}>
                <strong>{ctrl.taskDisplayName()}</strong>
                <span class='task-type'>{args.task.toString()}</span>
                <div class='actions'>
                  <f.removeButton onclick={args.onRemove} class="remove-task"/>
                  <f.editButton class={ctrl.isEditing() ? 'done' : null}/>
                </div>
              </div>
              <div class={_.compact(["task-body", classNameForTaskBody()]).join(' ')}>
                {children}
                <RunIfConditionsWidget task={args.task}/>
                <CancelTaskWidget task={args.task}/>
              </div>
            </div>
          </div>
        );
      }
    },

    ant: {
      view: function (ctrl, args) {
        return (
          <TaskViews.base {...args}>
            <TaskBasicViews.ant {...args}/>
          </TaskViews.base>
        );
      }
    },

    nant: {
      view: function (ctrl, args) {
        return (
          <TaskViews.base {...args}>
            <TaskBasicViews.nant {...args}/>
          </TaskViews.base>
        );
      }
    },

    exec: {
      view: function (ctrl, args) {
        return (
          <TaskViews.base {...args}>
            <TaskBasicViews.exec {...args}/>
          </TaskViews.base>
        );
      }
    },

    rake: {
      view: function (ctrl, args) {
        return (
          <TaskViews.base {...args}>
            <TaskBasicViews.rake {...args}/>
          </TaskViews.base>
        );
      }
    },

    fetch: {
      view: function (ctrl, args) {
        return (
          <TaskViews.base {...args}>
            <TaskBasicViews.fetchartifact {...args}/>
          </TaskViews.base>
        );
      }
    },

    pluggable_task: {
      view: function (ctrl, args) {
        return (
          <TaskViews.base {...args}>
            <TaskBasicViews.pluggable_task {...args}/>
          </TaskViews.base>
        );
      }
    }
  };
  return TaskViews;
});
