/*
 * Copyright 2019 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import _ from "lodash";
import m from "mithril";
import Sortable from "@shopify/draggable/lib/es5/sortable";
// es5 bundle => IE11 support
import {Editor} from "views/dashboard/personalization_editor";
import {throttleRaf} from "helpers/throttle-raf";

export const SortableViewTabs = {
  oncreate: initSortable,

  view(vnode) {
    const vm    = vnode.attrs.vm;
    const attrs = {
      class:        "dashboard-tabs-sortable",
      "aria-label": "Dashboard Views",
      onscroll:     throttleRaf(() => vm.hideAllDropdowns())
    };

    return m("nav", attrs, _.map(vm.tabs(), (tab) => <ViewTab {...vnode.attrs} key={tab.id} name={tab.name}/>));
  }
};

const ViewTab = {
  view(vnode) {
    const vm      = vnode.attrs.vm;
    const name    = vnode.attrs.name;
    const current = vm.active(name);
    const model   = vm.model;
    const edit    = vm.actionHandler(() => Editor.open(model().namedFilter(name), model, vm));

    function switchTab(e) {
      e.stopPropagation();
      vm.activate(name);
    }

    if (current) {
      vm.currentVnode(vnode);
    }

    return <div class={current ? "dashboard-tab current" : "dashboard-tab"} onclick={current || switchTab}
                data-name={name} aria-label={current ? `'${name}' is selected` : name} title={name} tabIndex="0">
      <i class="icon_drag"/>
      <div class="tab-name" title={name} aria-label={name}>{name}</div>
      <button class="edit-tab" onclick={edit}><i class="icon_edit"/></button>
    </div>;
  }
};

function initSortable(vnode) {
  const vm = vnode.attrs.vm;

  let y0 = 0;

  new Sortable([vnode.dom], {
    draggable: ".dashboard-tab",
    handle:    ".icon_drag",
    // increase delay to 200 (from 100) to reduce accidental drags, but not by enough so as to be annoying
    delay:     200,
    mirror:    {
      constrainDimensions: true,
    }
  }).on("drag:start", (e) => {
    if (vm.names().length < 2) {
      e.cancel();
      return false;
    }

    y0 = e.data.sensorEvent.data.clientY; // save initial y-coord

    if (!vm.stagedSort()) {
      vm.stagedSort(vm.model().filters());
      initSavePopup(vm);
    }

    vm.hideAllDropdowns();
    m.redraw();
  }).on("drag:move", (e) => {
    e.data.sensorEvent.data.clientY = y0; // prevent vertical scrolling; that would reveal the magic trick!
  }).on("sortable:stop", (e) => {
    vm.stagedSort().moveFilterByIndex(e.data.oldIndex, e.data.newIndex);
    m.redraw();
  });
}

function initSavePopup(vm) {
  const onreset = () => {
    vm.stagedSort(null);
    vm.actionPopup(null);
    m.redraw();
    vm.onchange();
  };

  const onsave = () => {
    vm.model().updateFilters(vm.stagedSort(), vm.etag()).done((data) => {
      vm.names(vm.model().names());
      vm.checksum(data.contentHash);
      onreset();
    }).fail((xhr) => {
      vm.actionPopup({
        class:   "personalization-update-failed",
        body:    <span class="server-error-response">
          <i class="icon_alert"></i>
          <span class="reason">{JSON.parse(xhr.responseText).message}</span>
        </span>,
        onabort: onreset,
        buttons: [{class: "btn-secondary", text: "Revert", onclick: onreset}]
      });

      m.redraw();
    });
  };

  vm.actionPopup({
    class:   "save-tab-order-confirmation",
    body:    <span class="save-tab-order-message">Save view order?</span>,
    onabort: onreset,
    buttons: [
      {class: "btn-link", text: "Revert", onclick: onreset},
      {class: "btn-primary", text: "Save", onclick: onsave}
    ]
  });
}
