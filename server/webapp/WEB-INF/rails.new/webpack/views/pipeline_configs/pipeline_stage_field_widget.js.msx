/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let m = require('mithril');

const Stream = require('mithril/stream');
const _      = require('lodash');
const $      = require('jquery');
const s      = require('string-plus');
require('jquery-textcomplete');

const PipelineStageFieldWidget = {
  textComplete (attrName, values) {
    return function (elem, isInitialized, context) {
      if (!isInitialized) {
        const $inputElem = $(elem).find(`input[name='${  attrName  }']`);

        context.onunload = function () {
          $inputElem.textcomplete('destroy');
        };

        $inputElem.textcomplete([
          {
            words: values,
            match: /(^|,)\s*([^,]+)$/,
            index: 2,
            search (term, callback) {
              term = term.toLowerCase();
              callback($.map(this.words, (word) => {
                return word.toLowerCase().indexOf(term) === 0 ? word : null;
              }));
            },
            replace (word) {
              return word;
            }
          }
        ]);
      }
    };
  },

  vm (material) {
    const PIPELINE_STAGE_PATTERN = /^(.+) \[(.+)\]$/;
    this.material                = material;
    this.errors                  = [];

    this.getPipelineStage = function () {
      if (this.material.pipeline() && this.material.stage()) {
        return _.join([this.material.pipeline(), ' ', '[', this.material.stage(), ']'], '');
      }
      return '';
    };

    this.pipelineStage = Stream(this.getPipelineStage());

    this.setPipelineStage = function (e) {
      const target = (e || event).target;
      this.pipelineStage(target.value || target.getAttribute('value'));
      this.validate();

      const match = PIPELINE_STAGE_PATTERN.exec(this.pipelineStage());

      match ? this.material.pipeline(match[1]) : this.material.pipeline('');
      match ? this.material.stage(match[2]) : this.material.stage('');
    };

    this.validate = function () {
      this.errors = [];
      this.material.errors().clear();

      if (s.isBlank(this.pipelineStage())) {
        return;
      }

      if (!PIPELINE_STAGE_PATTERN.test(this.pipelineStage())) {
        this.errors.push(_.join(["'", this.pipelineStage(), "'", " ", "should conform to the pattern 'pipeline [stage]'"], ''));
      }
    };

    this.hasErrors = function () {
      return (!_.isEmpty(this.errors) || !_.isEmpty(this.material.errors().errors()));
    };

    this.errorsForDisplay = function () {
      return !_.isEmpty(this.errors) ? this.errors : _.values(this.material.errors().errors()).join(". ");
    };
  },

  oninit (vnode) {
    vnode.state.vm = new PipelineStageFieldWidget.vm(vnode.attrs.material);

    vnode.state.pipelineStages = function () {
      const pipelines = _.filter(vnode.attrs.pipelines(), (pipeline) => {
        return pipeline.name !== vnode.attrs.pipelineName();
      });

      const data = _.map(pipelines, (pipeline) => {
        return _.map(pipeline.stages, (stage) => {
          return _.join([pipeline.name, ' ', '[', stage.name, ']'], '');
        });
      });

      return _.flattenDeep(data);
    };
  },

  view (vnode) {
    const propertyError = vnode.state.vm.hasErrors() ? (
      <span class='form-error is-visible'>{vnode.state.vm.errorsForDisplay()}</span>) : undefined;

    return (
      <div
        config={PipelineStageFieldWidget.textComplete('pipeline-stage', vnode.state.pipelineStages())}>
        <label>Pipeline [Stage]
          <span class='asterisk'>*</span>
        </label>
        <input type='text'
               name='pipeline-stage'
               autocomplete="off"
               autocapitalize="off"
               autocorrect="off"
               spellcheck="off"
               value={vnode.state.vm.pipelineStage()}
               onblur={vnode.state.vm.setPipelineStage.bind(vnode.state.vm)}/>
        {propertyError}
      </div>
    );
  }
};

module.exports = PipelineStageFieldWidget;
