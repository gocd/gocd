# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby18 < Parser::Base


  def version
    18
  end

  def default_encoding
    Encoding::BINARY if defined? Encoding
  end
##### State transition tables begin ###

clist = [
'-480,195,196,195,196,489,814,-480,-480,-480,511,578,578,-480,-480,-80',
'-480,431,579,579,489,558,531,-87,558,-480,502,489,-86,95,503,-429,395',
'195,196,-480,-480,-82,-480,-480,-480,-480,-480,489,489,495,463,496,-84',
'-83,-81,659,658,662,661,557,186,-61,557,713,291,291,187,-480,-480,-480',
'-480,-480,-480,-480,-480,-480,-480,-480,-480,-480,-480,-80,-87,-480',
'-480,-480,259,546,530,722,-74,-480,188,99,-480,291,-86,621,98,-480,-69',
'-480,189,-480,-480,-480,-480,-480,-480,-480,-277,-480,-480,-480,190',
'-476,510,-277,-277,-277,99,-72,488,-277,-277,98,-277,-480,-480,-79,-75',
'234,-480,-83,-78,99,99,488,621,-76,98,98,99,-74,488,-277,-277,98,-277',
'-277,-277,-277,-277,-74,-76,-75,-73,690,99,99,488,488,621,98,98,-85',
'606,558,496,258,259,-74,691,-277,-277,-277,-277,-277,-277,-277,-277',
'-277,-277,-277,-277,-277,-277,259,558,-277,-277,-277,-74,549,99,-74',
'620,-277,72,98,-277,557,-76,-82,194,-277,73,-277,521,-277,-277,-277',
'-277,-277,-277,-277,-272,-277,-84,-277,-76,282,557,-272,-272,-272,814',
'-477,-272,-272,-272,254,-272,-277,-277,99,-77,620,-277,-85,98,-76,-272',
'-272,-76,195,196,-79,254,-473,-87,-272,-272,258,-272,-272,-272,-272',
'-272,99,99,620,284,285,98,98,521,-77,523,522,258,659,658,662,661,461',
'462,283,673,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272',
'-272,-272,291,-474,-272,-272,-272,-417,99,-272,768,349,-272,98,-417',
'-272,-272,-429,-272,-473,-272,361,-272,-417,-272,-272,-272,-272,-272',
'-272,-272,-226,-272,463,-272,523,522,519,-226,-226,-226,-473,541,-226',
'-226,-226,-480,-226,-272,-272,-272,-272,-421,-272,521,251,-81,-226,192',
'-421,-72,394,252,-80,-474,193,-226,-226,-421,-226,-226,-226,-226,-226',
'191,-417,-78,477,-480,-86,476,-476,-417,396,-226,-74,-474,521,-82,542',
'680,-226,-226,-226,397,-480,-226,-226,-226,-421,-226,-477,-480,426,358',
'-226,-421,-476,360,359,-226,-480,-226,521,523,522,524,254,-226,-226',
'-226,521,-226,-226,-226,-226,-226,-480,428,-480,-476,-480,-76,-73,-480',
'-84,-81,-476,-427,-476,-226,431,-476,-480,-319,-427,-476,523,522,526',
'-477,-319,477,215,-226,479,-226,-477,-226,-226,-319,-480,-477,99,-476',
'-226,-477,436,98,-426,254,-226,391,523,522,527,-426,195,196,392,-480',
'523,522,532,-477,212,99,-480,393,214,213,98,-476,-226,-425,655,-480',
'653,652,651,654,-425,-476,-476,-476,-60,-476,-226,99,-226,-476,-476',
'-226,98,-480,-476,451,-476,-476,-476,-476,-476,-476,-476,477,195,196',
'482,-476,-476,-476,-476,-476,-476,-476,215,734,606,-422,-423,659,658',
'662,661,-476,-422,-423,-476,-476,-476,-476,-476,-476,-476,-476,-476',
'-476,-424,-476,-476,-476,-476,-476,-428,-424,662,661,212,457,516,-428',
'214,213,210,211,458,517,477,452,-428,479,453,-476,692,456,-476,-476',
'459,-476,-476,734,606,-476,-271,-476,263,-476,291,-476,655,-271,653',
'652,651,654,254,-476,464,465,-271,215,-476,-476,-476,-476,-476,-476',
'471,472,291,-476,-476,-477,-477,-477,215,-477,481,484,-83,-477,-477',
'351,500,501,-477,645,-477,-477,-477,-477,-477,-477,-477,659,658,662',
'661,-477,-477,-477,-477,-477,-477,-477,215,535,212,536,538,-259,214',
'213,540,-477,254,215,-477,-477,-477,-477,-477,-477,-477,-477,-477,-477',
'215,-477,-477,-477,-477,-477,466,215,215,568,212,498,575,467,214,213',
'210,211,499,291,580,234,393,590,591,-477,549,497,-477,-477,-69,-477',
'-477,592,469,-477,507,-477,606,-477,291,-477,655,505,653,652,651,654',
'616,-477,496,624,506,672,-477,-477,-477,-477,-477,-477,675,-278,436',
'-477,-477,62,63,64,-278,51,436,693,-85,56,57,704,431,-278,60,431,58',
'59,61,23,24,65,66,659,658,662,661,22,28,27,88,87,89,90,667,668,17,669',
'93,94,243,537,707,41,708,715,92,91,82,50,84,83,86,85,93,94,717,80,81',
'38,39,37,215,219,224,225,226,221,223,231,232,227,228,-278,208,209,-279',
'721,229,230,-278,200,254,-279,204,254,215,52,53,-278,215,54,-279,724',
'212,-259,218,40,214,213,210,211,222,220,216,18,217,728,730,606,79,72',
'74,75,76,77,738,739,740,73,78,743,99,233,745,-215,-277,98,62,63,64,7',
'51,-277,749,753,56,57,-477,755,758,60,-277,58,59,61,23,24,65,66,759',
'760,761,763,22,28,27,88,87,89,90,-260,769,17,101,102,103,104,105,6,41',
'8,9,92,91,82,50,84,83,86,85,93,94,-277,80,81,38,39,37,-428,-277,823',
'777,-271,-278,-477,-428,-279,824,-277,-271,-278,778,568,-279,-428,568',
'822,36,-271,-278,30,254,-279,52,53,254,234,54,-277,32,568,790,791,40',
'655,-277,653,652,651,654,-477,18,792,797,-277,799,79,72,74,75,76,77',
'805,807,291,73,78,62,63,64,818,51,825,351,826,56,57,827,829,830,60,645',
'58,59,61,246,247,65,66,659,658,662,661,245,275,279,88,87,89,90,101,102',
'103,104,105,832,835,839,840,276,846,847,92,91,82,50,84,83,86,85,93,94',
'848,80,81,758,758,280,215,219,224,225,226,221,223,231,232,227,228,759',
'-497,-497,861,568,229,230,568,772,471,874,204,875,876,52,53,880,883',
'54,758,885,212,886,218,568,214,213,210,211,222,220,216,568,217,568,',
',79,72,74,75,76,77,,,,73,78,,62,63,64,775,51,,,,56,57,,,,60,,58,59,61',
'246,247,65,66,,,,,245,275,279,88,87,89,90,101,102,103,104,105,,,537',
',276,,,92,91,82,50,84,83,86,85,93,94,,80,81,,,280,215,219,224,225,226',
'221,223,231,232,227,228,,208,209,,,229,230,,772,,,204,,,52,53,,,54,',
',212,,218,,214,213,210,211,222,220,216,,217,,,,79,72,74,75,76,77,,,',
'73,78,,,233,,855,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66',
',,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85',
'93,94,,80,81,38,39,37,215,219,224,225,226,221,223,231,232,227,228,,-497',
'-497,,,229,230,,36,,,30,,,52,53,,,54,,32,212,,218,40,214,213,210,211',
'222,220,216,18,217,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,',
'56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,',
',6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,215,-497,-497',
'-497,-497,221,223,,,-497,-497,,,,,,229,230,,36,,,265,,,52,53,,,54,,32',
'212,,218,40,214,213,210,211,222,220,216,18,217,,,,79,72,74,75,76,77',
',,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22',
'28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,',
'80,81,38,39,37,215,,,,,,,,,,,,,,,,229,230,,36,,,30,,,52,53,,,54,,32',
'212,,218,40,214,213,210,211,,,216,18,217,,,,79,72,74,75,76,77,,,,73',
'78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27',
'88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81',
'38,39,37,215,,,,,,,,,,,,,,,,229,230,,36,,,30,,,52,53,,,54,,32,212,,218',
'40,214,213,210,211,,,216,18,217,,,,79,72,74,75,76,77,,,,73,78,5,62,63',
'64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90',
',,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,215',
',,,,,,,,,,,,,,,229,230,,36,,,30,,,52,53,,,54,,32,212,,218,40,214,213',
'210,211,,,216,18,217,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,',
',,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,',
',,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,215,,,,,,',
',,,,,,,,,229,230,,36,,,30,,,52,53,,,54,,32,212,,218,40,214,213,210,211',
',,216,18,217,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57',
',,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41',
'8,9,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,215,-497,-497,-497',
'-497,221,223,,,-497,-497,,,,,,229,230,,36,,,265,,,52,53,,,54,,32,212',
',218,40,214,213,210,211,222,220,216,18,217,,,,79,72,74,75,76,77,,,,73',
'78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27',
'88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81',
'38,39,37,215,-497,-497,-497,-497,221,223,,,-497,-497,,,,,,229,230,,36',
',,265,,,52,53,,,54,,32,212,,218,40,214,213,210,211,222,220,216,18,217',
',,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59',
'61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82',
'50,84,83,86,85,93,94,,80,81,38,39,37,215,-497,-497,-497,-497,221,223',
',,-497,-497,,,,,,229,230,,36,,,30,,,52,53,,,54,,32,212,,218,40,214,213',
'210,211,222,220,216,18,217,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64',
'7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,',
',17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,215',
'-497,-497,-497,-497,221,223,,,-497,-497,,,,,,229,230,,36,,,30,,,52,53',
',,54,,32,212,,218,40,214,213,210,211,222,220,216,18,217,,,,79,72,74',
'75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65',
'66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86',
'85,93,94,,80,81,38,39,37,215,-497,-497,-497,-497,221,223,,,-497,-497',
',,,,,229,230,,36,,,30,,,52,53,,,54,,32,212,,218,40,214,213,210,211,222',
'220,216,18,217,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57',
',,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41',
'8,9,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,215,219,224,225,226',
'221,223,,,227,228,,,,,,229,230,,36,,,30,,,52,53,,,54,,32,212,,218,40',
'214,213,210,211,222,220,216,18,217,,,,79,72,74,75,76,77,,,,73,78,5,62',
'63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89',
'90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37',
'215,219,224,225,226,221,223,231,,227,228,,,,,,229,230,,36,,,30,,,52',
'53,,,54,,32,212,,218,40,214,213,210,211,222,220,216,18,217,,,,79,72',
'74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24',
'65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83',
'86,85,93,94,,80,81,38,39,37,215,,,,,,,,,,,,,,,,229,230,,36,,,30,,,52',
'53,,,54,,32,212,,218,40,214,213,210,211,,,,18,,,,,79,72,74,75,76,77',
',,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22',
'28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,',
'80,81,38,39,37,215,,,,,,,,,,,,,,,,229,230,,36,,,30,,,52,53,,,54,,32',
'212,,218,40,214,213,210,211,,,,18,,,,,79,72,74,75,76,77,,,,73,78,5,62',
'63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89',
'90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37',
'215,,,,,,,,,,,,,,,,229,230,,36,,,30,,,52,53,,,54,,32,212,,,40,214,213',
'210,211,,,,18,,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57',
',,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41',
'8,9,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,',
',36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73',
'78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27',
'88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81',
'38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18',
',,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59',
'61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82',
'50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52',
'53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64',
'7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,',
',17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,',
',,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72,74',
'75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65',
'66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86',
'85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32',
',,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56',
'57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6',
'41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,',
',,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,',
',,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22',
'28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,',
'80,81,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,',
',,,,18,,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60',
',58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92',
'91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30',
',,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,5,62',
'63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89',
'90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37',
',,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72',
'74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24',
'65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83',
'86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54',
',32,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,',
',,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,',
',,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,',
',,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72,74,75,76',
'77,,,,73,78,5,62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,',
',22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93',
'94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40',
',,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,5,62,63,64,7,51,,,,56,57,,',
',60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8',
'9,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,36',
',,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78',
'62,63,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87',
'89,90,,,17,,,,,,6,41,8,9,92,91,82,50,84,83,86,85,93,94,,80,81,38,39',
'37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79',
'72,74,75,76,77,,,,73,78,153,164,154,177,150,170,160,159,180,181,175',
'158,157,152,178,182,183,162,151,165,169,171,163,156,,,172,179,174,173',
'166,176,161,149,168,167,,,,,,148,155,146,147,144,145,109,111,108,,110',
',,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,,141,142,129,130,,',
',,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119,,,143,79',
',,,,,,,,,78,153,164,154,177,150,170,160,159,180,181,175,158,157,152',
'178,182,183,162,151,165,169,171,163,156,,,172,179,174,173,166,176,161',
'149,168,167,,,,,,148,155,146,147,144,145,109,111,,,110,,,,,,,139,140',
',137,121,122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134',
'133,,120,138,136,135,131,132,127,125,118,,119,,,143,79,,,62,63,64,,51',
',,78,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17',
',,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,',
',,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72,74,75,76',
'77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22',
'28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81',
'38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207',
',,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61',
'246,247,65,66,,,,,245,28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84',
'83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53',
',,54,,241,,243,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64',
',51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90',
',,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,',
',,,,,,,,,,,200,,,204,,,52,53,,,54,,241,,243,,40,,,,,,,,207,,,,,79,72',
'74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65',
'66,,,,,245,28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93',
'94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,241,,243',
',40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,-249,-249,-249,,-249,',
',,-249,-249,,,,-249,,-249,-249,-249,-249,-249,-249,-249,,,,,-249,-249',
'-249,-249,-249,-249,-249,,,,,,,,,,-249,,,-249,-249,-249,-249,-249,-249',
'-249,-249,-249,-249,,-249,-249,-249,-249,-249,,,,,,,,,,,,,,,,,,,,-249',
',,-249,254,,-249,-249,,,-249,,-249,,-249,,-249,,,,,,,,-249,,,,,-249',
'-249,-249,-249,-249,-249,,,,-249,-249,-249,-249,-249,,-249,,,,-249,-249',
',,,-249,,-249,-249,-249,-249,-249,-249,-249,,,,,-249,-249,-249,-249',
'-249,-249,-249,,,,,,,,,,-249,,,-249,-249,-249,-249,-249,-249,-249,-249',
'-249,-249,,-249,-249,-249,-249,-249,,,,,,,,,,,,,,,,,,,,-249,,,-249,263',
',-249,-249,,,-249,,-249,,-249,,-249,,,,,,,,-249,,,,,-249,-249,-249,-249',
'-249,-249,,,,-249,-249,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247',
'65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91,82,50,84,83,86',
'85,93,94,,80,81,,,280,,215,219,224,225,226,221,223,231,232,227,228,',
'208,209,,,229,230,273,,,270,,,52,53,,,54,,269,,212,,218,,214,213,210',
'211,222,220,216,,217,,,79,72,74,75,76,77,,,,73,78,62,63,64,233,51,568',
',,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,',
',,,,,,,276,,,92,91,82,50,84,83,86,85,93,94,,80,81,,,280,,215,219,224',
'225,226,221,223,231,232,227,228,,208,209,,,229,230,273,,,204,,,52,53',
',,54,,,,212,,218,,214,213,210,211,222,220,216,,217,,,79,72,74,75,76',
'77,,,,73,78,62,63,64,233,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,',
',,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93',
'94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40',
',,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60',
',58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92',
'91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,',
'204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62',
'63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88',
'87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37',
',,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79',
'72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24',
'65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86',
'85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,',
',,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57',
',,,60,,58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90,,,,,,,,,,41',
',,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200',
',,204,,,52,53,,,54,,299,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73',
'78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279',
'88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39',
'37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,',
'79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23',
'24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83',
'86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54',
',,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56',
'57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41',
',,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200',
',,204,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78',
'62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279',
'88,87,89,90,,,,,,,,,,276,,,92,91,82,50,84,83,86,85,93,94,,80,81,,,280',
',215,219,224,225,226,221,223,231,232,227,228,,208,209,,,229,230,315',
',,30,,,52,53,,,54,,32,,212,,218,,214,213,210,211,222,220,216,,217,,',
'79,72,74,75,76,77,,,,73,78,62,63,64,233,51,,,,56,57,,,,60,,58,59,61',
'246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91,320,50',
'84,83,321,85,93,94,,80,81,,,280,,215,219,224,225,226,221,223,231,232',
'227,228,,208,209,,327,229,230,322,,,204,,,52,53,,,54,,,,212,,218,,214',
'213,210,211,222,220,216,,217,,,79,72,74,75,76,77,,,,73,78,62,63,64,233',
'51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90',
',,,,,,,,,276,,,92,91,320,50,84,83,321,85,93,94,,80,81,,,280,,215,219',
'224,225,226,221,223,231,232,227,228,,208,209,,,229,230,322,,,204,,,52',
'53,,,54,,,,212,,218,,214,213,210,211,222,220,216,,217,,,79,72,74,75',
'76,77,,,,73,78,-473,-473,-473,233,-473,,,,-473,-473,,,,-473,,-473,-473',
'-473,-473,-473,-473,-473,,-473,,,-473,-473,-473,-473,-473,-473,-473',
',,,,,,,,,-473,,,-473,-473,-473,-473,-473,-473,-473,-473,-473,-473,,-473',
'-473,-473,-473,-473,,,,,,,,,,,,,,,,,,,,-473,,,-473,-473,,-473,-473,',
',-473,,-473,,-473,,-473,,,,,,,,-473,,-473,,,-473,-473,-473,-473,-473',
'-473,,,,-473,-473,-474,-474,-474,,-474,,,,-474,-474,,,,-474,,-474,-474',
'-474,-474,-474,-474,-474,,-474,,,-474,-474,-474,-474,-474,-474,-474',
',,,,,,,,,-474,,,-474,-474,-474,-474,-474,-474,-474,-474,-474,-474,,-474',
'-474,-474,-474,-474,,,,,,,,,,,,,,,,,,,,-474,,,-474,-474,,-474,-474,',
',-474,,-474,,-474,,-474,,,,,,,,-474,,-474,,,-474,-474,-474,-474,-474',
'-474,,,,-474,-474,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66',
',,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93',
'94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40',
',,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60',
',58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91',
'82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204',
',,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63',
'64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90',
',,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,',
',,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72,74,75',
'76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,',
',22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94',
',80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,',
',,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,7,51,,,,56,57,,,,60',
',58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,6,41,8,9,92',
'91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30',
',,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63',
'64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90',
',,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,',
',,,,,,,,,,,200,,,204,,,52,53,,,54,,369,,,,40,,,,,,,,207,,,,,79,72,74',
'75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66',
',,,,22,28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94',
',80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,369,,,,40',
',,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60',
',58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82',
'50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,',
'52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64',
',51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90',
',,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,',
',,,,,,,,,,,200,,,204,,,52,53,,,54,,299,,,,40,,,,,,,,207,,,,,79,72,74',
'75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66',
',,,,22,28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94',
',80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,',
',,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60',
',58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91',
'82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204',
',,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63',
'64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90',
',,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,',
',,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72,74,75',
'76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,',
',,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93',
'94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40',
',,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60',
',58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92',
'91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,',
'204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62',
'63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88',
'87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37',
',,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79',
'72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247',
'65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86',
'85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,',
',,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56',
'57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,',
',,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,',
',,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77',
',,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245',
'275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80',
'81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,',
',207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58',
'59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91',
'82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204',
',,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63',
'64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87',
'89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,',
',,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72',
'74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65',
'66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85',
'93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,',
',40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57',
',,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41',
',,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200',
',,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78',
'62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279',
'88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39',
'37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,',
'79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246',
'247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83',
'86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54',
',,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56',
'57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,',
',,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,',
',,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77',
',,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245',
'275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80',
'81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,',
',207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58',
'59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91',
'82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204',
',,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63',
'64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87',
'89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,',
',,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72',
'74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65',
'66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85',
'93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,',
',40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57',
',,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41',
',,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200',
',,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78',
'62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279',
'88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39',
'37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,',
'79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246',
'247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83',
'86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54',
',,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56',
'57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,',
',,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,',
',,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77',
',,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245',
'275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80',
'81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,',
',207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58',
'59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91',
'82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204',
',,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63',
'64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87',
'89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,',
',,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72',
'74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65',
'66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85',
'93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,',
',40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57',
',,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41',
',,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200',
',,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78',
'62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279',
'88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39',
'37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,',
'79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246',
'247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83',
'86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54',
',,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56',
'57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,',
',,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,',
',,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77',
',,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245',
'28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81',
'38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,241,,243,,40,,,',
',,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,',
'58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90,,,,,,,,,,41,,,92,91',
'82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204',
',,445,53,,,54,,241,,243,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78',
'62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,28,27,88',
'87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37',
',,,,,,,,,,,,,,,,,,,200,,,204,,449,52,53,,,54,,241,,243,,40,,,,,,,,207',
',,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61',
'246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91,82,50',
'84,83,86,85,93,94,,80,81,,,280,,215,219,224,225,226,221,223,231,232',
'227,228,,208,209,,,229,230,273,,,204,,,52,53,,,54,,,,212,,218,,214,213',
'210,211,222,220,216,,217,,,79,72,74,75,76,77,,,,73,78,62,63,64,233,51',
',,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,',
',,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,',
',,,,,,,,,,200,,,204,469,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74',
'75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66',
',,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93',
'94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40',
',,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60',
',58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91',
'82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204',
',,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63',
'64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90',
',,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,',
',,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72,74,75',
'76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,',
',22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94',
',80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,',
',,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,',
'58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91',
'82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204',
',,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,153,164',
'154,177,150,170,160,159,180,181,175,158,157,152,178,182,183,162,151',
'165,169,171,163,156,,,172,179,174,173,166,176,161,149,168,167,,,,,,148',
'155,146,147,144,145,109,111,,,110,,,,,,,139,140,,137,121,122,123,,126',
'128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120,138,136,135',
'131,132,127,125,118,,119,,,143,79,,,62,63,64,,51,,,78,56,57,,,,60,,58',
'59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91',
'82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204',
',,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,-249',
'-249,-249,,-249,,,,-249,-249,,,,-249,,-249,-249,-249,-249,-249,-249',
'-249,,,,,-249,-249,-249,-249,-249,-249,-249,,,,,,,,,,-249,,,-249,-249',
'-249,-249,-249,-249,-249,-249,-249,-249,,-249,-249,-249,-249,-249,,',
',,,,,,,,,,,,,,,,,-249,,,-249,254,,-249,-249,,,-249,,-249,,-249,,-249',
',,,,,,,-249,,,,,-249,-249,-249,-249,-249,-249,,,,-249,-249,-478,-478',
'-478,,-478,,,,-478,-478,,,,-478,,-478,-478,-478,-478,-478,-478,-478',
',,,,-478,-478,-478,-478,-478,-478,-478,,,,,,,,,,-478,,,-478,-478,-478',
'-478,-478,-478,-478,-478,-478,-478,,-478,-478,-478,-478,-478,,,,,,,',
',,,,,,,,,,,,-478,,,-478,-478,,-478,-478,,,-478,,-478,,-478,,-478,,,',
',,,,-478,,,,,-478,-478,-478,-478,-478,-478,,,,-478,-478,-479,-479,-479',
',-479,,,,-479,-479,,,,-479,,-479,-479,-479,-479,-479,-479,-479,,,,,-479',
'-479,-479,-479,-479,-479,-479,,,,,,,,,,-479,,,-479,-479,-479,-479,-479',
'-479,-479,-479,-479,-479,,-479,-479,-479,-479,-479,,,,,,,,,,,,,,,,,',
',,-479,,,-479,-479,,-479,-479,,,-479,,-479,,-479,,-479,,,,,,,,-479,',
',,,-479,-479,-479,-479,-479,-479,,,,-479,-479,62,63,64,,51,,,,56,57',
',,,60,,58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90,,,,,,,,,,41',
',,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200',
',,204,,,52,53,,,54,,299,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73',
'78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279',
'88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39',
'37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,',
'79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246',
'247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83',
'86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54',
',,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56',
'57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,',
',,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,',
',,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77',
',,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245',
'275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80',
'81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,560,,243,,40',
',,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60',
',58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92',
'91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,',
'204,,,52,53,,,54,,564,,243,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73',
'78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279',
'88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39',
'37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,',
'79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23',
'24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83',
'86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54',
',584,,243,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51',
',,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90,,,',
',,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,',
',,,,,,,,200,,,204,,,52,53,,,54,,299,,,,40,,,,,,,,207,,,,,79,72,74,75',
'76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,',
',,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93',
'94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40',
',,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60',
',58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92',
'91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,',
'204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62',
'63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88',
'87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37',
',,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79',
'72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24',
'65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86',
'85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,',
',,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57',
',,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41',
',,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200',
',,204,,,52,53,,,54,,369,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73',
'78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279',
'88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39',
'37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,612,,,,40,,,,,,,,207,',
',,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61',
'246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50',
'84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52',
'53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,',
'51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90',
',,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,',
',,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75',
'76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,',
',,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93',
'94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,628,,',
',40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57',
',,,60,,58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90,,,,,,,,,,41',
',,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200',
',,204,,,52,53,,,54,,299,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73',
'78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,28,27',
'88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39',
'37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,299,,,,40,,,,,,,,207,',
',,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61',
'23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41,,,92,91,82,50,84',
'83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53',
',,54,,,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78,153,164,154,177',
'150,170,160,159,180,181,175,158,157,152,178,182,183,162,151,165,169',
'171,163,156,,,172,179,174,173,166,176,161,149,168,167,,,,,,148,155,146',
'147,144,145,109,111,,,110,,,,,,,139,140,,137,121,122,123,,126,128,,',
'124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120,138,136,135,131,132',
'127,125,118,,119,,,143,79,,,62,63,64,,51,,,78,56,57,,,,60,,58,59,61',
'246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50',
'84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52',
'53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,',
'51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90',
',,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,',
',,,,,,,,,,,200,,,204,,,52,53,,,54,,679,,,,40,,,,,,,,207,,,,,79,72,74',
'75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66',
',,,,22,28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94',
',80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,',
',,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60',
',58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82',
'50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,',
'52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64',
',51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,',
',,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,',
',,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76',
'77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,',
'245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94',
',80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,',
',,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60',
',58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92',
'91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,',
'204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62',
'63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88',
'87,89,90,,,,,,,,,,276,,,92,91,82,50,84,83,86,85,93,94,,80,81,,,280,',
',,,,,,,,,,,,,,,,,,273,,,270,,,52,53,,,54,,697,,698,,,,,,,,,699,,,,,',
'79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246',
'247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83',
'86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54',
',,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56',
'57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,',
',,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,',
',,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77',
',,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245',
'28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81',
'38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,560,,243,,40,,,',
',,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,',
'58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92',
'91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,',
'204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62',
'63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88',
'87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37',
',,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79',
'72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247',
'65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86',
'85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,',
',,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56',
'57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88,87,89,90,,,17,,,,,,,41',
',,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200',
',,204,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79,72,74,75,76,77,,,,73,78',
'62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279',
'88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39',
'37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,',
'79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,23',
'24,65,66,,,,,22,28,27,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86',
'85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,',
',,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56',
'57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,',
',,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,',
',,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77',
',,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245',
'275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80',
'81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,',
',207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58',
'59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91',
'82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204',
',,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63',
'64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87',
'89,90,,,,,,,,,,276,,,92,91,82,50,84,83,86,85,93,94,,80,81,,,280,,215',
'219,224,225,226,221,223,231,232,227,228,,208,209,,,229,230,772,,,204',
',,52,53,,,54,,,,212,,218,,214,213,210,211,222,220,216,,217,,,79,72,74',
'75,76,77,,,,73,78,62,63,64,233,51,,,,56,57,,,,60,,58,59,61,246,247,65',
'66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85',
'93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,780',
',243,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56',
'57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,',
',,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,',
',,,,200,,,204,,,52,53,,,54,,786,,243,,40,,,,,,,,207,,,,,79,72,74,75',
'76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,',
',,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93',
'94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,788,,243',
',40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57',
',,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276',
',,92,91,82,50,84,83,86,85,93,94,,80,81,,,280,,215,219,224,225,226,221',
'223,231,232,227,228,,208,209,,,229,230,772,,,204,,,52,53,,,54,,,,212',
',218,,214,213,210,211,222,220,216,,217,,,79,72,74,75,76,77,,,,73,78',
'62,63,64,233,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,88',
'87,89,90,,,17,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39',
'37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,79',
'72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247',
'65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86',
'85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,',
'802,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,',
'56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,',
',,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,',
',,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76',
'77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,',
'245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94',
',80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,',
',,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60',
',58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92',
'91,82,50,84,83,86,85,93,94,,80,81,,,280,,,,,,,,,,,,,,,,,,,,273,,,270',
',,52,53,,,54,,821,,820,,,,,,,,,,,,,,,79,72,74,75,76,77,,,,73,78,62,63',
'64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87',
'89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,',
',,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72',
'74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65',
'66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85',
'93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,',
',40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57',
',,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41',
',,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200',
',,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78',
'62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279',
'88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39',
'37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,',
'79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246',
'247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91,82,50,84',
'83,86,85,93,94,,80,81,,,280,,215,219,224,225,226,221,223,231,232,227',
'228,,208,209,,,229,230,772,,,204,,,52,53,,,54,,,,212,,218,,214,213,210',
'211,222,220,216,,217,,,79,72,74,75,76,77,,,,73,78,62,63,64,233,51,,',
',56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,28,27,88,87,89,90,,,,,',
',,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,',
',,,,,,200,,,204,,,52,53,,,54,,299,,,,40,,,,,,,,207,,,,,79,72,74,75,76',
'77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,',
'245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91,82,50,84,83,86,85,93,94',
',80,81,,,280,,215,219,224,225,226,221,223,231,232,227,228,,208,209,',
',229,230,772,,,204,,,52,53,,,54,,,,212,,218,,214,213,210,211,222,220',
'216,,217,,,79,72,74,75,76,77,,,,73,78,62,63,64,233,51,,,,56,57,,,,60',
',58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92',
'91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,',
'204,,,52,53,,,54,,864,,243,,40,,,,,,,,207,,,,,79,72,74,75,76,77,,,,73',
'78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279',
'88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39',
'37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,867,,243,,40,,,,,,,,207',
',,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61',
'246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91,82,50',
'84,83,86,85,93,94,,80,81,,,280,,215,219,224,225,226,221,223,231,232',
'227,228,,208,209,,,229,230,772,,,204,,,52,53,,,54,,,,212,,218,,214,213',
'210,211,222,220,216,,217,,,79,72,74,75,76,77,,,,73,78,62,63,64,233,51',
',,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,',
',,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,',
',,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75',
'76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,',
',,,245,275,279,88,87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93',
'94,,80,81,38,39,37,,,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40',
',,,,,,,207,,,,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60',
',58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92',
'91,82,50,84,83,86,85,93,94,,80,81,,,280,,215,219,224,225,226,221,223',
'231,232,227,228,,208,209,,,229,230,772,,,204,,,52,53,,,54,,,,212,,218',
',214,213,210,211,222,220,216,,217,,,79,72,74,75,76,77,,,,73,78,62,63',
'64,233,51,,,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88',
'87,89,90,,,,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37',
',,,,,,,,,,,,,,,,,,,200,,,204,,,52,53,,,54,,889,,243,,40,,,,,,,,207,',
',,,79,72,74,75,76,77,,,,73,78,62,63,64,,51,,,,56,57,,,,60,,58,59,61',
'246,247,65,66,,,,,245,275,279,88,87,89,90,,,,,,,,,,276,,,92,91,82,50',
'84,83,86,85,93,94,,80,81,,,280,,215,219,224,225,226,221,223,231,232',
'227,228,,208,209,,,229,230,772,,,204,,,52,53,,,54,,,,212,,218,,214,213',
'210,211,222,220,216,,217,,,79,72,74,75,76,77,,,,73,78,62,63,64,233,51',
',,,56,57,,,,60,,58,59,61,246,247,65,66,,,,,245,275,279,88,87,89,90,',
',,,,,,,,41,,,92,91,82,50,84,83,86,85,93,94,,80,81,38,39,37,,,,,,,,,',
',,,,,,,,,,200,,,204,,,52,53,,,54,,,,,,40,,,,,,,,207,,,,,79,72,74,75',
'76,77,,,,73,78,153,164,154,177,150,170,160,159,180,181,175,158,157,152',
'178,182,183,162,151,165,169,171,163,156,,,172,179,174,336,335,337,334',
'149,168,167,,,,,,148,155,146,147,332,333,330,111,84,83,331,85,,,,,,139',
'140,,137,121,122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,341,,,',
',,,,134,133,,120,138,136,135,131,132,127,125,118,,119,,,143,153,164',
'154,177,150,170,160,159,180,181,175,158,157,152,178,182,183,162,151',
'165,169,171,163,156,,,172,179,174,173,166,176,161,149,168,167,,,,,,148',
'155,146,147,144,145,109,111,,,110,,,,,,,139,140,,137,121,122,123,,126',
'128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120,138,136,135',
'131,132,127,125,118,,119,,,143,215,219,224,225,226,221,223,231,232,227',
'228,,208,209,,,229,230,,,,-215,,,,,,,,,,,212,,218,,214,213,210,211,222',
'220,216,,217,,,,,,,,,,,,,,,,,233,,-215,215,219,224,225,226,221,223,231',
'232,227,228,,208,209,,,229,230,,,,,,,,,,,,,,,212,,218,,214,213,210,211',
'222,220,216,,217,,,,,,,,376,379,,,377,,,,,233,556,139,140,,137,121,122',
'123,,126,128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120,138',
'136,135,131,132,127,125,118,,119,381,385,143,,383,,,,,,,139,140,,137',
'121,122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133',
',120,138,136,135,131,132,127,125,118,,119,433,379,143,,434,,,,,,,139',
'140,,137,121,122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,,,,,,,',
',134,133,,120,138,136,135,131,132,127,125,118,,119,433,379,143,,434',
',,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,,141,142,129,130,,',
',,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119,550,379',
'143,,551,,,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,,141,142,129',
'130,,,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119,552',
'385,143,,553,,,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,,141,142',
'129,130,,,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119',
'594,379,143,,595,,,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,,141',
'142,129,130,,,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118',
',119,597,385,143,,598,,,,,,,139,140,,137,121,122,123,,126,128,,,124',
',,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127',
'125,118,,119,550,379,143,,551,,,,,,,139,140,,137,121,122,123,,126,128',
',,124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120,138,136,135,131',
'132,127,125,118,,119,552,385,143,,553,,,,,,,139,140,,137,121,122,123',
',126,128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120,138,136',
'135,131,132,127,125,118,,119,,,143,215,219,224,225,226,221,223,231,232',
'227,228,,208,209,,,229,230,,,,,,,,,,,,,,,212,,218,,214,213,210,211,222',
'220,216,,217,,,,,,,630,379,,,631,,,,,291,233,139,140,,137,121,122,123',
',126,128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120,138,136',
'135,131,132,127,125,118,,119,632,385,143,,633,,,,,,,139,140,,137,121',
'122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134,133,,120',
'138,136,135,131,132,127,125,118,,119,635,385,143,,636,,,,,,,139,140',
',137,121,122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,,,,,,,,,134',
'133,,120,138,136,135,131,132,127,125,118,,119,433,379,143,,434,,,,,',
',139,140,,137,121,122,123,,126,128,,,124,,,,,141,142,129,130,,,,,,,',
',,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119,433,379,143',
',434,,,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,,141,142,129,130',
',,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119,433,379',
'143,,434,,,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,,141,142,129',
'130,,,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119,',
',143,215,219,224,225,226,221,223,231,232,227,228,,208,209,,,229,230',
',,,,,,,,,,,,,,212,,218,,214,213,210,211,222,220,216,,217,,215,219,224',
'225,226,221,223,231,232,227,228,,208,209,291,233,229,230,,,,,,,,,,,',
',,,212,,218,,214,213,210,211,222,220,216,,217,,,,857,379,,,858,,,,,',
',139,140,233,137,121,122,123,,126,128,,,124,,,,,141,142,129,130,,,,',
',,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119,859,385,143',
',860,,,,,,,139,140,,137,121,122,123,,126,128,,,124,,,,,141,142,129,130',
',,,,,,,,,,,,,134,133,,120,138,136,135,131,132,127,125,118,,119,,,143' ]
        racc_action_table = arr = ::Array.new(24137, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'381,512,512,518,518,306,755,381,381,381,326,440,711,381,381,313,381',
'582,440,711,307,424,347,316,446,381,322,627,500,1,322,199,201,603,603',
'381,381,630,381,381,381,381,381,727,798,311,394,311,631,632,743,755',
'755,755,755,424,8,591,446,582,440,711,9,381,381,381,381,381,381,381',
'381,381,381,381,381,381,381,199,201,381,381,381,55,381,347,603,594,381',
'10,512,381,518,394,491,512,381,591,381,11,381,381,381,381,381,381,381',
'383,381,381,381,12,632,326,383,383,383,306,313,306,383,383,306,383,381',
'381,316,381,20,381,381,500,307,326,307,492,595,307,326,627,630,627,383',
'383,627,383,383,383,383,383,594,631,632,743,550,727,798,727,798,744',
'727,798,633,803,447,803,55,26,594,551,383,383,383,383,383,383,383,383',
'383,383,383,383,383,383,277,574,383,383,383,594,383,491,594,491,383',
'70,491,383,447,595,550,14,383,70,383,528,383,383,383,383,383,383,383',
'50,383,551,383,595,34,574,50,50,50,848,633,50,50,50,26,50,383,383,492',
'383,492,383,383,492,595,50,50,595,15,15,14,277,320,14,50,50,26,50,50',
'50,50,50,744,3,744,37,37,744,3,343,633,528,528,277,848,848,848,848,280',
'280,36,528,50,50,50,50,50,50,50,50,50,50,50,50,50,50,41,321,50,50,50',
'320,310,50,693,95,50,310,320,50,50,35,50,320,50,184,50,320,50,50,50',
'50,50,50,50,432,50,283,50,343,343,343,432,432,432,320,376,432,432,432',
'597,432,50,50,50,50,321,50,344,25,693,432,13,321,35,200,25,35,321,13',
'432,432,321,432,432,432,432,432,13,330,283,297,635,283,297,857,330,202',
'435,376,321,345,376,377,540,435,435,435,203,597,435,435,435,331,435',
'858,597,239,108,432,331,597,108,108,435,597,432,346,344,344,344,432',
'432,435,435,348,435,435,435,435,435,635,240,597,857,859,377,540,635',
'377,540,857,332,635,432,244,857,635,42,332,857,345,345,345,858,42,298',
'400,432,298,432,858,435,432,42,635,858,511,857,435,858,253,511,333,435',
'435,198,346,346,346,333,294,294,198,859,348,348,348,858,400,640,859',
'198,400,400,640,859,435,334,645,859,645,645,645,645,334,552,552,552',
'264,552,435,646,435,552,552,435,646,859,552,266,552,552,552,552,552',
'552,552,301,305,305,301,552,552,552,552,552,552,552,419,615,615,335',
'336,645,645,645,645,552,335,336,552,552,552,552,552,552,552,552,552',
'552,337,552,552,552,552,552,271,337,758,758,419,272,339,271,419,419',
'419,419,272,339,303,267,271,303,268,552,552,272,552,552,273,552,552',
'870,870,552,274,552,275,552,276,552,514,274,514,514,514,514,279,552',
'284,285,274,288,552,552,552,552,552,552,292,293,296,552,552,553,553',
'553,401,553,300,302,552,553,553,312,315,317,553,514,553,553,553,553',
'553,553,553,514,514,514,514,553,553,553,553,553,553,553,420,362,401',
'363,368,371,401,401,375,553,382,402,553,553,553,553,553,553,553,553',
'553,553,403,553,553,553,553,553,286,404,405,429,420,314,438,286,420',
'420,420,420,314,439,441,442,286,448,450,553,553,314,553,553,451,553',
'553,455,460,553,324,553,470,553,473,553,753,324,753,753,753,753,487',
'553,493,494,324,526,553,553,553,553,553,553,531,459,543,553,553,60,60',
'60,459,60,547,554,553,60,60,561,563,459,60,566,60,60,60,60,60,60,60',
'753,753,753,753,60,60,60,60,60,60,60,522,522,60,522,522,522,568,366',
'576,60,577,583,60,60,60,60,60,60,60,60,60,60,586,60,60,60,60,60,366',
'366,366,366,366,366,366,366,366,366,366,503,366,366,721,593,366,366',
'503,60,596,721,60,599,601,60,60,503,602,60,721,604,366,607,366,60,366',
'366,366,366,366,366,366,60,366,608,611,617,60,60,60,60,60,60,623,625',
'626,60,60,629,60,366,638,366,598,60,97,97,97,97,97,598,643,647,97,97',
'598,648,649,97,598,97,97,97,97,97,97,97,655,660,663,665,97,97,97,97',
'97,97,97,678,696,97,4,4,4,4,4,97,97,97,97,97,97,97,97,97,97,97,97,97',
'97,636,97,97,97,97,97,770,636,771,700,773,825,636,770,876,771,636,773',
'825,701,702,876,770,705,771,97,773,825,97,709,876,97,97,710,712,97,860',
'97,716,718,719,97,817,860,817,817,817,817,860,97,720,732,860,735,97',
'97,97,97,97,97,746,750,751,97,97,697,697,697,764,697,772,97,774,697',
'697,775,782,783,697,817,697,697,697,697,697,697,697,817,817,817,817',
'697,697,697,697,697,697,697,106,106,106,106,106,784,787,800,801,697',
'806,808,697,697,697,697,697,697,697,697,697,697,809,697,697,810,813',
'697,398,398,398,398,398,398,398,398,398,398,398,814,398,398,826,833',
'398,398,836,697,837,854,697,855,856,697,697,865,871,697,872,873,398',
'874,398,878,398,398,398,398,398,398,398,881,398,892,,,697,697,697,697',
'697,697,,,,697,697,,821,821,821,697,821,,,,821,821,,,,821,,821,821,821',
'821,821,821,821,,,,,821,821,821,821,821,821,821,350,350,350,350,350',
',,555,,821,,,821,821,821,821,821,821,821,821,821,821,,821,821,,,821',
'555,555,555,555,555,555,555,555,555,555,555,,555,555,,,555,555,,821',
',,821,,,821,821,,,821,,,555,,555,,555,555,555,555,555,555,555,,555,',
',,821,821,821,821,821,821,,,,821,821,,,555,,821,0,0,0,0,0,0,,,,0,0,',
',,0,,0,0,0,0,0,0,0,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0,0',
'0,0,0,,0,0,0,0,0,399,399,399,399,399,399,399,399,399,399,399,,399,399',
',,399,399,,0,,,0,,,0,0,,,0,,0,399,,399,0,399,399,399,399,399,399,399',
'0,399,,,,0,0,0,0,0,0,,,,0,0,30,30,30,30,30,30,,,,30,30,,,,30,,30,30',
'30,30,30,30,30,,,,,30,30,30,30,30,30,30,,,30,,,,,,30,30,30,30,30,30',
'30,30,30,30,30,30,30,30,,30,30,30,30,30,409,409,409,409,409,409,409',
',,409,409,,,,,,409,409,,30,,,30,,,30,30,,,30,,30,409,,409,30,409,409',
'409,409,409,409,409,30,409,,,,30,30,30,30,30,30,,,,30,30,51,51,51,51',
'51,51,,,,51,51,,,,51,,51,51,51,51,51,51,51,,,,,51,51,51,51,51,51,51',
',,51,,,,,,51,51,51,51,51,51,51,51,51,51,51,51,51,51,,51,51,51,51,51',
'410,,,,,,,,,,,,,,,,410,410,,51,,,51,,,51,51,,,51,,51,410,,410,51,410',
'410,410,410,,,410,51,410,,,,51,51,51,51,51,51,,,,51,51,186,186,186,186',
'186,186,,,,186,186,,,,186,,186,186,186,186,186,186,186,,,,,186,186,186',
'186,186,186,186,,,186,,,,,,186,186,186,186,186,186,186,186,186,186,186',
'186,186,186,,186,186,186,186,186,411,,,,,,,,,,,,,,,,411,411,,186,,,186',
',,186,186,,,186,,186,411,,411,186,411,411,411,411,,,411,186,411,,,,186',
'186,186,186,186,186,,,,186,186,187,187,187,187,187,187,,,,187,187,,',
',187,,187,187,187,187,187,187,187,,,,,187,187,187,187,187,187,187,,',
'187,,,,,,187,187,187,187,187,187,187,187,187,187,187,187,187,187,,187',
'187,187,187,187,412,,,,,,,,,,,,,,,,412,412,,187,,,187,,,187,187,,,187',
',187,412,,412,187,412,412,412,412,,,412,187,412,,,,187,187,187,187,187',
'187,,,,187,187,204,204,204,204,204,204,,,,204,204,,,,204,,204,204,204',
'204,204,204,204,,,,,204,204,204,204,204,204,204,,,204,,,,,,204,204,204',
'204,204,204,204,204,204,204,204,204,204,204,,204,204,204,204,204,413',
',,,,,,,,,,,,,,,413,413,,204,,,204,,,204,204,,,204,,204,413,,413,204',
'413,413,413,413,,,413,204,413,,,,204,204,204,204,204,204,,,,204,204',
'265,265,265,265,265,265,,,,265,265,,,,265,,265,265,265,265,265,265,265',
',,,,265,265,265,265,265,265,265,,,265,,,,,,265,265,265,265,265,265,265',
'265,265,265,265,265,265,265,,265,265,265,265,265,414,414,414,414,414',
'414,414,,,414,414,,,,,,414,414,,265,,,265,,,265,265,,,265,,265,414,',
'414,265,414,414,414,414,414,414,414,265,414,,,,265,265,265,265,265,265',
',,,265,265,270,270,270,270,270,270,,,,270,270,,,,270,,270,270,270,270',
'270,270,270,,,,,270,270,270,270,270,270,270,,,270,,,,,,270,270,270,270',
'270,270,270,270,270,270,270,270,270,270,,270,270,270,270,270,415,415',
'415,415,415,415,415,,,415,415,,,,,,415,415,,270,,,270,,,270,270,,,270',
',270,415,,415,270,415,415,415,415,415,415,415,270,415,,,,270,270,270',
'270,270,270,,,,270,270,486,486,486,486,486,486,,,,486,486,,,,486,,486',
'486,486,486,486,486,486,,,,,486,486,486,486,486,486,486,,,486,,,,,,486',
'486,486,486,486,486,486,486,486,486,486,486,486,486,,486,486,486,486',
'486,416,416,416,416,416,416,416,,,416,416,,,,,,416,416,,486,,,486,,',
'486,486,,,486,,486,416,,416,486,416,416,416,416,416,416,416,486,416',
',,,486,486,486,486,486,486,,,,486,486,490,490,490,490,490,490,,,,490',
'490,,,,490,,490,490,490,490,490,490,490,,,,,490,490,490,490,490,490',
'490,,,490,,,,,,490,490,490,490,490,490,490,490,490,490,490,490,490,490',
',490,490,490,490,490,417,417,417,417,417,417,417,,,417,417,,,,,,417',
'417,,490,,,490,,,490,490,,,490,,490,417,,417,490,417,417,417,417,417',
'417,417,490,417,,,,490,490,490,490,490,490,,,,490,490,495,495,495,495',
'495,495,,,,495,495,,,,495,,495,495,495,495,495,495,495,,,,,495,495,495',
'495,495,495,495,,,495,,,,,,495,495,495,495,495,495,495,495,495,495,495',
'495,495,495,,495,495,495,495,495,418,418,418,418,418,418,418,,,418,418',
',,,,,418,418,,495,,,495,,,495,495,,,495,,495,418,,418,495,418,418,418',
'418,418,418,418,495,418,,,,495,495,495,495,495,495,,,,495,495,513,513',
'513,513,513,513,,,,513,513,,,,513,,513,513,513,513,513,513,513,,,,,513',
'513,513,513,513,513,513,,,513,,,,,,513,513,513,513,513,513,513,513,513',
'513,513,513,513,513,,513,513,513,513,513,421,421,421,421,421,421,421',
',,421,421,,,,,,421,421,,513,,,513,,,513,513,,,513,,513,421,,421,513',
'421,421,421,421,421,421,421,513,421,,,,513,513,513,513,513,513,,,,513',
'513,559,559,559,559,559,559,,,,559,559,,,,559,,559,559,559,559,559,559',
'559,,,,,559,559,559,559,559,559,559,,,559,,,,,,559,559,559,559,559,559',
'559,559,559,559,559,559,559,559,,559,559,559,559,559,422,422,422,422',
'422,422,422,422,,422,422,,,,,,422,422,,559,,,559,,,559,559,,,559,,559',
'422,,422,559,422,422,422,422,422,422,422,559,422,,,,559,559,559,559',
'559,559,,,,559,559,588,588,588,588,588,588,,,,588,588,,,,588,,588,588',
'588,588,588,588,588,,,,,588,588,588,588,588,588,588,,,588,,,,,,588,588',
'588,588,588,588,588,588,588,588,588,588,588,588,,588,588,588,588,588',
'406,,,,,,,,,,,,,,,,406,406,,588,,,588,,,588,588,,,588,,588,406,,406',
'588,406,406,406,406,,,,588,,,,,588,588,588,588,588,588,,,,588,588,589',
'589,589,589,589,589,,,,589,589,,,,589,,589,589,589,589,589,589,589,',
',,,589,589,589,589,589,589,589,,,589,,,,,,589,589,589,589,589,589,589',
'589,589,589,589,589,589,589,,589,589,589,589,589,407,,,,,,,,,,,,,,,',
'407,407,,589,,,589,,,589,589,,,589,,589,407,,407,589,407,407,407,407',
',,,589,,,,,589,589,589,589,589,589,,,,589,589,606,606,606,606,606,606',
',,,606,606,,,,606,,606,606,606,606,606,606,606,,,,,606,606,606,606,606',
'606,606,,,606,,,,,,606,606,606,606,606,606,606,606,606,606,606,606,606',
'606,,606,606,606,606,606,408,,,,,,,,,,,,,,,,408,408,,606,,,606,,,606',
'606,,,606,,606,408,,,606,408,408,408,408,,,,606,,,,,606,606,606,606',
'606,606,,,,606,606,639,639,639,639,639,639,,,,639,639,,,,639,,639,639',
'639,639,639,639,639,,,,,639,639,639,639,639,639,639,,,639,,,,,,639,639',
'639,639,639,639,639,639,639,639,639,639,639,639,,639,639,639,639,639',
',,,,,,,,,,,,,,,,,,,639,,,639,,,639,639,,,639,,639,,,,639,,,,,,,,639',
',,,,639,639,639,639,639,639,,,,639,639,644,644,644,644,644,644,,,,644',
'644,,,,644,,644,644,644,644,644,644,644,,,,,644,644,644,644,644,644',
'644,,,644,,,,,,644,644,644,644,644,644,644,644,644,644,644,644,644,644',
',644,644,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644,644,,,644,,644',
',,,644,,,,,,,,644,,,,,644,644,644,644,644,644,,,,644,644,671,671,671',
'671,671,671,,,,671,671,,,,671,,671,671,671,671,671,671,671,,,,,671,671',
'671,671,671,671,671,,,671,,,,,,671,671,671,671,671,671,671,671,671,671',
'671,671,671,671,,671,671,671,671,671,,,,,,,,,,,,,,,,,,,,671,,,671,,',
'671,671,,,671,,671,,,,671,,,,,,,,671,,,,,671,671,671,671,671,671,,,',
'671,671,706,706,706,706,706,706,,,,706,706,,,,706,,706,706,706,706,706',
'706,706,,,,,706,706,706,706,706,706,706,,,706,,,,,,706,706,706,706,706',
'706,706,706,706,706,706,706,706,706,,706,706,706,706,706,,,,,,,,,,,',
',,,,,,,,706,,,706,,,706,706,,,706,,706,,,,706,,,,,,,,706,,,,,706,706',
'706,706,706,706,,,,706,706,724,724,724,724,724,724,,,,724,724,,,,724',
',724,724,724,724,724,724,724,,,,,724,724,724,724,724,724,724,,,724,',
',,,,724,724,724,724,724,724,724,724,724,724,724,724,724,724,,724,724',
'724,724,724,,,,,,,,,,,,,,,,,,,,724,,,724,,,724,724,,,724,,724,,,,724',
',,,,,,,724,,,,,724,724,724,724,724,724,,,,724,724,736,736,736,736,736',
'736,,,,736,736,,,,736,,736,736,736,736,736,736,736,,,,,736,736,736,736',
'736,736,736,,,736,,,,,,736,736,736,736,736,736,736,736,736,736,736,736',
'736,736,,736,736,736,736,736,,,,,,,,,,,,,,,,,,,,736,,,736,,,736,736',
',,736,,736,,,,736,,,,,,,,736,,,,,736,736,736,736,736,736,,,,736,736',
'737,737,737,737,737,737,,,,737,737,,,,737,,737,737,737,737,737,737,737',
',,,,737,737,737,737,737,737,737,,,737,,,,,,737,737,737,737,737,737,737',
'737,737,737,737,737,737,737,,737,737,737,737,737,,,,,,,,,,,,,,,,,,,',
'737,,,737,,,737,737,,,737,,737,,,,737,,,,,,,,737,,,,,737,737,737,737',
'737,737,,,,737,737,741,741,741,741,741,741,,,,741,741,,,,741,,741,741',
'741,741,741,741,741,,,,,741,741,741,741,741,741,741,,,741,,,,,,741,741',
'741,741,741,741,741,741,741,741,741,741,741,741,,741,741,741,741,741',
',,,,,,,,,,,,,,,,,,,741,,,741,,,741,741,,,741,,741,,,,741,,,,,,,,741',
',,,,741,741,741,741,741,741,,,,741,741,748,748,748,748,748,748,,,,748',
'748,,,,748,,748,748,748,748,748,748,748,,,,,748,748,748,748,748,748',
'748,,,748,,,,,,748,748,748,748,748,748,748,748,748,748,748,748,748,748',
',748,748,748,748,748,,,,,,,,,,,,,,,,,,,,748,,,748,,,748,748,,,748,,748',
',,,748,,,,,,,,748,,,,,748,748,748,748,748,748,,,,748,748,794,794,794',
'794,794,794,,,,794,794,,,,794,,794,794,794,794,794,794,794,,,,,794,794',
'794,794,794,794,794,,,794,,,,,,794,794,794,794,794,794,794,794,794,794',
'794,794,794,794,,794,794,794,794,794,,,,,,,,,,,,,,,,,,,,794,,,794,,',
'794,794,,,794,,794,,,,794,,,,,,,,794,,,,,794,794,794,794,794,794,,,',
'794,794,838,838,838,838,838,838,,,,838,838,,,,838,,838,838,838,838,838',
'838,838,,,,,838,838,838,838,838,838,838,,,838,,,,,,838,838,838,838,838',
'838,838,838,838,838,838,838,838,838,,838,838,838,838,838,,,,,,,,,,,',
',,,,,,,,838,,,838,,,838,838,,,838,,838,,,,838,,,,,,,,838,,,,,838,838',
'838,838,838,838,,,,838,838,845,845,845,845,845,845,,,,845,845,,,,845',
',845,845,845,845,845,845,845,,,,,845,845,845,845,845,845,845,,,845,',
',,,,845,845,845,845,845,845,845,845,845,845,845,845,845,845,,845,845',
'845,845,845,,,,,,,,,,,,,,,,,,,,845,,,845,,,845,845,,,845,,845,,,,845',
',,,,,,,845,,,,,845,845,845,845,845,845,,,,845,845,852,852,852,852,852',
'852,,,,852,852,,,,852,,852,852,852,852,852,852,852,,,,,852,852,852,852',
'852,852,852,,,852,,,,,,852,852,852,852,852,852,852,852,852,852,852,852',
'852,852,,852,852,852,852,852,,,,,,,,,,,,,,,,,,,,852,,,852,,,852,852',
',,852,,852,,,,852,,,,,,,,852,,,,,852,852,852,852,852,852,,,,852,852',
'5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5',
'5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,',
'5,,5,,,,5,,,,,,,,5,,,,,5,5,5,5,5,5,,,,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6',
'6,6,6,6,6,6,6,6,6,6,6,,,6,6,6,6,6,6,6,6,6,6,,,,,,6,6,6,6,6,6,6,6,6,',
'6,,,,,,,6,6,,6,6,6,6,,6,6,,,6,,,,,6,6,6,6,,,,,,,,,,,,,,6,6,,6,6,6,6',
'6,6,6,6,6,,6,,,6,6,,,,,,,,,,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7',
'7,7,7,7,7,,,7,7,7,7,7,7,7,7,7,7,,,,,,7,7,7,7,7,7,7,7,,,7,,,,,,,7,7,',
'7,7,7,7,,7,7,,,7,,,,,7,7,7,7,,,,,,,,,,,,,,7,7,,7,7,7,7,7,7,7,7,7,,7',
',,7,7,,,17,17,17,,17,,,7,17,17,,,,17,,17,17,17,17,17,17,17,,,,,17,17',
'17,17,17,17,17,,,17,,,,,,,17,,,17,17,17,17,17,17,17,17,17,17,,17,17',
'17,17,17,,,,,,,,,,,,,,,,,,,,17,,,17,,,17,17,,,17,,,,,,17,,,,,,,,17,',
',,,17,17,17,17,17,17,,,,17,17,18,18,18,,18,,,,18,18,,,,18,,18,18,18',
'18,18,18,18,,,,,18,18,18,18,18,18,18,,,,,,,,,,18,,,18,18,18,18,18,18',
'18,18,18,18,,18,18,18,18,18,,,,,,,,,,,,,,,,,,,,18,,,18,,,18,18,,,18',
',,,,,18,,,,,,,,18,,,,,18,18,18,18,18,18,,,,18,18,22,22,22,,22,,,,22',
'22,,,,22,,22,22,22,22,22,22,22,,,,,22,22,22,22,22,22,22,,,,,,,,,,22',
',,22,22,22,22,22,22,22,22,22,22,,22,22,22,22,22,,,,,,,,,,,,,,,,,,,,22',
',,22,,,22,22,,,22,,22,,22,,22,,,,,,,,22,,,,,22,22,22,22,22,22,,,,22',
'22,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,23,23,23,23',
'23,23,23,,,,,,,,,,23,,,23,23,23,23,23,23,23,23,23,23,,23,23,23,23,23',
',,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,23,,23,,23,,,,,,,,23,,,,,23',
'23,23,23,23,23,,,,23,23,24,24,24,,24,,,,24,24,,,,24,,24,24,24,24,24',
'24,24,,,,,24,24,24,24,24,24,24,,,,,,,,,,24,,,24,24,24,24,24,24,24,24',
'24,24,,24,24,24,24,24,,,,,,,,,,,,,,,,,,,,24,,,24,,,24,24,,,24,,24,,24',
',24,,,,,,,,24,,,,,24,24,24,24,24,24,,,,24,24,27,27,27,,27,,,,27,27,',
',,27,,27,27,27,27,27,27,27,,,,,27,27,27,27,27,27,27,,,,,,,,,,27,,,27',
'27,27,27,27,27,27,27,27,27,,27,27,27,27,27,,,,,,,,,,,,,,,,,,,,27,,,27',
'27,,27,27,,,27,,27,,27,,27,,,,,,,,27,,,,,27,27,27,27,27,27,,,,27,27',
'28,28,28,,28,,,,28,28,,,,28,,28,28,28,28,28,28,28,,,,,28,28,28,28,28',
'28,28,,,,,,,,,,28,,,28,28,28,28,28,28,28,28,28,28,,28,28,28,28,28,,',
',,,,,,,,,,,,,,,,,28,,,28,28,,28,28,,,28,,28,,28,,28,,,,,,,,28,,,,,28',
'28,28,28,28,28,,,,28,28,31,31,31,,31,,,,31,31,,,,31,,31,31,31,31,31',
'31,31,,,,,31,31,31,31,31,31,31,,,,,,,,,,31,,,31,31,31,31,31,31,31,31',
'31,31,,31,31,,,31,,828,828,828,828,828,828,828,828,828,828,828,,828',
'828,,,828,828,31,,,31,,,31,31,,,31,,31,,828,,828,,828,828,828,828,828',
'828,828,,828,,,31,31,31,31,31,31,,,,31,31,32,32,32,828,32,828,,,32,32',
',,,32,,32,32,32,32,32,32,32,,,,,32,32,32,32,32,32,32,,,,,,,,,,32,,,32',
'32,32,32,32,32,32,32,32,32,,32,32,,,32,,19,19,19,19,19,19,19,19,19,19',
'19,,19,19,,,19,19,32,,,32,,,32,32,,,32,,,,19,,19,,19,19,19,19,19,19',
'19,,19,,,32,32,32,32,32,32,,,,32,32,38,38,38,19,38,,,,38,38,,,,38,,38',
'38,38,38,38,38,38,,,,,38,38,38,38,38,38,38,,,,,,,,,,38,,,38,38,38,38',
'38,38,38,38,38,38,,38,38,38,38,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38',
',,38,,,,,,38,,,,,,,,38,,,,,38,38,38,38,38,38,,,,38,38,39,39,39,,39,',
',,39,39,,,,39,,39,39,39,39,39,39,39,,,,,39,39,39,39,39,39,39,,,,,,,',
',,39,,,39,39,39,39,39,39,39,39,39,39,,39,39,39,39,39,,,,,,,,,,,,,,,',
',,,,39,,,39,,,39,39,,,39,,,,,,39,,,,,,,,39,,,,,39,39,39,39,39,39,,,',
'39,39,40,40,40,,40,,,,40,40,,,,40,,40,40,40,40,40,40,40,,,,,40,40,40',
'40,40,40,40,,,,,,,,,,40,,,40,40,40,40,40,40,40,40,40,40,,40,40,40,40',
'40,,,,,,,,,,,,,,,,,,,,40,,,40,,,40,40,,,40,,,,,,40,,,,,,,,40,,,,,40',
'40,40,40,40,40,,,,40,40,52,52,52,,52,,,,52,52,,,,52,,52,52,52,52,52',
'52,52,,,,,52,52,52,52,52,52,52,,,52,,,,,,,52,,,52,52,52,52,52,52,52',
'52,52,52,,52,52,52,52,52,,,,,,,,,,,,,,,,,,,,52,,,52,,,52,52,,,52,,,',
',,52,,,,,,,,52,,,,,52,52,52,52,52,52,,,,52,52,53,53,53,,53,,,,53,53',
',,,53,,53,53,53,53,53,53,53,,,,,53,53,53,53,53,53,53,,,,,,,,,,53,,,53',
'53,53,53,53,53,53,53,53,53,,53,53,53,53,53,,,,,,,,,,,,,,,,,,,,53,,,53',
',,53,53,,,53,,53,,,,53,,,,,,,,53,,,,,53,53,53,53,53,53,,,,53,53,54,54',
'54,,54,,,,54,54,,,,54,,54,54,54,54,54,54,54,,,,,54,54,54,54,54,54,54',
',,,,,,,,,54,,,54,54,54,54,54,54,54,54,54,54,,54,54,54,54,54,,,,,,,,',
',,,,,,,,,,,54,,,54,,,54,54,,,54,,,,,,54,,,,,,,,54,,,,,54,54,54,54,54',
'54,,,,54,54,56,56,56,,56,,,,56,56,,,,56,,56,56,56,56,56,56,56,,,,,56',
'56,56,56,56,56,56,,,56,,,,,,,56,,,56,56,56,56,56,56,56,56,56,56,,56',
'56,56,56,56,,,,,,,,,,,,,,,,,,,,56,,,56,,,56,56,,,56,,,,,,56,,,,,,,,56',
',,,,56,56,56,56,56,56,,,,56,56,57,57,57,,57,,,,57,57,,,,57,,57,57,57',
'57,57,57,57,,,,,57,57,57,57,57,57,57,,,57,,,,,,,57,,,57,57,57,57,57',
'57,57,57,57,57,,57,57,57,57,57,,,,,,,,,,,,,,,,,,,,57,,,57,,,57,57,,',
'57,,,,,,57,,,,,,,,57,,,,,57,57,57,57,57,57,,,,57,57,61,61,61,,61,,,',
'61,61,,,,61,,61,61,61,61,61,61,61,,,,,61,61,61,61,61,61,61,,,,,,,,,',
'61,,,61,61,61,61,61,61,61,61,61,61,,61,61,,,61,,237,237,237,237,237',
'237,237,237,237,237,237,,237,237,,,237,237,61,,,61,,,61,61,,,61,,61',
',237,,237,,237,237,237,237,237,237,237,,237,,,61,61,61,61,61,61,,,,61',
'61,62,62,62,237,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,62,62,62',
'62,62,62,62,,,,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,,62,62,,,62',
',374,374,374,374,374,374,374,374,374,374,374,,374,374,,62,374,374,62',
',,62,,,62,62,,,62,,,,374,,374,,374,374,374,374,374,374,374,,374,,,62',
'62,62,62,62,62,,,,62,62,63,63,63,374,63,,,,63,63,,,,63,,63,63,63,63',
'63,63,63,,,,,63,63,63,63,63,63,63,,,,,,,,,,63,,,63,63,63,63,63,63,63',
'63,63,63,,63,63,,,63,,388,388,388,388,388,388,388,388,388,388,388,,388',
'388,,,388,388,63,,,63,,,63,63,,,63,,,,388,,388,,388,388,388,388,388',
'388,388,,388,,,63,63,63,63,63,63,,,,63,63,82,82,82,388,82,,,,82,82,',
',,82,,82,82,82,82,82,82,82,,82,,,82,82,82,82,82,82,82,,,,,,,,,,82,,',
'82,82,82,82,82,82,82,82,82,82,,82,82,82,82,82,,,,,,,,,,,,,,,,,,,,82',
',,82,82,,82,82,,,82,,82,,82,,82,,,,,,,,82,,82,,,82,82,82,82,82,82,,',
',82,82,86,86,86,,86,,,,86,86,,,,86,,86,86,86,86,86,86,86,,86,,,86,86',
'86,86,86,86,86,,,,,,,,,,86,,,86,86,86,86,86,86,86,86,86,86,,86,86,86',
'86,86,,,,,,,,,,,,,,,,,,,,86,,,86,86,,86,86,,,86,,86,,86,,86,,,,,,,,86',
',86,,,86,86,86,86,86,86,,,,86,86,101,101,101,,101,,,,101,101,,,,101',
',101,101,101,101,101,101,101,,,,,101,101,101,101,101,101,101,,,101,',
',,,,,101,,,101,101,101,101,101,101,101,101,101,101,,101,101,101,101',
'101,,,,,,,,,,,,,,,,,,,,101,,,101,,,101,101,,,101,,,,,,101,,,,,,,,101',
',,,,101,101,101,101,101,101,,,,101,101,102,102,102,,102,,,,102,102,',
',,102,,102,102,102,102,102,102,102,,,,,102,102,102,102,102,102,102,',
',102,,,,,,,102,,,102,102,102,102,102,102,102,102,102,102,,102,102,102',
'102,102,,,,,,,,,,,,,,,,,,,,102,,,102,,,102,102,,,102,,,,,,102,,,,,,',
',102,,,,,102,102,102,102,102,102,,,,102,102,103,103,103,,103,,,,103',
'103,,,,103,,103,103,103,103,103,103,103,,,,,103,103,103,103,103,103',
'103,,,103,,,,,,,103,,,103,103,103,103,103,103,103,103,103,103,,103,103',
'103,103,103,,,,,,,,,,,,,,,,,,,,103,,,103,,,103,103,,,103,,,,,,103,,',
',,,,,103,,,,,103,103,103,103,103,103,,,,103,103,104,104,104,,104,,,',
'104,104,,,,104,,104,104,104,104,104,104,104,,,,,104,104,104,104,104',
'104,104,,,104,,,,,,,104,,,104,104,104,104,104,104,104,104,104,104,,104',
'104,104,104,104,,,,,,,,,,,,,,,,,,,,104,,,104,,,104,104,,,104,,,,,,104',
',,,,,,,104,,,,,104,104,104,104,104,104,,,,104,104,105,105,105,105,105',
',,,105,105,,,,105,,105,105,105,105,105,105,105,,,,,105,105,105,105,105',
'105,105,,,105,,,,,,105,105,105,105,105,105,105,105,105,105,105,105,105',
'105,,105,105,105,105,105,,,,,,,,,,,,,,,,,,,,105,,,105,,,105,105,,,105',
',105,,,,105,,,,,,,,105,,,,,105,105,105,105,105,105,,,,105,105,188,188',
'188,,188,,,,188,188,,,,188,,188,188,188,188,188,188,188,,,,,188,188',
'188,188,188,188,188,,,,,,,,,,188,,,188,188,188,188,188,188,188,188,188',
'188,,188,188,188,188,188,,,,,,,,,,,,,,,,,,,,188,,,188,,,188,188,,,188',
',188,,,,188,,,,,,,,188,,,,,188,188,188,188,188,188,,,,188,188,189,189',
'189,,189,,,,189,189,,,,189,,189,189,189,189,189,189,189,,,,,189,189',
'189,189,189,189,189,,,,,,,,,,189,,,189,189,189,189,189,189,189,189,189',
'189,,189,189,189,189,189,,,,,,,,,,,,,,,,,,,,189,,,189,,,189,189,,,189',
',189,,,,189,,,,,,,,189,,,,,189,189,189,189,189,189,,,,189,189,190,190',
'190,,190,,,,190,190,,,,190,,190,190,190,190,190,190,190,,,,,190,190',
'190,190,190,190,190,,,,,,,,,,190,,,190,190,190,190,190,190,190,190,190',
'190,,190,190,190,190,190,,,,,,,,,,,,,,,,,,,,190,,,190,,,190,190,,,190',
',,,,,190,,,,,,,,190,,,,,190,190,190,190,190,190,,,,190,190,191,191,191',
',191,,,,191,191,,,,191,,191,191,191,191,191,191,191,,,,,191,191,191',
'191,191,191,191,,,,,,,,,,191,,,191,191,191,191,191,191,191,191,191,191',
',191,191,191,191,191,,,,,,,,,,,,,,,,,,,,191,,,191,,,191,191,,,191,,191',
',,,191,,,,,,,,191,,,,,191,191,191,191,191,191,,,,191,191,194,194,194',
',194,,,,194,194,,,,194,,194,194,194,194,194,194,194,,,,,194,194,194',
'194,194,194,194,,,,,,,,,,194,,,194,194,194,194,194,194,194,194,194,194',
',194,194,194,194,194,,,,,,,,,,,,,,,,,,,,194,,,194,,,194,194,,,194,,',
',,,194,,,,,,,,194,,,,,194,194,194,194,194,194,,,,194,194,195,195,195',
',195,,,,195,195,,,,195,,195,195,195,195,195,195,195,,,,,195,195,195',
'195,195,195,195,,,195,,,,,,,195,,,195,195,195,195,195,195,195,195,195',
'195,,195,195,195,195,195,,,,,,,,,,,,,,,,,,,,195,,,195,,,195,195,,,195',
',,,,,195,,,,,,,,195,,,,,195,195,195,195,195,195,,,,195,195,196,196,196',
',196,,,,196,196,,,,196,,196,196,196,196,196,196,196,,,,,196,196,196',
'196,196,196,196,,,196,,,,,,,196,,,196,196,196,196,196,196,196,196,196',
'196,,196,196,196,196,196,,,,,,,,,,,,,,,,,,,,196,,,196,,,196,196,,,196',
',,,,,196,,,,,,,,196,,,,,196,196,196,196,196,196,,,,196,196,207,207,207',
',207,,,,207,207,,,,207,,207,207,207,207,207,207,207,,,,,207,207,207',
'207,207,207,207,,,,,,,,,,207,,,207,207,207,207,207,207,207,207,207,207',
',207,207,207,207,207,,,,,,,,,,,,,,,,,,,,207,,,207,,,207,207,,,207,,',
',,,207,,,,,,,,207,,,,,207,207,207,207,207,207,,,,207,207,208,208,208',
',208,,,,208,208,,,,208,,208,208,208,208,208,208,208,,,,,208,208,208',
'208,208,208,208,,,,,,,,,,208,,,208,208,208,208,208,208,208,208,208,208',
',208,208,208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,',
',,,208,,,,,,,,208,,,,,208,208,208,208,208,208,,,,208,208,209,209,209',
',209,,,,209,209,,,,209,,209,209,209,209,209,209,209,,,,,209,209,209',
'209,209,209,209,,,,,,,,,,209,,,209,209,209,209,209,209,209,209,209,209',
',209,209,209,209,209,,,,,,,,,,,,,,,,,,,,209,,,209,,,209,209,,,209,,',
',,,209,,,,,,,,209,,,,,209,209,209,209,209,209,,,,209,209,210,210,210',
',210,,,,210,210,,,,210,,210,210,210,210,210,210,210,,,,,210,210,210',
'210,210,210,210,,,,,,,,,,210,,,210,210,210,210,210,210,210,210,210,210',
',210,210,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,',
',,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,211,211,211',
',211,,,,211,211,,,,211,,211,211,211,211,211,211,211,,,,,211,211,211',
'211,211,211,211,,,,,,,,,,211,,,211,211,211,211,211,211,211,211,211,211',
',211,211,211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,',
',,,211,,,,,,,,211,,,,,211,211,211,211,211,211,,,,211,211,212,212,212',
',212,,,,212,212,,,,212,,212,212,212,212,212,212,212,,,,,212,212,212',
'212,212,212,212,,,,,,,,,,212,,,212,212,212,212,212,212,212,212,212,212',
',212,212,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,,',
',,,212,,,,,,,,212,,,,,212,212,212,212,212,212,,,,212,212,213,213,213',
',213,,,,213,213,,,,213,,213,213,213,213,213,213,213,,,,,213,213,213',
'213,213,213,213,,,,,,,,,,213,,,213,213,213,213,213,213,213,213,213,213',
',213,213,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,,213,,',
',,,213,,,,,,,,213,,,,,213,213,213,213,213,213,,,,213,213,214,214,214',
',214,,,,214,214,,,,214,,214,214,214,214,214,214,214,,,,,214,214,214',
'214,214,214,214,,,,,,,,,,214,,,214,214,214,214,214,214,214,214,214,214',
',214,214,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,,',
',,,214,,,,,,,,214,,,,,214,214,214,214,214,214,,,,214,214,215,215,215',
',215,,,,215,215,,,,215,,215,215,215,215,215,215,215,,,,,215,215,215',
'215,215,215,215,,,,,,,,,,215,,,215,215,215,215,215,215,215,215,215,215',
',215,215,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,',
',,,215,,,,,,,,215,,,,,215,215,215,215,215,215,,,,215,215,216,216,216',
',216,,,,216,216,,,,216,,216,216,216,216,216,216,216,,,,,216,216,216',
'216,216,216,216,,,,,,,,,,216,,,216,216,216,216,216,216,216,216,216,216',
',216,216,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,',
',,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216,216,217,217,217',
',217,,,,217,217,,,,217,,217,217,217,217,217,217,217,,,,,217,217,217',
'217,217,217,217,,,,,,,,,,217,,,217,217,217,217,217,217,217,217,217,217',
',217,217,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,',
',,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217,218,218,218',
',218,,,,218,218,,,,218,,218,218,218,218,218,218,218,,,,,218,218,218',
'218,218,218,218,,,,,,,,,,218,,,218,218,218,218,218,218,218,218,218,218',
',218,218,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,',
',,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218,218,219,219,219',
',219,,,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,219,219,219',
'219,219,219,219,,,,,,,,,,219,,,219,219,219,219,219,219,219,219,219,219',
',219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219,,',
',,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219,220,220,220',
',220,,,,220,220,,,,220,,220,220,220,220,220,220,220,,,,,220,220,220',
'220,220,220,220,,,,,,,,,,220,,,220,220,220,220,220,220,220,220,220,220',
',220,220,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,',
',,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,221,221,221',
',221,,,,221,221,,,,221,,221,221,221,221,221,221,221,,,,,221,221,221',
'221,221,221,221,,,,,,,,,,221,,,221,221,221,221,221,221,221,221,221,221',
',221,221,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,',
',,,221,,,,,,,,221,,,,,221,221,221,221,221,221,,,,221,221,222,222,222',
',222,,,,222,222,,,,222,,222,222,222,222,222,222,222,,,,,222,222,222',
'222,222,222,222,,,,,,,,,,222,,,222,222,222,222,222,222,222,222,222,222',
',222,222,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,',
',,,222,,,,,,,,222,,,,,222,222,222,222,222,222,,,,222,222,223,223,223',
',223,,,,223,223,,,,223,,223,223,223,223,223,223,223,,,,,223,223,223',
'223,223,223,223,,,,,,,,,,223,,,223,223,223,223,223,223,223,223,223,223',
',223,223,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,',
',,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223,224,224,224',
',224,,,,224,224,,,,224,,224,224,224,224,224,224,224,,,,,224,224,224',
'224,224,224,224,,,,,,,,,,224,,,224,224,224,224,224,224,224,224,224,224',
',224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,',
',,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224,225,225,225',
',225,,,,225,225,,,,225,,225,225,225,225,225,225,225,,,,,225,225,225',
'225,225,225,225,,,,,,,,,,225,,,225,225,225,225,225,225,225,225,225,225',
',225,225,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,',
',,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,226,226,226',
',226,,,,226,226,,,,226,,226,226,226,226,226,226,226,,,,,226,226,226',
'226,226,226,226,,,,,,,,,,226,,,226,226,226,226,226,226,226,226,226,226',
',226,226,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,',
',,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226,226,227,227,227',
',227,,,,227,227,,,,227,,227,227,227,227,227,227,227,,,,,227,227,227',
'227,227,227,227,,,,,,,,,,227,,,227,227,227,227,227,227,227,227,227,227',
',227,227,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,',
',,,227,,,,,,,,227,,,,,227,227,227,227,227,227,,,,227,227,228,228,228',
',228,,,,228,228,,,,228,,228,228,228,228,228,228,228,,,,,228,228,228',
'228,228,228,228,,,,,,,,,,228,,,228,228,228,228,228,228,228,228,228,228',
',228,228,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,',
',,,228,,,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,229,229,229',
',229,,,,229,229,,,,229,,229,229,229,229,229,229,229,,,,,229,229,229',
'229,229,229,229,,,,,,,,,,229,,,229,229,229,229,229,229,229,229,229,229',
',229,229,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229,,',
',,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229,230,230,230',
',230,,,,230,230,,,,230,,230,230,230,230,230,230,230,,,,,230,230,230',
'230,230,230,230,,,,,,,,,,230,,,230,230,230,230,230,230,230,230,230,230',
',230,230,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,',
',,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230,231,231,231',
',231,,,,231,231,,,,231,,231,231,231,231,231,231,231,,,,,231,231,231',
'231,231,231,231,,,,,,,,,,231,,,231,231,231,231,231,231,231,231,231,231',
',231,231,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,',
',,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,232,232,232',
',232,,,,232,232,,,,232,,232,232,232,232,232,232,232,,,,,232,232,232',
'232,232,232,232,,,,,,,,,,232,,,232,232,232,232,232,232,232,232,232,232',
',232,232,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,',
',,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232,233,233,233',
',233,,,,233,233,,,,233,,233,233,233,233,233,233,233,,,,,233,233,233',
'233,233,233,233,,,,,,,,,,233,,,233,233,233,233,233,233,233,233,233,233',
',233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,',
',,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,241,241,241',
',241,,,,241,241,,,,241,,241,241,241,241,241,241,241,,,,,241,241,241',
'241,241,241,241,,,,,,,,,,241,,,241,241,241,241,241,241,241,241,241,241',
',241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,',
',,,241,,,,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,243,243,243',
',243,,,,243,243,,,,243,,243,243,243,243,243,243,243,,,,,243,243,243',
'243,243,243,243,,,,,,,,,,243,,,243,243,243,243,243,243,243,243,243,243',
',243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,',
',,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243,254,254,254',
',254,,,,254,254,,,,254,,254,254,254,254,254,254,254,,,,,254,254,254',
'254,254,254,254,,,,,,,,,,254,,,254,254,254,254,254,254,254,254,254,254',
',254,254,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,254',
',254,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,255,255',
'255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,255,255',
'255,255,255,255,255,,,,,,,,,,255,,,255,255,255,255,255,255,255,255,255',
'255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255',
',255,,255,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,263',
'263,263,,263,,,,263,263,,,,263,,263,263,263,263,263,263,263,,,,,263',
'263,263,263,263,263,263,,,,,,,,,,263,,,263,263,263,263,263,263,263,263',
'263,263,,263,263,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,263,263,263',
',,263,,263,,263,,263,,,,,,,,263,,,,,263,263,263,263,263,263,,,,263,263',
'269,269,269,,269,,,,269,269,,,,269,,269,269,269,269,269,269,269,,,,',
'269,269,269,269,269,269,269,,,,,,,,,,269,,,269,269,269,269,269,269,269',
'269,269,269,,269,269,,,269,,468,468,468,468,468,468,468,468,468,468',
'468,,468,468,,,468,468,269,,,269,,,269,269,,,269,,,,468,,468,,468,468',
'468,468,468,468,468,,468,,,269,269,269,269,269,269,,,,269,269,290,290',
'290,468,290,,,,290,290,,,,290,,290,290,290,290,290,290,290,,,,,290,290',
'290,290,290,290,290,,,,,,,,,,290,,,290,290,290,290,290,290,290,290,290',
'290,,290,290,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,290,,290,290,',
',290,,,,,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290,290,299',
'299,299,,299,,,,299,299,,,,299,,299,299,299,299,299,299,299,,,,,299',
'299,299,299,299,299,299,,,,,,,,,,299,,,299,299,299,299,299,299,299,299',
'299,299,,299,299,299,299,299,,,,,,,,,,,,,,,,,,,,299,,,299,,,299,299',
',,299,,,,,,299,,,,,,,,299,,,,,299,299,299,299,299,299,,,,299,299,308',
'308,308,,308,,,,308,308,,,,308,,308,308,308,308,308,308,308,,,,,308',
'308,308,308,308,308,308,,,308,,,,,,,308,,,308,308,308,308,308,308,308',
'308,308,308,,308,308,308,308,308,,,,,,,,,,,,,,,,,,,,308,,,308,,,308',
'308,,,308,,,,,,308,,,,,,,,308,,,,,308,308,308,308,308,308,,,,308,308',
'309,309,309,,309,,,,309,309,,,,309,,309,309,309,309,309,309,309,,,,',
'309,309,309,309,309,309,309,,,309,,,,,,,309,,,309,309,309,309,309,309',
'309,309,309,309,,309,309,309,309,309,,,,,,,,,,,,,,,,,,,,309,,,309,,',
'309,309,,,309,,,,,,309,,,,,,,,309,,,,,309,309,309,309,309,309,,,,309',
'309,327,327,327,,327,,,,327,327,,,,327,,327,327,327,327,327,327,327',
',,,,327,327,327,327,327,327,327,,,327,,,,,,,327,,,327,327,327,327,327',
'327,327,327,327,327,,327,327,327,327,327,,,,,,,,,,,,,,,,,,,,327,,,327',
',,327,327,,,327,,,,,,327,,,,,,,,327,,,,,327,327,327,327,327,327,,,,327',
'327,341,341,341,,341,,,,341,341,,,,341,,341,341,341,341,341,341,341',
',,,,341,341,341,341,341,341,341,,,341,,,,,,,341,,,341,341,341,341,341',
'341,341,341,341,341,,341,341,341,341,341,,,,,,,,,,,,,,,,,,,,341,,,341',
',,341,341,,,341,,,,,,341,,,,,,,,341,,,,,341,341,341,341,341,341,,,,341',
'341,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357',
'357,357,357,357,357,357,357,357,,,357,357,357,357,357,357,357,357,357',
'357,,,,,,357,357,357,357,357,357,357,357,,,357,,,,,,,357,357,,357,357',
'357,357,,357,357,,,357,,,,,357,357,357,357,,,,,,,,,,,,,,357,357,,357',
'357,357,357,357,357,357,357,357,,357,,,357,357,,,369,369,369,,369,,',
'357,369,369,,,,369,,369,369,369,369,369,369,369,,,,,369,369,369,369',
'369,369,369,,,,,,,,,,369,,,369,369,369,369,369,369,369,369,369,369,',
'369,369,369,369,369,,,,,,,,,,,,,,,,,,,,369,,,369,,,369,369,,,369,,,',
',,369,,,,,,,,369,,,,,369,369,369,369,369,369,,,,369,369,378,378,378',
',378,,,,378,378,,,,378,,378,378,378,378,378,378,378,,,,,378,378,378',
'378,378,378,378,,,,,,,,,,378,,,378,378,378,378,378,378,378,378,378,378',
',378,378,378,378,378,,,,,,,,,,,,,,,,,,,,378,,,378,378,,378,378,,,378',
',378,,378,,378,,,,,,,,378,,,,,378,378,378,378,378,378,,,,378,378,385',
'385,385,,385,,,,385,385,,,,385,,385,385,385,385,385,385,385,,,,,385',
'385,385,385,385,385,385,,,,,,,,,,385,,,385,385,385,385,385,385,385,385',
'385,385,,385,385,385,385,385,,,,,,,,,,,,,,,,,,,,385,,,385,385,,385,385',
',,385,,385,,385,,385,,,,,,,,385,,,,,385,385,385,385,385,385,,,,385,385',
'386,386,386,,386,,,,386,386,,,,386,,386,386,386,386,386,386,386,,,,',
'386,386,386,386,386,386,386,,,,,,,,,,386,,,386,386,386,386,386,386,386',
'386,386,386,,386,386,386,386,386,,,,,,,,,,,,,,,,,,,,386,,,386,386,,386',
'386,,,386,,386,,386,,386,,,,,,,,386,,,,,386,386,386,386,386,386,,,,386',
'386,393,393,393,,393,,,,393,393,,,,393,,393,393,393,393,393,393,393',
',,,,393,393,393,393,393,393,393,,,,,,,,,,393,,,393,393,393,393,393,393',
'393,393,393,393,,393,393,393,393,393,,,,,,,,,,,,,,,,,,,,393,,,393,,',
'393,393,,,393,,393,,,,393,,,,,,,,393,,,,,393,393,393,393,393,393,,,',
'393,393,395,395,395,,395,,,,395,395,,,,395,,395,395,395,395,395,395',
'395,,,,,395,395,395,395,395,395,395,,,,,,,,,,395,,,395,395,395,395,395',
'395,395,395,395,395,,395,395,395,395,395,,,,,,,,,,,,,,,,,,,,395,,,395',
',,395,395,,,395,,,,,,395,,,,,,,,395,,,,,395,395,395,395,395,395,,,,395',
'395,396,396,396,,396,,,,396,396,,,,396,,396,396,396,396,396,396,396',
',,,,396,396,396,396,396,396,396,,,,,,,,,,396,,,396,396,396,396,396,396',
'396,396,396,396,,396,396,396,396,396,,,,,,,,,,,,,,,,,,,,396,,,396,,',
'396,396,,,396,,,,,,396,,,,,,,,396,,,,,396,396,396,396,396,396,,,,396',
'396,397,397,397,,397,,,,397,397,,,,397,,397,397,397,397,397,397,397',
',,,,397,397,397,397,397,397,397,,,,,,,,,,397,,,397,397,397,397,397,397',
'397,397,397,397,,397,397,397,397,397,,,,,,,,,,,,,,,,,,,,397,,,397,,',
'397,397,,,397,,,,,,397,,,,,,,,397,,,,,397,397,397,397,397,397,,,,397',
'397,426,426,426,,426,,,,426,426,,,,426,,426,426,426,426,426,426,426',
',,,,426,426,426,426,426,426,426,,,,,,,,,,426,,,426,426,426,426,426,426',
'426,426,426,426,,426,426,426,426,426,,,,,,,,,,,,,,,,,,,,426,,,426,,',
'426,426,,,426,,426,,426,,426,,,,,,,,426,,,,,426,426,426,426,426,426',
',,,426,426,428,428,428,,428,,,,428,428,,,,428,,428,428,428,428,428,428',
'428,,,,,428,428,428,428,428,428,428,,,,,,,,,,428,,,428,428,428,428,428',
'428,428,428,428,428,,428,428,428,428,428,,,,,,,,,,,,,,,,,,,,428,,,428',
',,428,428,,,428,,428,,428,,428,,,,,,,,428,,,,,428,428,428,428,428,428',
',,,428,428,431,431,431,,431,,,,431,431,,,,431,,431,431,431,431,431,431',
'431,,,,,431,431,431,431,431,431,431,,,,,,,,,,431,,,431,431,431,431,431',
'431,431,431,431,431,,431,431,431,431,431,,,,,,,,,,,,,,,,,,,,431,,,431',
',,431,431,,,431,,,,,,431,,,,,,,,431,,,,,431,431,431,431,431,431,,,,431',
'431,445,445,445,,445,,,,445,445,,,,445,,445,445,445,445,445,445,445',
',,,,445,445,445,445,445,445,445,,,445,,,,,,,445,,,445,445,445,445,445',
'445,445,445,445,445,,445,445,445,445,445,,,,,,,,,,,,,,,,,,,,445,,,445',
',,445,445,,,445,,445,,445,,445,,,,,,,,445,,,,,445,445,445,445,445,445',
',,,445,445,456,456,456,,456,,,,456,456,,,,456,,456,456,456,456,456,456',
'456,,,,,456,456,456,456,456,456,456,,,,,,,,,,456,,,456,456,456,456,456',
'456,456,456,456,456,,456,456,456,456,456,,,,,,,,,,,,,,,,,,,,456,,,456',
',,456,456,,,456,,456,,,,456,,,,,,,,456,,,,,456,456,456,456,456,456,',
',,456,456,463,463,463,,463,,,,463,463,,,,463,,463,463,463,463,463,463',
'463,,,,,463,463,463,463,463,463,463,,,,,,,,,,463,,,463,463,463,463,463',
'463,463,463,463,463,,463,463,463,463,463,,,,,,,,,,,,,,,,,,,,463,,,463',
',,463,463,,,463,,,,,,463,,,,,,,,463,,,,,463,463,463,463,463,463,,,,463',
'463,464,464,464,,464,,,,464,464,,,,464,,464,464,464,464,464,464,464',
',,,,464,464,464,464,464,464,464,,,,,,,,,,464,,,464,464,464,464,464,464',
'464,464,464,464,,464,464,464,464,464,,,,,,,,,,,,,,,,,,,,464,,,464,,',
'464,464,,,464,,,,,,464,,,,,,,,464,,,,,464,464,464,464,464,464,,,,464',
'464,465,465,465,,465,,,,465,465,,,,465,,465,465,465,465,465,465,465',
',,,,465,465,465,465,465,465,465,,,,,,,,,,465,,,465,465,465,465,465,465',
'465,465,465,465,,465,465,465,465,465,,,,,,,,,,,,,,,,,,,,465,,,465,,',
'465,465,,,465,,,,,,465,,,,,,,,465,,,,,465,465,465,465,465,465,,,,465',
'465,469,469,469,,469,,,,469,469,,,,469,,469,469,469,469,469,469,469',
',,,,469,469,469,469,469,469,469,,,469,,,,,,,469,,,469,469,469,469,469',
'469,469,469,469,469,,469,469,469,469,469,,,,,,,,,,,,,,,,,,,,469,,,469',
',,469,469,,,469,,,,,,469,,,,,,,,469,,,,,469,469,469,469,469,469,,,,469',
'469,471,471,471,,471,,,,471,471,,,,471,,471,471,471,471,471,471,471',
',,,,471,471,471,471,471,471,471,,,,,,,,,,471,,,471,471,471,471,471,471',
'471,471,471,471,,471,471,471,471,471,,,,,,,,,,,,,,,,,,,,471,,,471,,',
'471,471,,,471,,471,,,,471,,,,,,,,471,,,,,471,471,471,471,471,471,,,',
'471,471,476,476,476,,476,,,,476,476,,,,476,,476,476,476,476,476,476',
'476,,,,,476,476,476,476,476,476,476,,,,,,,,,,476,,,476,476,476,476,476',
'476,476,476,476,476,,476,476,476,476,476,,,,,,,,,,,,,,,,,,,,476,,,476',
',,476,476,,,476,,476,,,,476,,,,,,,,476,,,,,476,476,476,476,476,476,',
',,476,476,479,479,479,,479,,,,479,479,,,,479,,479,479,479,479,479,479',
'479,,,,,479,479,479,479,479,479,479,,,,,,,,,,479,,,479,479,479,479,479',
'479,479,479,479,479,,479,479,479,479,479,,,,,,,,,,,,,,,,,,,,479,,,479',
',,479,479,,,479,,,,,,479,,,,,,,,479,,,,,479,479,479,479,479,479,,,,479',
'479,482,482,482,,482,,,,482,482,,,,482,,482,482,482,482,482,482,482',
',,,,482,482,482,482,482,482,482,,,,,,,,,,482,,,482,482,482,482,482,482',
'482,482,482,482,,482,482,482,482,482,,,,,,,,,,,,,,,,,,,,482,,,482,,',
'482,482,,,482,,,,,,482,,,,,,,,482,,,,,482,482,482,482,482,482,,,,482',
'482,496,496,496,,496,,,,496,496,,,,496,,496,496,496,496,496,496,496',
',,,,496,496,496,496,496,496,496,,,,,,,,,,496,,,496,496,496,496,496,496',
'496,496,496,496,,496,496,496,496,496,,,,,,,,,,,,,,,,,,,,496,,,496,,',
'496,496,,,496,,496,,,,496,,,,,,,,496,,,,,496,496,496,496,496,496,,,',
'496,496,497,497,497,,497,,,,497,497,,,,497,,497,497,497,497,497,497',
'497,,,,,497,497,497,497,497,497,497,,,,,,,,,,497,,,497,497,497,497,497',
'497,497,497,497,497,,497,497,497,497,497,,,,,,,,,,,,,,,,,,,,497,,,497',
',,497,497,,,497,,497,,,,497,,,,,,,,497,,,,,497,497,497,497,497,497,',
',,497,497,506,506,506,,506,,,,506,506,,,,506,,506,506,506,506,506,506',
'506,,,,,506,506,506,506,506,506,506,,,,,,,,,,506,,,506,506,506,506,506',
'506,506,506,506,506,,506,506,506,506,506,,,,,,,,,,,,,,,,,,,,506,,,506',
',,506,506,,,506,,506,,,,506,,,,,,,,506,,,,,506,506,506,506,506,506,',
',,506,506,510,510,510,,510,,,,510,510,,,,510,,510,510,510,510,510,510',
'510,,,,,510,510,510,510,510,510,510,,,510,,,,,,,510,,,510,510,510,510',
'510,510,510,510,510,510,,510,510,510,510,510,,,,,,,,,,,,,,,,,,,,510',
',,510,,,510,510,,,510,,,,,,510,,,,,,,,510,,,,,510,510,510,510,510,510',
',,,510,510,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534',
'534,534,534,534,534,534,534,534,534,,,534,534,534,534,534,534,534,534',
'534,534,,,,,,534,534,534,534,534,534,534,534,,,534,,,,,,,534,534,,534',
'534,534,534,,534,534,,,534,,,,,534,534,534,534,,,,,,,,,,,,,,534,534',
',534,534,534,534,534,534,534,534,534,,534,,,534,534,,,537,537,537,,537',
',,534,537,537,,,,537,,537,537,537,537,537,537,537,,,,,537,537,537,537',
'537,537,537,,,,,,,,,,537,,,537,537,537,537,537,537,537,537,537,537,',
'537,537,537,537,537,,,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,,537,,,',
',,537,,,,,,,,537,,,,,537,537,537,537,537,537,,,,537,537,538,538,538',
',538,,,,538,538,,,,538,,538,538,538,538,538,538,538,,,,,538,538,538',
'538,538,538,538,,,,,,,,,,538,,,538,538,538,538,538,538,538,538,538,538',
',538,538,538,538,538,,,,,,,,,,,,,,,,,,,,538,,,538,,,538,538,,,538,,538',
',,,538,,,,,,,,538,,,,,538,538,538,538,538,538,,,,538,538,541,541,541',
',541,,,,541,541,,,,541,,541,541,541,541,541,541,541,,,,,541,541,541',
'541,541,541,541,,,,,,,,,,541,,,541,541,541,541,541,541,541,541,541,541',
',541,541,541,541,541,,,,,,,,,,,,,,,,,,,,541,,,541,,,541,541,,,541,,',
',,,541,,,,,,,,541,,,,,541,541,541,541,541,541,,,,541,541,542,542,542',
',542,,,,542,542,,,,542,,542,542,542,542,542,542,542,,,,,542,542,542',
'542,542,542,542,,,,,,,,,,542,,,542,542,542,542,542,542,542,542,542,542',
',542,542,542,542,542,,,,,,,,,,,,,,,,,,,,542,,,542,,,542,542,,,542,,',
',,,542,,,,,,,,542,,,,,542,542,542,542,542,542,,,,542,542,546,546,546',
',546,,,,546,546,,,,546,,546,546,546,546,546,546,546,,,,,546,546,546',
'546,546,546,546,,,,,,,,,,546,,,546,546,546,546,546,546,546,546,546,546',
',546,546,546,546,546,,,,,,,,,,,,,,,,,,,,546,,,546,,,546,546,,,546,,',
',,,546,,,,,,,,546,,,,,546,546,546,546,546,546,,,,546,546,549,549,549',
',549,,,,549,549,,,,549,,549,549,549,549,549,549,549,,,,,549,549,549',
'549,549,549,549,,,,,,,,,,549,,,549,549,549,549,549,549,549,549,549,549',
',549,549,549,549,549,,,,,,,,,,,,,,,,,,,,549,,,549,,,549,549,,,549,,',
',,,549,,,,,,,,549,,,,,549,549,549,549,549,549,,,,549,549,556,556,556',
',556,,,,556,556,,,,556,,556,556,556,556,556,556,556,,,,,556,556,556',
'556,556,556,556,,,,,,,,,,556,,,556,556,556,556,556,556,556,556,556,556',
',556,556,556,556,556,,,,,,,,,,,,,,,,,,,,556,,,556,,,556,556,,,556,,',
',,,556,,,,,,,,556,,,,,556,556,556,556,556,556,,,,556,556,557,557,557',
',557,,,,557,557,,,,557,,557,557,557,557,557,557,557,,,,,557,557,557',
'557,557,557,557,,,,,,,,,,557,,,557,557,557,557,557,557,557,557,557,557',
',557,557,,,557,,,,,,,,,,,,,,,,,,,,557,,,557,,,557,557,,,557,,557,,557',
',,,,,,,,557,,,,,,557,557,557,557,557,557,,,,557,557,560,560,560,,560',
',,,560,560,,,,560,,560,560,560,560,560,560,560,,,,,560,560,560,560,560',
'560,560,,,,,,,,,,560,,,560,560,560,560,560,560,560,560,560,560,,560',
'560,560,560,560,,,,,,,,,,,,,,,,,,,,560,,,560,,,560,560,,,560,,,,,,560',
',,,,,,,560,,,,,560,560,560,560,560,560,,,,560,560,564,564,564,,564,',
',,564,564,,,,564,,564,564,564,564,564,564,564,,,,,564,564,564,564,564',
'564,564,,,,,,,,,,564,,,564,564,564,564,564,564,564,564,564,564,,564',
'564,564,564,564,,,,,,,,,,,,,,,,,,,,564,,,564,,,564,564,,,564,,,,,,564',
',,,,,,,564,,,,,564,564,564,564,564,564,,,,564,564,580,580,580,,580,',
',,580,580,,,,580,,580,580,580,580,580,580,580,,,,,580,580,580,580,580',
'580,580,,,,,,,,,,580,,,580,580,580,580,580,580,580,580,580,580,,580',
'580,580,580,580,,,,,,,,,,,,,,,,,,,,580,,,580,,,580,580,,,580,,580,,580',
',580,,,,,,,,580,,,,,580,580,580,580,580,580,,,,580,580,584,584,584,',
'584,,,,584,584,,,,584,,584,584,584,584,584,584,584,,,,,584,584,584,584',
'584,584,584,,,,,,,,,,584,,,584,584,584,584,584,584,584,584,584,584,',
'584,584,584,584,584,,,,,,,,,,,,,,,,,,,,584,,,584,,,584,584,,,584,,,',
',,584,,,,,,,,584,,,,,584,584,584,584,584,584,,,,584,584,612,612,612',
',612,,,,612,612,,,,612,,612,612,612,612,612,612,612,,,,,612,612,612',
'612,612,612,612,,,,,,,,,,612,,,612,612,612,612,612,612,612,612,612,612',
',612,612,612,612,612,,,,,,,,,,,,,,,,,,,,612,,,612,,,612,612,,,612,,',
',,,612,,,,,,,,612,,,,,612,612,612,612,612,612,,,,612,612,628,628,628',
',628,,,,628,628,,,,628,,628,628,628,628,628,628,628,,,,,628,628,628',
'628,628,628,628,,,,,,,,,,628,,,628,628,628,628,628,628,628,628,628,628',
',628,628,628,628,628,,,,,,,,,,,,,,,,,,,,628,,,628,,,628,628,,,628,,',
',,,628,,,,,,,,628,,,,,628,628,628,628,628,628,,,,628,628,634,634,634',
',634,,,,634,634,,,,634,,634,634,634,634,634,634,634,,,,,634,634,634',
'634,634,634,634,,,634,,,,,,,634,,,634,634,634,634,634,634,634,634,634',
'634,,634,634,634,634,634,,,,,,,,,,,,,,,,,,,,634,,,634,,,634,634,,,634',
',,,,,634,,,,,,,,634,,,,,634,634,634,634,634,634,,,,634,634,679,679,679',
',679,,,,679,679,,,,679,,679,679,679,679,679,679,679,,,,,679,679,679',
'679,679,679,679,,,,,,,,,,679,,,679,679,679,679,679,679,679,679,679,679',
',679,679,679,679,679,,,,,,,,,,,,,,,,,,,,679,,,679,,,679,679,,,679,,',
',,,679,,,,,,,,679,,,,,679,679,679,679,679,679,,,,679,679,680,680,680',
',680,,,,680,680,,,,680,,680,680,680,680,680,680,680,,,,,680,680,680',
'680,680,680,680,,,,,,,,,,680,,,680,680,680,680,680,680,680,680,680,680',
',680,680,680,680,680,,,,,,,,,,,,,,,,,,,,680,,,680,,,680,680,,,680,,',
',,,680,,,,,,,,680,,,,,680,680,680,680,680,680,,,,680,680,690,690,690',
',690,,,,690,690,,,,690,,690,690,690,690,690,690,690,,,,,690,690,690',
'690,690,690,690,,,,,,,,,,690,,,690,690,690,690,690,690,690,690,690,690',
',690,690,690,690,690,,,,,,,,,,,,,,,,,,,,690,,,690,,,690,690,,,690,,',
',,,690,,,,,,,,690,,,,,690,690,690,690,690,690,,,,690,690,691,691,691',
',691,,,,691,691,,,,691,,691,691,691,691,691,691,691,,,,,691,691,691',
'691,691,691,691,,,,,,,,,,691,,,691,691,691,691,691,691,691,691,691,691',
',691,691,691,691,691,,,,,,,,,,,,,,,,,,,,691,,,691,,,691,691,,,691,,',
',,,691,,,,,,,,691,,,,,691,691,691,691,691,691,,,,691,691,692,692,692',
',692,,,,692,692,,,,692,,692,692,692,692,692,692,692,,,,,692,692,692',
'692,692,692,692,,,,,,,,,,692,,,692,692,692,692,692,692,692,692,692,692',
',692,692,692,692,692,,,,,,,,,,,,,,,,,,,,692,,,692,,,692,692,,,692,,',
',,,692,,,,,,,,692,,,,,692,692,692,692,692,692,,,,692,692,698,698,698',
',698,,,,698,698,,,,698,,698,698,698,698,698,698,698,,,,,698,698,698',
'698,698,698,698,,,,,,,,,,698,,,698,698,698,698,698,698,698,698,698,698',
',698,698,,,698,,600,600,600,600,600,600,600,600,600,600,600,,600,600',
',,600,600,698,,,698,,,698,698,,,698,,,,600,,600,,600,600,600,600,600',
'600,600,,600,,,698,698,698,698,698,698,,,,698,698,704,704,704,600,704',
',,,704,704,,,,704,,704,704,704,704,704,704,704,,,,,704,704,704,704,704',
'704,704,,,,,,,,,,704,,,704,704,704,704,704,704,704,704,704,704,,704',
'704,704,704,704,,,,,,,,,,,,,,,,,,,,704,,,704,,,704,704,,,704,,704,,704',
',704,,,,,,,,704,,,,,704,704,704,704,704,704,,,,704,704,713,713,713,',
'713,,,,713,713,,,,713,,713,713,713,713,713,713,713,,,,,713,713,713,713',
'713,713,713,,,,,,,,,,713,,,713,713,713,713,713,713,713,713,713,713,',
'713,713,713,713,713,,,,,,,,,,,,,,,,,,,,713,,,713,,,713,713,,,713,,713',
',713,,713,,,,,,,,713,,,,,713,713,713,713,713,713,,,,713,713,715,715',
'715,,715,,,,715,715,,,,715,,715,715,715,715,715,715,715,,,,,715,715',
'715,715,715,715,715,,,,,,,,,,715,,,715,715,715,715,715,715,715,715,715',
'715,,715,715,715,715,715,,,,,,,,,,,,,,,,,,,,715,,,715,,,715,715,,,715',
',715,,715,,715,,,,,,,,715,,,,,715,715,715,715,715,715,,,,715,715,728',
'728,728,,728,,,,728,728,,,,728,,728,728,728,728,728,728,728,,,,,728',
'728,728,728,728,728,728,,,,,,,,,,728,,,728,728,728,728,728,728,728,728',
'728,728,,728,728,,,728,,677,677,677,677,677,677,677,677,677,677,677',
',677,677,,,677,677,728,,,728,,,728,728,,,728,,,,677,,677,,677,677,677',
'677,677,677,677,,677,,,728,728,728,728,728,728,,,,728,728,734,734,734',
'677,734,,,,734,734,,,,734,,734,734,734,734,734,734,734,,,,,734,734,734',
'734,734,734,734,,,734,,,,,,,734,,,734,734,734,734,734,734,734,734,734',
'734,,734,734,734,734,734,,,,,,,,,,,,,,,,,,,,734,,,734,,,734,734,,,734',
',,,,,734,,,,,,,,734,,,,,734,734,734,734,734,734,,,,734,734,740,740,740',
',740,,,,740,740,,,,740,,740,740,740,740,740,740,740,,,,,740,740,740',
'740,740,740,740,,,,,,,,,,740,,,740,740,740,740,740,740,740,740,740,740',
',740,740,740,740,740,,,,,,,,,,,,,,,,,,,,740,,,740,,,740,740,,,740,,740',
',,,740,,,,,,,,740,,,,,740,740,740,740,740,740,,,,740,740,759,759,759',
',759,,,,759,759,,,,759,,759,759,759,759,759,759,759,,,,,759,759,759',
'759,759,759,759,,,,,,,,,,759,,,759,759,759,759,759,759,759,759,759,759',
',759,759,759,759,759,,,,,,,,,,,,,,,,,,,,759,,,759,,,759,759,,,759,,',
',,,759,,,,,,,,759,,,,,759,759,759,759,759,759,,,,759,759,768,768,768',
',768,,,,768,768,,,,768,,768,768,768,768,768,768,768,,,,,768,768,768',
'768,768,768,768,,,,,,,,,,768,,,768,768,768,768,768,768,768,768,768,768',
',768,768,768,768,768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,,768,,',
',,,768,,,,,,,,768,,,,,768,768,768,768,768,768,,,,768,768,769,769,769',
',769,,,,769,769,,,,769,,769,769,769,769,769,769,769,,,,,769,769,769',
'769,769,769,769,,,,,,,,,,769,,,769,769,769,769,769,769,769,769,769,769',
',769,769,,,769,,,,,,,,,,,,,,,,,,,,769,,,769,,,769,769,,,769,,769,,769',
',,,,,,,,,,,,,,769,769,769,769,769,769,,,,769,769,780,780,780,,780,,',
',780,780,,,,780,,780,780,780,780,780,780,780,,,,,780,780,780,780,780',
'780,780,,,,,,,,,,780,,,780,780,780,780,780,780,780,780,780,780,,780',
'780,780,780,780,,,,,,,,,,,,,,,,,,,,780,,,780,,,780,780,,,780,,,,,,780',
',,,,,,,780,,,,,780,780,780,780,780,780,,,,780,780,786,786,786,,786,',
',,786,786,,,,786,,786,786,786,786,786,786,786,,,,,786,786,786,786,786',
'786,786,,,,,,,,,,786,,,786,786,786,786,786,786,786,786,786,786,,786',
'786,786,786,786,,,,,,,,,,,,,,,,,,,,786,,,786,,,786,786,,,786,,,,,,786',
',,,,,,,786,,,,,786,786,786,786,786,786,,,,786,786,788,788,788,,788,',
',,788,788,,,,788,,788,788,788,788,788,788,788,,,,,788,788,788,788,788',
'788,788,,,,,,,,,,788,,,788,788,788,788,788,788,788,788,788,788,,788',
'788,788,788,788,,,,,,,,,,,,,,,,,,,,788,,,788,,,788,788,,,788,,,,,,788',
',,,,,,,788,,,,,788,788,788,788,788,788,,,,788,788,802,802,802,,802,',
',,802,802,,,,802,,802,802,802,802,802,802,802,,,,,802,802,802,802,802',
'802,802,,,,,,,,,,802,,,802,802,802,802,802,802,802,802,802,802,,802',
'802,802,802,802,,,,,,,,,,,,,,,,,,,,802,,,802,,,802,802,,,802,,,,,,802',
',,,,,,,802,,,,,802,802,802,802,802,802,,,,802,802,820,820,820,,820,',
',,820,820,,,,820,,820,820,820,820,820,820,820,,,,,820,820,820,820,820',
'820,820,,,,,,,,,,820,,,820,820,820,820,820,820,820,820,820,820,,820',
'820,,,820,,682,682,682,682,682,682,682,682,682,682,682,,682,682,,,682',
'682,820,,,820,,,820,820,,,820,,,,682,,682,,682,682,682,682,682,682,682',
',682,,,820,820,820,820,820,820,,,,820,820,822,822,822,682,822,,,,822',
'822,,,,822,,822,822,822,822,822,822,822,,,,,822,822,822,822,822,822',
'822,,,,,,,,,,822,,,822,822,822,822,822,822,822,822,822,822,,822,822',
'822,822,822,,,,,,,,,,,,,,,,,,,,822,,,822,,,822,822,,,822,,822,,,,822',
',,,,,,,822,,,,,822,822,822,822,822,822,,,,822,822,827,827,827,,827,',
',,827,827,,,,827,,827,827,827,827,827,827,827,,,,,827,827,827,827,827',
'827,827,,,,,,,,,,827,,,827,827,827,827,827,827,827,827,827,827,,827',
'827,,,827,,684,684,684,684,684,684,684,684,684,684,684,,684,684,,,684',
'684,827,,,827,,,827,827,,,827,,,,684,,684,,684,684,684,684,684,684,684',
',684,,,827,827,827,827,827,827,,,,827,827,832,832,832,684,832,,,,832',
'832,,,,832,,832,832,832,832,832,832,832,,,,,832,832,832,832,832,832',
'832,,,,,,,,,,832,,,832,832,832,832,832,832,832,832,832,832,,832,832',
'832,832,832,,,,,,,,,,,,,,,,,,,,832,,,832,,,832,832,,,832,,832,,832,',
'832,,,,,,,,832,,,,,832,832,832,832,832,832,,,,832,832,835,835,835,,835',
',,,835,835,,,,835,,835,835,835,835,835,835,835,,,,,835,835,835,835,835',
'835,835,,,,,,,,,,835,,,835,835,835,835,835,835,835,835,835,835,,835',
'835,835,835,835,,,,,,,,,,,,,,,,,,,,835,,,835,,,835,835,,,835,,835,,835',
',835,,,,,,,,835,,,,,835,835,835,835,835,835,,,,835,835,861,861,861,',
'861,,,,861,861,,,,861,,861,861,861,861,861,861,861,,,,,861,861,861,861',
'861,861,861,,,,,,,,,,861,,,861,861,861,861,861,861,861,861,861,861,',
'861,861,,,861,,687,687,687,687,687,687,687,687,687,687,687,,687,687',
',,687,687,861,,,861,,,861,861,,,861,,,,687,,687,,687,687,687,687,687',
'687,687,,687,,,861,861,861,861,861,861,,,,861,861,864,864,864,687,864',
',,,864,864,,,,864,,864,864,864,864,864,864,864,,,,,864,864,864,864,864',
'864,864,,,,,,,,,,864,,,864,864,864,864,864,864,864,864,864,864,,864',
'864,864,864,864,,,,,,,,,,,,,,,,,,,,864,,,864,,,864,864,,,864,,,,,,864',
',,,,,,,864,,,,,864,864,864,864,864,864,,,,864,864,867,867,867,,867,',
',,867,867,,,,867,,867,867,867,867,867,867,867,,,,,867,867,867,867,867',
'867,867,,,,,,,,,,867,,,867,867,867,867,867,867,867,867,867,867,,867',
'867,867,867,867,,,,,,,,,,,,,,,,,,,,867,,,867,,,867,867,,,867,,,,,,867',
',,,,,,,867,,,,,867,867,867,867,867,867,,,,867,867,875,875,875,,875,',
',,875,875,,,,875,,875,875,875,875,875,875,875,,,,,875,875,875,875,875',
'875,875,,,,,,,,,,875,,,875,875,875,875,875,875,875,875,875,875,,875',
'875,,,875,,689,689,689,689,689,689,689,689,689,689,689,,689,689,,,689',
'689,875,,,875,,,875,875,,,875,,,,689,,689,,689,689,689,689,689,689,689',
',689,,,875,875,875,875,875,875,,,,875,875,880,880,880,689,880,,,,880',
'880,,,,880,,880,880,880,880,880,880,880,,,,,880,880,880,880,880,880',
'880,,,,,,,,,,880,,,880,880,880,880,880,880,880,880,880,880,,880,880',
'880,880,880,,,,,,,,,,,,,,,,,,,,880,,,880,,,880,880,,,880,,880,,880,',
'880,,,,,,,,880,,,,,880,880,880,880,880,880,,,,880,880,886,886,886,,886',
',,,886,886,,,,886,,886,886,886,886,886,886,886,,,,,886,886,886,886,886',
'886,886,,,,,,,,,,886,,,886,886,886,886,886,886,886,886,886,886,,886',
'886,,,886,,694,694,694,694,694,694,694,694,694,694,694,,694,694,,,694',
'694,886,,,886,,,886,886,,,886,,,,694,,694,,694,694,694,694,694,694,694',
',694,,,886,886,886,886,886,886,,,,886,886,889,889,889,694,889,,,,889',
'889,,,,889,,889,889,889,889,889,889,889,,,,,889,889,889,889,889,889',
'889,,,,,,,,,,889,,,889,889,889,889,889,889,889,889,889,889,,889,889',
'889,889,889,,,,,,,,,,,,,,,,,,,,889,,,889,,,889,889,,,889,,,,,,889,,',
',,,,,889,,,,,889,889,889,889,889,889,,,,889,889,64,64,64,64,64,64,64',
'64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,,,64,64,64,64,64',
'64,64,64,64,64,,,,,,64,64,64,64,64,64,64,64,64,64,64,64,,,,,,64,64,',
'64,64,64,64,,64,64,,,64,,,,,64,64,64,64,,,,,,64,,,,,,,,64,64,,64,64',
'64,64,64,64,64,64,64,,64,,,64,664,664,664,664,664,664,664,664,664,664',
'664,664,664,664,664,664,664,664,664,664,664,664,664,664,,,664,664,664',
'664,664,664,664,664,664,664,,,,,,664,664,664,664,664,664,664,664,,,664',
',,,,,,664,664,,664,664,664,664,,664,664,,,664,,,,,664,664,664,664,,',
',,,,,,,,,,,664,664,,664,664,664,664,664,664,664,664,664,,664,,,664,581',
'581,581,581,581,581,581,581,581,581,581,,581,581,,,581,581,,,,581,,',
',,,,,,,,581,,581,,581,581,581,581,581,581,581,,581,,,,,,,,,,,,,,,,,581',
',581,423,423,423,423,423,423,423,423,423,423,423,,423,423,,,423,423',
',,,,,,,,,,,,,,423,,423,,423,423,423,423,423,423,423,,423,,,,,,,,192',
'192,,,192,,,,,423,423,192,192,,192,192,192,192,,192,192,,,192,,,,,192',
'192,192,192,,,,,,,,,,,,,,192,192,,192,192,192,192,192,192,192,192,192',
',192,193,193,192,,193,,,,,,,193,193,,193,193,193,193,,193,193,,,193',
',,,,193,193,193,193,,,,,,,,,,,,,,193,193,,193,193,193,193,193,193,193',
'193,193,,193,251,251,193,,251,,,,,,,251,251,,251,251,251,251,,251,251',
',,251,,,,,251,251,251,251,,,,,,,,,,,,,,251,251,,251,251,251,251,251',
'251,251,251,251,,251,252,252,251,,252,,,,,,,252,252,,252,252,252,252',
',252,252,,,252,,,,,252,252,252,252,,,,,,,,,,,,,,252,252,,252,252,252',
'252,252,252,252,252,252,,252,391,391,252,,391,,,,,,,391,391,,391,391',
'391,391,,391,391,,,391,,,,,391,391,391,391,,,,,,,,,,,,,,391,391,,391',
'391,391,391,391,391,391,391,391,,391,392,392,391,,392,,,,,,,392,392',
',392,392,392,392,,392,392,,,392,,,,,392,392,392,392,,,,,,,,,,,,,,392',
'392,,392,392,392,392,392,392,392,392,392,,392,457,457,392,,457,,,,,',
',457,457,,457,457,457,457,,457,457,,,457,,,,,457,457,457,457,,,,,,,',
',,,,,,457,457,,457,457,457,457,457,457,457,457,457,,457,458,458,457',
',458,,,,,,,458,458,,458,458,458,458,,458,458,,,458,,,,,458,458,458,458',
',,,,,,,,,,,,,458,458,,458,458,458,458,458,458,458,458,458,,458,466,466',
'458,,466,,,,,,,466,466,,466,466,466,466,,466,466,,,466,,,,,466,466,466',
'466,,,,,,,,,,,,,,466,466,,466,466,466,466,466,466,466,466,466,,466,467',
'467,466,,467,,,,,,,467,467,,467,467,467,467,,467,467,,,467,,,,,467,467',
'467,467,,,,,,,,,,,,,,467,467,,467,467,467,467,467,467,467,467,467,,467',
',,467,480,480,480,480,480,480,480,480,480,480,480,,480,480,,,480,480',
',,,,,,,,,,,,,,480,,480,,480,480,480,480,480,480,480,,480,,,,,,,498,498',
',,498,,,,,480,480,498,498,,498,498,498,498,,498,498,,,498,,,,,498,498',
'498,498,,,,,,,,,,,,,,498,498,,498,498,498,498,498,498,498,498,498,,498',
'499,499,498,,499,,,,,,,499,499,,499,499,499,499,,499,499,,,499,,,,,499',
'499,499,499,,,,,,,,,,,,,,499,499,,499,499,499,499,499,499,499,499,499',
',499,505,505,499,,505,,,,,,,505,505,,505,505,505,505,,505,505,,,505',
',,,,505,505,505,505,,,,,,,,,,,,,,505,505,,505,505,505,505,505,505,505',
'505,505,,505,507,507,505,,507,,,,,,,507,507,,507,507,507,507,,507,507',
',,507,,,,,507,507,507,507,,,,,,,,,,,,,,507,507,,507,507,507,507,507',
'507,507,507,507,,507,578,578,507,,578,,,,,,,578,578,,578,578,578,578',
',578,578,,,578,,,,,578,578,578,578,,,,,,,,,,,,,,578,578,,578,578,578',
'578,578,578,578,578,578,,578,579,579,578,,579,,,,,,,579,579,,579,579',
'579,579,,579,579,,,579,,,,,579,579,579,579,,,,,,,,,,,,,,579,579,,579',
'579,579,579,579,579,579,579,579,,579,,,579,731,731,731,731,731,731,731',
'731,731,731,731,,731,731,,,731,731,,,,,,,,,,,,,,,731,,731,,731,731,731',
'731,731,731,731,,731,,767,767,767,767,767,767,767,767,767,767,767,,767',
'767,731,731,767,767,,,,,,,,,,,,,,,767,,767,,767,767,767,767,767,767',
'767,,767,,,,823,823,,,823,,,,,,,823,823,767,823,823,823,823,,823,823',
',,823,,,,,823,823,823,823,,,,,,,,,,,,,,823,823,,823,823,823,823,823',
'823,823,823,823,,823,824,824,823,,824,,,,,,,824,824,,824,824,824,824',
',824,824,,,824,,,,,824,824,824,824,,,,,,,,,,,,,,824,824,,824,824,824',
'824,824,824,824,824,824,,824,,,824' ]
        racc_action_check = arr = ::Array.new(24137, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1221,    29,   nil,   133,   854,  4729,  4849,  4969,   -52,   -46,
   -41,   -31,    27,   271,   117,   206,   nil,  5081,  5201,  6042,
   100,   nil,  5321,  5441,  5561,   268,   141,  5681,  5801,   nil,
  1342,  5921,  6041,   nil,    91,   221,   220,   200,  6161,  6281,
  6401,   166,   357,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   212,  1463,  6521,  6641,  6761,    57,  6881,  7001,   nil,   nil,
   727,  7121,  7241,  7361, 22585,   nil,   nil,   nil,   nil,   nil,
    82,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  7481,   nil,   nil,   nil,  7601,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   298,   nil,   854,   nil,   nil,
   nil,  7721,  7841,  7961,  8081,  8201,   971,   nil,   340,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   182,   nil,  1584,  1705,  8321,  8441,
  8561,  8681, 22872, 22931,  8801,  8921,  9041,   nil,   385,   -52,
   295,   -51,   241,   298,  1826,   nil,   nil,  9161,  9281,  9401,
  9521,  9641,  9761,  9881, 10001, 10121, 10241, 10361, 10481, 10601,
 10721, 10841, 10961, 11081, 11201, 11321, 11441, 11561, 11681, 11801,
 11921, 12041, 12161, 12281,   nil,   nil,   nil,  7122,   nil,   264,
   289, 12401,   nil, 12521,   344,   nil,   nil,   nil,   nil,   nil,
   nil, 22990, 23049,   361, 12641, 12761,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 12881,   405,  1947,   416,   478,   442, 13001,
  2068,   476,   481,   521,   506,   496,   461,   158,   nil,   506,
   213,   nil,   nil,   237,   531,   532,   596,   nil,   534,   nil,
 13121,   nil,   597,   596,   429,   nil,   483,   241,   316, 13241,
   523,   388,   506,   441,   nil,   477,    -7,     8, 13361, 13481,
   172,    31,   491,    -9,   601,   567,    -1,   597,   nil,   nil,
   220,   265,   -23,   nil,   626,   nil,     9, 13601,   nil,   nil,
   288,   312,   351,   382,   407,   451,   452,   470,   nil,   482,
   nil, 13721,   nil,   205,   284,   317,   343,   -35,   351,   nil,
  1092,   nil,   nil,   nil,   nil,   nil,   nil, 13841,   nil,   nil,
   nil,   nil,   534,   536,   nil,   nil,   727,   nil,   520, 13953,
   nil,   521,   nil,   nil,  7242,   559,   246,   293, 14073,   nil,
   nil,     0,   566,   106,   nil, 14193, 14313,   nil,  7362,   nil,
   nil, 23108, 23167, 14433,   -37, 14553, 14673, 14793,   974,  1221,
   377,   549,   590,   601,   608,   609,  2794,  2915,  3036,  1342,
  1463,  1584,  1705,  1826,  1947,  2068,  2189,  2310,  2431,   459,
   579,  2552,  2673, 22806,   -50,   nil, 14913,   nil, 15033,   547,
   nil, 15153,   318,   nil,   nil,   371,   nil,   nil,   589,   560,
   -63,   558,   658,   nil,   nil, 15273,   -47,    92,   600,   nil,
   601,   568,   nil,   nil,   nil,   610, 15393, 23226, 23285,   651,
   612,   nil,   nil, 15513, 15633, 15753, 23344, 23403, 13002, 15873,
   688, 15993,   nil,   581,   nil,   nil, 16113,   nil,   nil, 16233,
 23451,   nil, 16353,   nil,   nil,   nil,  2189,   700,   nil,   nil,
  2310,    67,   108,   698,   706,  2431, 16473, 16593, 23516, 23575,
     4,   nil,   nil,   727,   nil, 23634, 16713, 23693,   nil,   nil,
 16833,   327,   -34,  2552,   537,   nil,   nil,   nil,   -32,   nil,
   nil,   nil,   711,   nil,   nil,   nil,   595,   nil,   147,   nil,
   nil,   597,   nil,   nil, 16953,   nil,   nil, 17065, 17185,   nil,
   294, 17305, 17425,   633,   nil,   nil, 17545,   641,   nil, 17665,
    70,    85,   487,   607,   644,  1095, 17785, 17905,   nil,  2673,
 18025,   613,   nil,   656, 18145,   nil,   659,   nil,   672,   nil,
   nil,   nil,   nil,   nil,   113,   nil,   683,   685, 23752, 23811,
 18265, 22742,   -67,   647, 18385,   nil,   697,   nil,  2794,  2915,
   nil,   -30,   nil,   714,    62,   111,   724,   308,   780,   727,
 19466,   751,   755,    -2,   813,   nil,  3036,   697,   751,   nil,
   nil,   749, 18505,   nil,   nil,   510,   nil,   823,   nil,   nil,
   nil,   nil,   nil,   835,   nil,   836,   720,    15, 18625,   758,
    13,    24,    25,   137, 18745,   340,   837,   nil,   761,  3157,
   350,   nil,   nil,   853,  3278,   433,   372,   737,   741,   742,
   nil,   nil,   nil,   nil,   nil,   749,   nil,   nil,   nil,   nil,
   830,   nil,   nil,   831, 22694,   794,   nil,   nil,   nil,   nil,
   nil,  3399,   nil,   nil,   nil,   nil,   nil, 19946,   763, 18865,
 18985,   nil, 21146,   nil, 21386,   nil,   nil, 21746,   nil, 22106,
 19105, 19225, 19345,   214, 22346,   nil,   764,   974, 19465,   nil,
   815,   921,   805,   nil, 19585,   808,  3520,   nil,   nil,   854,
   858,   -62,   918, 19705,   nil, 19825,   823,   nil,   863,   842,
   952,   730,   nil,   nil,  3641,   nil,   nil,    31, 19945,   nil,
   nil, 23859,   953,   nil, 20065,   955,  3762,  3883,   nil,   nil,
 20185,  4004,   nil,    26,   132,   nil,   962,   nil,  4125,   nil,
   963,   850,   nil,   657,   nil,   -43,   nil,   nil,   456, 20305,
   nil,   nil,   nil,   nil,   870,   nil,   nil, 23905, 20425, 20545,
   843,   845,   928,   847,   857,   890,   nil,   nil,   nil,   nil,
 20665,   nil,   878,   901,   888,   nil, 20785,   889, 20905,   nil,
   nil,   nil,   nil,   nil,  4246,   nil,   nil,   nil,    32,   nil,
  1007,  1008, 21025,   148,   nil,   nil,  1010,   nil,   933,   905,
   908,   nil,   nil,   909,   919,   nil,   nil,   904,   nil,   nil,
 21145,  1095, 21265, 23967, 24026,   848,   955, 21385,  5922,   nil,
   nil,   nil, 21505,   926,   nil, 21625,   929,  1050,  4367,   nil,
   nil,   nil,   nil,   nil,   nil,  4488,   nil,   nil,   173,   nil,
   nil,   nil,  4609,   nil,   932,   964,   970,   343,   363,   393,
   873, 21745,   nil,   nil, 21865,   938,   nil, 21985,   nil,   nil,
   564,  1056,   941,  1059,   974, 22105,   851,   nil,   946,   nil,
 22225,   954,   nil,   nil,   nil,   nil, 22345,   nil,   nil, 22465,
   nil,   nil,   956,   nil ]

racc_action_default = [
    -4,  -497,    -1,  -485,    -5,  -497,  -497,  -497,  -497,  -497,
  -497,  -497,  -497,  -497,  -271,   -32,   -33,  -497,  -497,   -38,
   -40,   -41,  -282,  -315,  -316,   -45,  -249,  -361,  -285,   -58,
    -4,   -62,   -67,   -68,  -497,  -428,  -497,  -497,  -497,  -497,
  -497,  -487,  -214,  -264,  -265,  -266,  -267,  -268,  -269,  -270,
  -475,    -4,  -497,  -496,  -467,  -288,  -497,  -497,  -292,  -295,
  -485,  -497,  -497,  -497,  -497,  -317,  -318,  -381,  -382,  -383,
  -384,  -385,  -399,  -388,  -401,  -401,  -392,  -397,  -411,  -401,
  -413,  -414,  -417,  -418,  -419,  -420,  -421,  -422,  -423,  -424,
  -425,  -426,  -427,  -430,  -431,  -497,    -3,  -486,  -492,  -493,
  -494,  -497,  -497,  -497,  -497,  -497,    -6,    -8,  -497,   -93,
   -94,   -95,   -96,   -97,   -98,   -99,  -100,  -101,  -105,  -106,
  -107,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,
  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,
  -167,  -168,  -169,  -170,   -13,  -102,    -4,    -4,  -497,  -497,
  -497,  -496,  -497,  -497,  -497,  -497,  -497,   -36,  -497,  -428,
  -497,  -271,  -497,  -497,    -4,   -37,  -206,  -497,  -497,  -497,
  -497,  -497,  -497,  -497,  -497,  -497,  -497,  -497,  -497,  -497,
  -497,  -497,  -497,  -497,  -497,  -497,  -497,  -497,  -497,  -497,
  -497,  -497,  -497,  -497,  -351,  -353,   -42,  -215,  -228,  -258,
  -258,  -497,  -236,  -497,  -259,  -282,  -315,  -316,  -470,   -43,
   -44,  -497,  -497,   -50,  -496,  -497,  -287,  -356,  -362,  -364,
   -56,  -360,   -57,  -497,   -58,    -4,  -497,  -497,   -63,   -65,
    -4,   -72,  -497,  -497,   -79,  -285,  -487,  -497,  -319,  -361,
  -497,   -66,   -70,  -278,  -415,  -416,  -497,  -191,  -192,  -207,
  -497,  -488,  -373,  -497,  -274,  -216,  -487,  -489,  -489,  -497,
  -497,  -489,  -497,  -489,  -289,   -39,  -497,  -497,  -497,  -497,
  -485,  -497,  -486,  -428,  -497,  -497,  -271,  -497,  -331,  -332,
   -88,   -89,  -497,   -91,  -497,  -271,  -497,  -497,  -428,  -308,
   -93,   -94,  -131,  -132,  -148,  -153,  -160,  -163,  -310,  -497,
  -465,  -497,  -386,  -497,  -497,  -497,  -497,  -497,  -497,   894,
    -7,  -495,   -14,   -15,   -16,   -17,   -18,  -497,   -10,   -11,
   -12,  -103,  -497,  -497,   -21,   -29,  -171,  -259,  -497,  -497,
   -22,   -30,   -31,   -23,  -173,  -497,  -476,  -477,  -226,  -478,
  -479,  -476,  -249,  -477,  -359,  -481,  -482,   -28,  -180,   -34,
   -35,  -497,  -497,  -496,  -278,  -497,  -497,  -497,  -181,  -182,
  -183,  -184,  -185,  -186,  -187,  -188,  -193,  -194,  -195,  -196,
  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,  -205,  -208,
  -209,  -210,  -211,  -497,  -347,  -229,  -497,  -231,  -497,  -258,
  -256,  -497,  -249,  -476,  -477,  -249,   -48,   -51,  -497,  -487,
  -487,  -258,  -228,  -250,  -251,  -252,  -347,  -347,  -497,  -284,
  -497,   -59,  -276,   -71,   -64,  -497,  -496,  -497,  -497,   -78,
  -497,  -415,  -416,  -497,  -497,  -497,  -497,  -497,  -212,  -497,
  -496,  -496,  -273,  -487,  -217,  -218,  -491,  -490,  -220,  -491,
  -487,  -280,  -491,  -469,  -281,  -468,    -4,  -320,  -321,  -322,
    -4,  -497,  -497,  -497,  -497,    -4,  -497,  -496,  -497,  -497,
  -278,  -301,   -88,   -89,   -90,  -497,  -496,  -497,  -304,  -432,
  -497,  -497,  -497,    -4,  -445,  -312,  -483,  -484,  -487,  -387,
  -400,  -403,  -497,  -405,  -389,  -402,  -497,  -391,  -497,  -394,
  -396,  -497,  -412,    -9,  -497,   -19,   -20,  -497,  -497,  -263,
  -279,  -497,  -497,   -52,  -227,  -357,  -497,   -54,  -358,  -497,
  -476,  -477,  -480,  -277,  -497,  -171,  -497,  -497,  -349,    -4,
  -497,  -258,  -257,  -260,  -497,  -471,  -497,  -235,  -497,  -472,
   -46,  -354,   -47,  -355,  -347,  -222,  -497,  -497,  -497,  -497,
  -497,   -38,  -497,  -258,  -497,  -248,  -497,  -254,    -4,    -4,
  -283,   -59,   -69,  -497,  -476,  -477,  -226,   -75,   -77,  -497,
  -179,  -189,  -190,  -497,  -496,  -329,    -4,  -374,  -496,  -375,
  -376,  -497,  -497,  -260,  -221,  -496,  -323,  -496,  -293,  -324,
  -325,  -326,  -296,  -497,  -299,  -497,  -367,  -497,  -497,  -497,
  -476,  -477,  -480,  -277,  -497,   -88,   -89,   -92,  -497,    -4,
  -497,  -434,  -306,  -497,    -4,  -445,  -497,  -464,  -464,  -464,
  -444,  -446,  -447,  -448,  -449,  -450,  -451,  -454,  -456,  -457,
  -459,  -460,  -461,  -497,  -497,  -497,  -404,  -407,  -408,  -409,
  -410,    -4,  -390,  -393,  -395,  -398,  -104,  -172,  -261,  -497,
  -497,   -25,  -175,   -26,  -176,   -53,   -27,  -177,   -55,  -178,
  -497,  -497,  -497,  -279,  -213,  -333,  -335,  -345,  -497,  -348,
  -497,  -497,  -258,  -233,  -497,  -258,    -4,  -223,  -224,  -226,
  -226,  -487,  -497,  -497,  -241,  -497,  -258,  -253,  -497,  -497,
  -497,   -73,  -286,    -2,    -4,  -380,  -330,  -497,  -497,  -378,
  -275,  -487,  -497,  -327,  -497,  -497,    -4,    -4,  -298,  -300,
  -497,    -4,  -369,  -279,  -497,  -279,  -497,  -433,    -4,  -309,
  -497,  -487,  -436,  -497,  -440,  -497,  -442,  -443,  -497,  -497,
  -458,  -462,  -313,  -466,  -497,  -262,   -24,  -174,  -497,  -336,
   -80,  -497,  -497,   -87,  -344,  -497,  -346,  -350,  -352,  -230,
  -497,  -232,  -497,  -497,  -258,  -238,  -497,  -258,  -497,  -247,
  -255,  -363,  -365,  -379,    -4,  -377,  -219,  -290,  -497,  -291,
  -497,  -497,  -497,  -496,  -302,  -305,  -497,  -311,  -497,  -464,
  -464,  -452,  -463,  -464,  -497,  -455,  -453,  -445,  -406,  -334,
  -497,  -341,  -496,  -497,  -497,   -86,  -497,  -497,  -258,   -49,
  -225,  -237,  -497,  -258,  -243,  -497,  -258,  -373,    -4,  -294,
  -297,  -368,  -366,  -370,  -371,    -4,  -307,  -435,  -497,  -438,
  -439,  -441,    -4,  -337,  -340,  -497,  -497,   -82,   -84,   -83,
   -85,  -497,  -343,  -234,  -497,  -258,  -239,  -497,  -242,  -372,
  -496,  -497,  -464,  -497,  -497,  -497,   -81,  -342,  -258,  -244,
  -497,  -258,  -328,  -303,  -437,  -314,  -497,  -339,  -240,  -497,
  -245,  -338,  -258,  -246 ]

clist = [
'10,205,240,240,240,10,268,438,112,112,100,300,338,470,293,644,242,242',
'242,440,107,185,238,238,238,115,115,117,117,494,10,486,490,650,303,437',
'239,239,239,253,260,262,604,290,365,372,732,618,622,96,565,10,815,296',
'257,261,281,571,504,520,573,318,529,236,249,250,112,100,301,559,810',
'264,813,266,106,475,478,344,345,483,1,485,348,723,754,756,757,326,329',
'306,307,588,589,310,97,13,184,10,319,357,13,565,574,534,587,10,311,443',
'586,718,340,302,198,198,304,317,508,198,198,198,339,515,473,308,736',
'13,272,272,309,737,634,278,278,845,352,353,354,355,639,748,513,197,514',
'664,817,815,13,198,198,375,696,198,198,700,424,198,314,324,324,446,447',
'278,278,278,650,872,350,627,842,608,727,364,370,373,356,342,294,387',
'343,346,305,305,528,347,305,666,10,10,671,735,751,296,13,809,811,386',
'198,198,198,198,13,2,368,368,10,,,,,,,623,,,,,,,,706,,,,605,610,305',
'305,305,305,,,267,,,240,240,,,,,,637,,240,674,,849,850,242,242,851,',
',,442,238,,242,,,,,,238,,10,,,441,239,10,,,,,,,239,460,,,13,13,198,198',
'198,198,,,198,198,198,14,454,,439,444,14,474,13,804,882,,427,448,257',
'264,261,450,884,,264,,455,,,,100,852,389,390,,14,274,274,685,565,609',
',688,,,,509,571,573,650,565,,,,491,492,14,,711,,,,198,198,554,741,316',
'325,325,493,725,198,112,13,729,,,272,13,,,605,278,605,533,,,,843,115',
',117,,,,,,,,,362,363,14,,543,,296,386,547,,14,,,,,,198,198,267,561,',
',,548,,,,593,,,,,,,,198,,,583,,,,,,,305,305,,,198,,,585,,576,577,,,570',
',,572,,,512,794,,,629,296,565,,,386,,,,638,518,267,,,386,,267,,,,611',
'643,,14,14,,,614,,,368,10,,198,,10,,567,,,10,14,296,619,619,,386,565',
',,,296,386,,,626,,,10,,,,,641,642,665,844,,838,681,683,,,,686,,,695',
',,,112,,,,198,,,640,,,,,676,,,198,,115,,117,605,14,869,10,561,274,14',
',198,,,,,294,,,,,,,,,,,712,13,,,,13,,,10,10,13,,198,603,,,378,382,35',
',,198,746,35,,198,10,750,13,,,,762,12,,,,,12,,,,,605,703,,,548,35,271',
'271,,,,305,,198,198,,10,,198,,12,10,,714,747,,35,,,272,752,13,432,435',
'278,,313,328,328,328,766,12,,112,744,,,,10,,,,198,,,,,,,,13,13,,,615',
',,,617,,787,,35,625,774,776,,,13,,35,,,10,785,,,12,806,,783,,,,,12,',
',,,,10,,,784,795,198,,,,796,13,,10,10,,13,,10,,,819,,,,10,,,619,,808',
',,,,305,,701,,,,,779,13,798,781,,,,,,,198,,,14,789,856,,14,,35,35,,14',
',719,720,,771,771,10,378,382,278,278,12,12,13,35,,,14,,726,,,,,865,',
'670,873,,12,,13,853,854,296,771,,,386,862,278,198,,13,13,,,,13,,10,',
',,,13,,10,,831,,274,834,14,10,,,,,,305,,,877,599,35,272,,,271,35,278',
',599,764,,,887,,,12,,14,14,,12,,,891,,,13,,863,,,,,866,,14,868,,,,599',
',,,782,,599,,,,,,771,771,198,,,278,278,771,,,793,,278,879,,,14,,13,',
',14,800,801,,13,888,803,,890,,,13,,,,,,,,893,771,,,,,278,,14,,,,,,,771',
',,,,278,,,,,,771,709,710,,,278,,,773,773,,,,,837,,,14,,,,,,,,,,,,,,',
',,,14,,,,773,,,,,,,,14,14,,,,14,,,,,,870,14,,,,,,871,,,,,,,,,,,,,,,274',
',,,,,,,,,,,,,,,,,,,,,,35,,14,,35,,,,,35,,,,,,12,,,,12,,,,,12,,,35,773',
'773,,,,,,773,,,,,,,12,,,,14,,,,,,,14,,,,,,,14,,,,,,,,,773,,271,,35,',
',,,,,,,,773,,,,,12,,,,,,773,,,,,,,,35,35,,,,,,,,,,,,,,12,12,,35,,,,',
',,,,,,,,,,12,,,,,,,,,599,,,,,,,,,35,,,,,35,,,,,,,,,,12,,,,,12,,,,,,',
',,,,,35,,,,,,,,,,,,,,,12,,,,,,,,,,,770,770,,,,,,,,35,,,206,,,,237,237',
'237,,,,,,12,,,35,,,,770,287,288,289,,,,,35,35,,12,,35,,,237,237,,,35',
',,12,12,,,,12,,,,,367,371,12,,,,,,271,,,,,,,,,,,,,,,,,,,,,,,,,35,,,',
',,,,,,,,,,,12,,,,,429,,430,,,,770,770,,,,,,770,,,,,,,,,,,35,,,,,,,35',
',,,,,,35,12,,,,,,,12,770,,,,,,12,,,,,,,,770,,,,366,237,374,237,,,388',
'770,,,,,,,,,,,,206,398,399,400,401,402,403,404,405,406,407,408,409,410',
'411,412,413,414,415,416,417,418,419,420,421,422,423,,,,,,,,237,,237',
',,,,,,,539,,,237,237,,,,,,,,237,,,,,,,,,,,,,,,,,,,,,,,,,,,468,,,,,,',
',,480,,,,,,,,,563,,566,,,569,,,,,,,,,,,,,,582,,,,,,,,,,,,,,,,,,,,,,',
',,,607,,,,,613,,,566,,,613,,,,,237,,,,,,,,,367,,,,,,,,,,,,,,,237,,388',
'555,374,,,,,,,,,,,,,,,,,,,,,,,678,,,,,,237,,237,,,237,,,,,,,,,,,702',
',,581,705,,,,,,,,,,237,,,,,,563,600,601,602,716,,26,,,237,,26,,,237',
',,237,,,237,,,26,26,,,,26,26,26,,,,237,237,26,,,,,,,,237,,,,742,,,,',
',,,,26,26,26,,,26,26,,,26,,,,,,,,,677,237,,,682,684,,,,687,,,689,,,',
',,,694,,,,237,765,,,237,26,,,,26,26,26,26,26,,,,,,,237,,,,237,,566,',
',,,,,,,,,566,,,,,,,,,,,,,,,731,,,,,,,,,,613,,,,,,237,,,,,,,,,,,,,816',
',,,,,,,,,,,,26,26,26,26,26,26,,,26,26,26,,,,833,,836,,26,,,,,,,237,767',
',,,841,,,,,,682,684,687,,,,,,,,,,,,237,,,,,,,,,237,563,237,,566,,,,',
'26,26,,,,,,,,26,,26,,,,,26,,237,,,,,,878,,,881,,,,,,,,,,237,,,566,,',
',,,767,,,892,,,,,26,26,,,828,,,,,,237,,237,,,,,,,26,,,,,,,237,,,,,,',
'26,,,,,,,,,,,,,237,,,,,,,,,,237,,,237,,,,,,,,,,,,,,,,,,,,,,,,,,26,,',
'237,,,237,,,,,,,,,,,,,237,,,,,,,,,237,,,,,,,,,,,,,,,,,,,,,,,,26,,,,',
',,,,,,26,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,26,,,,26,,,,,26,,26,,,,,,,,',
'26,,,,26,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,26,,,,26,,,,,,,,,,,,,26',
',,,,,,,,,,,,,,,,,,,,26,,,,,,,,26,26,,,,,,,,,,,,,,,,,26,,,,,,,,,,,,,',
',,,,,,,,,,,,,,26,,,,,26,,,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,,,,,,,',
'26,,,,,,,,,,,,,,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,,26,,,,,,,,,,26,,26,26',
',,,26,,,,,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,,,,',
',,,,,,,,,,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,26,,,,,,,26,,,,,,,26' ]
        racc_goto_table = arr = ::Array.new(2610, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'14,15,56,56,56,14,39,53,45,45,82,19,44,4,3,83,60,60,60,29,11,11,26,26',
'26,48,48,49,49,79,14,76,76,126,56,32,54,54,54,31,31,31,5,51,21,21,77',
'78,78,8,131,14,128,26,57,57,40,58,42,117,58,14,117,28,28,28,45,82,54',
'33,124,36,124,37,9,55,55,114,114,55,1,55,114,6,125,125,125,43,43,13',
'13,33,33,13,10,18,12,14,16,24,18,131,34,50,61,14,8,62,64,65,72,73,18',
'18,74,80,81,18,18,18,84,85,86,87,88,18,18,18,89,90,91,52,52,92,13,13',
'13,13,93,94,95,23,96,97,98,128,18,18,18,19,99,18,18,100,102,18,18,18',
'18,104,105,52,52,52,126,124,9,106,107,108,109,15,15,15,9,112,23,15,113',
'115,23,23,116,118,23,119,14,14,120,5,121,26,18,123,127,45,18,18,18,18',
'18,2,54,54,14,,,,,,,79,,,,,,,,33,,,,53,53,23,23,23,23,,,2,,,56,56,,',
',,,42,,56,117,,125,125,60,60,125,,,,26,26,,60,,,,,,26,,14,,,54,54,14',
',,,,,,54,51,,,18,18,18,18,18,18,,,18,18,18,20,40,,28,28,20,51,18,78',
'77,,59,28,57,36,57,37,125,,36,,37,,,,82,83,23,23,,20,20,20,32,131,21',
',32,,,,82,58,58,126,131,,,,13,13,20,,29,,,,18,18,19,76,20,20,20,8,53',
'18,45,18,53,,,18,18,,,53,52,53,11,,,,5,48,,49,,,,,,,,,2,2,20,,31,,26',
'45,31,,20,,,,,,18,18,2,56,,,,57,,,,19,,,,,,,,18,,,56,,,,,,,23,23,,,18',
',,60,,51,51,,,31,,,31,,,23,76,,,19,26,131,,,45,,,,19,23,2,,,45,,2,,',
',51,3,,20,20,,,51,,,54,14,,18,,14,,59,,,14,20,26,82,82,,45,131,,,,26',
'45,,,54,,,14,,,,,82,82,51,79,,76,15,15,,,,15,,,39,,,,45,,,,18,,,13,',
',,,11,,,18,,48,,49,53,20,4,14,56,20,20,,18,,,,,23,,,,,,,,,,,26,18,,',
',18,,,14,14,18,,18,23,,,30,30,41,,,18,3,41,,18,14,3,18,,,,44,17,,,,',
'17,,,,,53,59,,,57,41,41,41,,,,23,,18,18,,14,,18,,17,14,,59,82,,41,,',
'18,82,18,30,30,52,,41,41,41,41,15,17,,45,13,,,,14,,,,18,,,,,,,,18,18',
',,2,,,,2,,56,,41,2,14,14,,,18,,41,,,14,60,,,17,3,,51,,,,,17,,,,,,14',
',,54,14,18,,,,51,18,,14,14,,18,,14,,,39,,,,14,,,82,,51,,,,,23,,2,,,',
',59,18,13,59,,,,,,,18,,,20,59,19,,20,,41,41,,20,,2,2,,18,18,14,30,30',
'52,52,17,17,18,41,,,20,,2,,,,,56,,20,3,,17,,18,14,14,26,18,,,45,14,52',
'18,,18,18,,,,18,,14,,,,,18,,14,,59,,20,59,20,14,,,,,,23,,,14,30,41,18',
',,41,41,52,,30,2,,,14,,,17,,20,20,,17,,,14,,,18,,59,,,,,59,,20,59,,',
',30,,,,2,,30,,,,,,18,18,18,,,52,52,18,,,2,,52,59,,,20,,18,,,20,2,2,',
'18,59,2,,59,,,18,,,,,,,,59,18,,,,,52,,20,,,,,,,18,,,,,52,,,,,,18,30',
'30,,,52,,,20,20,,,,,2,,,20,,,,,,,,,,,,,,,,,,20,,,,20,,,,,,,,20,20,,',
',20,,,,,,2,20,,,,,,2,,,,,,,,,,,,,,,20,,,,,,,,,,,,,,,,,,,,,,,41,,20,',
'41,,,,,41,,,,,,17,,,,17,,,,,17,,,41,20,20,,,,,,20,,,,,,,17,,,,20,,,',
',,,20,,,,,,,20,,,,,,,,,20,,41,,41,,,,,,,,,,20,,,,,17,,,,,,20,,,,,,,',
'41,41,,,,,,,,,,,,,,17,17,,41,,,,,,,,,,,,,,,17,,,,,,,,,30,,,,,,,,,41',
',,,,41,,,,,,,,,,17,,,,,17,,,,,,,,,,,,41,,,,,,,,,,,,,,,17,,,,,,,,,,,41',
'41,,,,,,,,41,,,25,,,,25,25,25,,,,,,17,,,41,,,,41,25,25,25,,,,,41,41',
',17,,41,,,25,25,,,41,,,17,17,,,,17,,,,,22,22,17,,,,,,41,,,,,,,,,,,,',
',,,,,,,,,,,,41,,,,,,,,,,,,,,,17,,,,,22,,22,,,,41,41,,,,,,41,,,,,,,,',
',,41,,,,,,,41,,,,,,,41,17,,,,,,,17,41,,,,,,17,,,,,,,,41,,,,25,25,25',
'25,,,25,41,,,,,,,,,,,,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25',
'25,25,25,25,25,25,25,25,25,25,25,,,,,,,,25,,25,,,,,,,,22,,,25,25,,,',
',,,,25,,,,,,,,,,,,,,,,,,,,,,,,,,,25,,,,,,,,,25,,,,,,,,,22,,22,,,22,',
',,,,,,,,,,,,22,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,,22,,,22,,,22,,,,,25,',
',,,,,,,22,,,,,,,,,,,,,,,25,,25,25,25,,,,,,,,,,,,,,,,,,,,,,,22,,,,,,25',
',25,,,25,,,,,,,,,,,22,,,25,22,,,,,,,,,,25,,,,,,22,25,25,25,22,,35,,',
'25,,35,,,25,,,25,,,25,,,35,35,,,,35,35,35,,,,25,25,35,,,,,,,,25,,,,22',
',,,,,,,,35,35,35,,,35,35,,,35,,,,,,,,,25,25,,,25,25,,,,25,,,25,,,,,',
',25,,,,25,22,,,25,35,,,,35,35,35,35,35,,,,,,,25,,,,25,,22,,,,,,,,,,',
'22,,,,,,,,,,,,,,,25,,,,,,,,,,22,,,,,,25,,,,,,,,,,,,,22,,,,,,,,,,,,,35',
'35,35,35,35,35,,,35,35,35,,,,22,,22,,35,,,,,,,25,25,,,,22,,,,,,25,25',
'25,,,,,,,,,,,,25,,,,,,,,,25,22,25,,22,,,,,35,35,,,,,,,,35,,35,,,,,35',
',25,,,,,,22,,,22,,,,,,,,,,25,,,22,,,,,,25,,,22,,,,,35,35,,,25,,,,,,25',
',25,,,,,,,35,,,,,,,25,,,,,,,35,,,,,,,,,,,,,25,,,,,,,,,,25,,,25,,,,,',
',,,,,,,,,,,,,,,,,,,,35,,,25,,,25,,,,,,,,,,,,,25,,,,,,,,,25,,,,,,,,,',
',,,,,,,,,,,,,,35,,,,,,,,,,,35,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,35,,,,35',
',,,,35,,35,,,,,,,,,35,,,,35,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,',
',35,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,35,35,,,,,,,,,,,,,',
',,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,35,,,,,35,,,,,,,,,,,,,,,,,,',
',,,,,,,,35,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,35',
',,,,,,,,,35,,35,35,,,,35,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,35,,,,,,',
'35,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(2610, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,    80,   201,   -37,  -279,  -428,  -521,   nil,    46,    69,
    91,    14,    89,    33,     0,   -17,    37,   613,    95,   -42,
   292,  -144,  1171,   124,    -8,  1289,     0,   nil,    41,  -235,
   404,    13,  -218,  -355,  -334,  1757,    41,    43,   nil,   -25,
    24,   598,  -264,    25,   -52,     2,   nil,   nil,    19,    21,
  -258,     2,   100,  -247,    14,  -222,   -20,    28,  -375,    63,
    -6,  -341,  -148,   nil,  -337,  -478,   nil,   nil,   nil,   nil,
   nil,   nil,    46,    57,    59,   nil,  -275,  -569,  -444,  -282,
    54,  -210,     7,  -499,    56,  -218,  -172,    65,  -494,    69,
  -493,  -371,  -671,  -370,  -503,  -189,  -196,  -372,  -618,  -407,
  -404,   nil,   -80,   nil,   -99,   -99,  -329,  -635,  -302,  -438,
   nil,   nil,   105,   106,     3,   103,  -164,  -284,   106,  -337,
  -335,  -455,   nil,  -560,  -683,  -563,  -481,  -559,  -703,   nil,
   nil,  -378 ]

racc_goto_default = [
   nil,   nil,   292,   nil,   nil,   733,   nil,     3,   nil,     4,
   312,   nil,   nil,   nil,   202,    16,    11,   203,   286,   nil,
   201,   nil,   244,    15,   nil,    19,    20,    21,   nil,    25,
   596,   nil,   nil,   nil,   nil,   277,    29,   nil,    31,    34,
    33,   199,   323,   nil,   114,   380,   113,   116,    68,    69,
   nil,   nil,    42,   295,   297,   nil,   298,   544,   545,   425,
   562,   nil,   nil,   255,   nil,   nil,    43,    44,    45,    46,
    47,    48,    49,   nil,   256,    55,   nil,   nil,   nil,   nil,
   nil,   nil,   487,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   235,   nil,   384,   nil,   nil,   nil,   nil,   nil,   nil,
    67,    70,    71,   nil,   nil,   nil,   nil,   525,   nil,   nil,
   nil,   646,   647,   648,   649,   nil,   812,   656,   657,   660,
   663,   248 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 132, :_reduce_1,
  4, 134, :_reduce_2,
  2, 133, :_reduce_3,
  0, 138, :_reduce_4,
  1, 138, :_reduce_5,
  2, 138, :_reduce_6,
  3, 138, :_reduce_7,
  0, 155, :_reduce_8,
  4, 140, :_reduce_9,
  3, 140, :_reduce_10,
  3, 140, :_reduce_11,
  3, 140, :_reduce_12,
  2, 140, :_reduce_13,
  3, 140, :_reduce_14,
  3, 140, :_reduce_15,
  3, 140, :_reduce_16,
  3, 140, :_reduce_17,
  3, 140, :_reduce_18,
  4, 140, :_reduce_19,
  4, 140, :_reduce_20,
  3, 140, :_reduce_21,
  3, 140, :_reduce_22,
  3, 140, :_reduce_23,
  6, 140, :_reduce_24,
  5, 140, :_reduce_25,
  5, 140, :_reduce_26,
  5, 140, :_reduce_27,
  3, 140, :_reduce_28,
  3, 140, :_reduce_29,
  3, 140, :_reduce_30,
  3, 140, :_reduce_31,
  1, 140, :_reduce_none,
  1, 154, :_reduce_none,
  3, 154, :_reduce_34,
  3, 154, :_reduce_35,
  2, 154, :_reduce_36,
  2, 154, :_reduce_37,
  1, 154, :_reduce_none,
  1, 144, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  2, 146, :_reduce_42,
  2, 146, :_reduce_43,
  2, 146, :_reduce_44,
  1, 158, :_reduce_none,
  4, 158, :_reduce_46,
  4, 158, :_reduce_47,
  0, 165, :_reduce_48,
  5, 163, :_reduce_49,
  2, 157, :_reduce_50,
  3, 157, :_reduce_51,
  4, 157, :_reduce_52,
  5, 157, :_reduce_53,
  4, 157, :_reduce_54,
  5, 157, :_reduce_55,
  2, 157, :_reduce_56,
  2, 157, :_reduce_57,
  1, 147, :_reduce_58,
  3, 147, :_reduce_59,
  1, 168, :_reduce_60,
  3, 168, :_reduce_61,
  1, 167, :_reduce_62,
  2, 167, :_reduce_63,
  3, 167, :_reduce_64,
  2, 167, :_reduce_65,
  2, 167, :_reduce_66,
  1, 167, :_reduce_67,
  1, 170, :_reduce_none,
  3, 170, :_reduce_69,
  2, 169, :_reduce_70,
  3, 169, :_reduce_71,
  1, 171, :_reduce_72,
  4, 171, :_reduce_73,
  3, 171, :_reduce_74,
  3, 171, :_reduce_75,
  3, 171, :_reduce_76,
  3, 171, :_reduce_77,
  2, 171, :_reduce_78,
  1, 171, :_reduce_79,
  1, 145, :_reduce_80,
  4, 145, :_reduce_81,
  3, 145, :_reduce_82,
  3, 145, :_reduce_83,
  3, 145, :_reduce_84,
  3, 145, :_reduce_85,
  2, 145, :_reduce_86,
  1, 145, :_reduce_87,
  1, 173, :_reduce_88,
  1, 173, :_reduce_none,
  2, 174, :_reduce_90,
  1, 174, :_reduce_91,
  3, 174, :_reduce_92,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 178, :_reduce_98,
  1, 178, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 143, :_reduce_102,
  0, 181, :_reduce_103,
  4, 143, :_reduce_104,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  3, 156, :_reduce_171,
  5, 156, :_reduce_172,
  3, 156, :_reduce_173,
  6, 156, :_reduce_174,
  5, 156, :_reduce_175,
  5, 156, :_reduce_176,
  5, 156, :_reduce_177,
  5, 156, :_reduce_178,
  4, 156, :_reduce_179,
  3, 156, :_reduce_180,
  3, 156, :_reduce_181,
  3, 156, :_reduce_182,
  3, 156, :_reduce_183,
  3, 156, :_reduce_184,
  3, 156, :_reduce_185,
  3, 156, :_reduce_186,
  3, 156, :_reduce_187,
  3, 156, :_reduce_188,
  4, 156, :_reduce_189,
  4, 156, :_reduce_190,
  2, 156, :_reduce_191,
  2, 156, :_reduce_192,
  3, 156, :_reduce_193,
  3, 156, :_reduce_194,
  3, 156, :_reduce_195,
  3, 156, :_reduce_196,
  3, 156, :_reduce_197,
  3, 156, :_reduce_198,
  3, 156, :_reduce_199,
  3, 156, :_reduce_200,
  3, 156, :_reduce_201,
  3, 156, :_reduce_202,
  3, 156, :_reduce_203,
  3, 156, :_reduce_204,
  3, 156, :_reduce_205,
  2, 156, :_reduce_206,
  2, 156, :_reduce_207,
  3, 156, :_reduce_208,
  3, 156, :_reduce_209,
  3, 156, :_reduce_210,
  3, 156, :_reduce_211,
  3, 156, :_reduce_212,
  5, 156, :_reduce_213,
  1, 156, :_reduce_none,
  1, 153, :_reduce_none,
  1, 150, :_reduce_none,
  2, 150, :_reduce_217,
  2, 150, :_reduce_218,
  5, 150, :_reduce_219,
  2, 150, :_reduce_220,
  3, 150, :_reduce_221,
  3, 188, :_reduce_222,
  4, 188, :_reduce_223,
  4, 188, :_reduce_224,
  6, 188, :_reduce_225,
  0, 189, :_reduce_226,
  1, 189, :_reduce_none,
  1, 159, :_reduce_228,
  2, 159, :_reduce_229,
  5, 159, :_reduce_230,
  2, 159, :_reduce_231,
  5, 159, :_reduce_232,
  4, 159, :_reduce_233,
  7, 159, :_reduce_234,
  3, 159, :_reduce_235,
  1, 159, :_reduce_236,
  4, 192, :_reduce_237,
  3, 192, :_reduce_238,
  5, 192, :_reduce_239,
  7, 192, :_reduce_240,
  2, 192, :_reduce_241,
  5, 192, :_reduce_242,
  4, 192, :_reduce_243,
  6, 192, :_reduce_244,
  7, 192, :_reduce_245,
  9, 192, :_reduce_246,
  3, 192, :_reduce_247,
  1, 192, :_reduce_248,
  0, 194, :_reduce_249,
  2, 162, :_reduce_250,
  1, 193, :_reduce_251,
  0, 195, :_reduce_252,
  3, 193, :_reduce_253,
  0, 196, :_reduce_254,
  4, 193, :_reduce_255,
  2, 191, :_reduce_256,
  2, 190, :_reduce_257,
  0, 190, :_reduce_258,
  1, 185, :_reduce_259,
  3, 185, :_reduce_260,
  3, 152, :_reduce_261,
  4, 152, :_reduce_262,
  2, 152, :_reduce_263,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_272,
  3, 183, :_reduce_273,
  0, 217, :_reduce_274,
  5, 183, :_reduce_275,
  3, 183, :_reduce_276,
  3, 183, :_reduce_277,
  2, 183, :_reduce_278,
  4, 183, :_reduce_279,
  3, 183, :_reduce_280,
  3, 183, :_reduce_281,
  1, 183, :_reduce_282,
  4, 183, :_reduce_283,
  3, 183, :_reduce_284,
  1, 183, :_reduce_285,
  5, 183, :_reduce_286,
  2, 183, :_reduce_287,
  1, 183, :_reduce_none,
  2, 183, :_reduce_289,
  6, 183, :_reduce_290,
  6, 183, :_reduce_291,
  0, 218, :_reduce_292,
  0, 219, :_reduce_293,
  7, 183, :_reduce_294,
  0, 220, :_reduce_295,
  0, 221, :_reduce_296,
  7, 183, :_reduce_297,
  5, 183, :_reduce_298,
  4, 183, :_reduce_299,
  5, 183, :_reduce_300,
  0, 222, :_reduce_301,
  0, 223, :_reduce_302,
  9, 183, :_reduce_303,
  0, 224, :_reduce_304,
  6, 183, :_reduce_305,
  0, 225, :_reduce_306,
  7, 183, :_reduce_307,
  0, 226, :_reduce_308,
  5, 183, :_reduce_309,
  0, 227, :_reduce_310,
  6, 183, :_reduce_311,
  0, 228, :_reduce_312,
  0, 229, :_reduce_313,
  9, 183, :_reduce_314,
  1, 183, :_reduce_315,
  1, 183, :_reduce_316,
  1, 183, :_reduce_317,
  1, 183, :_reduce_318,
  1, 149, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  2, 207, :_reduce_323,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 208, :_reduce_none,
  5, 208, :_reduce_328,
  1, 136, :_reduce_none,
  2, 136, :_reduce_330,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 230, :_reduce_333,
  3, 230, :_reduce_334,
  1, 231, :_reduce_none,
  2, 231, :_reduce_none,
  4, 231, :_reduce_337,
  7, 231, :_reduce_338,
  6, 231, :_reduce_339,
  4, 231, :_reduce_340,
  3, 231, :_reduce_341,
  5, 231, :_reduce_342,
  4, 231, :_reduce_343,
  2, 231, :_reduce_344,
  1, 231, :_reduce_345,
  2, 231, :_reduce_346,
  0, 164, :_reduce_347,
  2, 164, :_reduce_348,
  1, 164, :_reduce_349,
  3, 164, :_reduce_350,
  0, 233, :_reduce_351,
  5, 232, :_reduce_352,
  2, 160, :_reduce_353,
  4, 160, :_reduce_354,
  4, 160, :_reduce_355,
  2, 206, :_reduce_356,
  4, 206, :_reduce_357,
  4, 206, :_reduce_358,
  3, 206, :_reduce_359,
  2, 206, :_reduce_360,
  1, 206, :_reduce_361,
  0, 235, :_reduce_362,
  5, 205, :_reduce_363,
  0, 236, :_reduce_364,
  5, 205, :_reduce_365,
  5, 210, :_reduce_366,
  1, 237, :_reduce_none,
  4, 237, :_reduce_368,
  2, 237, :_reduce_369,
  1, 238, :_reduce_370,
  1, 238, :_reduce_none,
  6, 135, :_reduce_372,
  0, 135, :_reduce_373,
  1, 239, :_reduce_374,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  2, 240, :_reduce_377,
  1, 240, :_reduce_none,
  2, 137, :_reduce_379,
  1, 137, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 198, :_reduce_384,
  1, 242, :_reduce_385,
  2, 242, :_reduce_386,
  3, 243, :_reduce_387,
  1, 243, :_reduce_388,
  3, 199, :_reduce_389,
  4, 200, :_reduce_390,
  3, 201, :_reduce_391,
  0, 246, :_reduce_392,
  3, 246, :_reduce_393,
  1, 247, :_reduce_394,
  2, 247, :_reduce_395,
  3, 202, :_reduce_396,
  0, 249, :_reduce_397,
  3, 249, :_reduce_398,
  0, 244, :_reduce_399,
  2, 244, :_reduce_400,
  0, 245, :_reduce_401,
  2, 245, :_reduce_402,
  1, 248, :_reduce_403,
  2, 248, :_reduce_404,
  0, 251, :_reduce_405,
  4, 248, :_reduce_406,
  1, 250, :_reduce_407,
  1, 250, :_reduce_408,
  1, 250, :_reduce_409,
  1, 250, :_reduce_none,
  1, 179, :_reduce_411,
  3, 180, :_reduce_412,
  1, 241, :_reduce_413,
  1, 241, :_reduce_414,
  2, 241, :_reduce_415,
  2, 241, :_reduce_416,
  1, 172, :_reduce_417,
  1, 172, :_reduce_418,
  1, 172, :_reduce_419,
  1, 172, :_reduce_420,
  1, 172, :_reduce_421,
  1, 172, :_reduce_422,
  1, 172, :_reduce_423,
  1, 172, :_reduce_424,
  1, 172, :_reduce_425,
  1, 172, :_reduce_426,
  1, 172, :_reduce_427,
  1, 203, :_reduce_428,
  1, 148, :_reduce_429,
  1, 151, :_reduce_430,
  1, 151, :_reduce_431,
  1, 212, :_reduce_432,
  3, 212, :_reduce_433,
  2, 212, :_reduce_434,
  4, 214, :_reduce_435,
  2, 214, :_reduce_436,
  6, 252, :_reduce_437,
  4, 252, :_reduce_438,
  4, 252, :_reduce_439,
  2, 252, :_reduce_440,
  4, 252, :_reduce_441,
  2, 252, :_reduce_442,
  2, 252, :_reduce_443,
  1, 252, :_reduce_444,
  0, 252, :_reduce_445,
  1, 258, :_reduce_446,
  1, 258, :_reduce_447,
  1, 258, :_reduce_448,
  1, 258, :_reduce_449,
  1, 258, :_reduce_450,
  1, 253, :_reduce_451,
  3, 253, :_reduce_452,
  3, 259, :_reduce_453,
  1, 254, :_reduce_454,
  3, 254, :_reduce_455,
  1, 260, :_reduce_none,
  1, 260, :_reduce_none,
  2, 255, :_reduce_458,
  1, 255, :_reduce_459,
  1, 261, :_reduce_none,
  1, 261, :_reduce_none,
  2, 257, :_reduce_462,
  2, 256, :_reduce_463,
  0, 256, :_reduce_464,
  1, 215, :_reduce_none,
  4, 215, :_reduce_466,
  0, 204, :_reduce_467,
  2, 204, :_reduce_468,
  2, 204, :_reduce_469,
  1, 187, :_reduce_470,
  3, 187, :_reduce_471,
  3, 262, :_reduce_472,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  0, 139, :_reduce_none,
  1, 139, :_reduce_none,
  0, 182, :_reduce_none,
  1, 182, :_reduce_none,
  0, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 213, :_reduce_492,
  1, 213, :_reduce_none,
  1, 141, :_reduce_none,
  2, 141, :_reduce_none,
  0, 184, :_reduce_496 ]

racc_reduce_n = 497

racc_shift_n = 894

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tUPLUS => 60,
  :tUMINUS => 61,
  :tUMINUS_NUM => 62,
  :tPOW => 63,
  :tCMP => 64,
  :tEQ => 65,
  :tEQQ => 66,
  :tNEQ => 67,
  :tGEQ => 68,
  :tLEQ => 69,
  :tANDOP => 70,
  :tOROP => 71,
  :tMATCH => 72,
  :tNMATCH => 73,
  :tDOT => 74,
  :tDOT2 => 75,
  :tDOT3 => 76,
  :tAREF => 77,
  :tASET => 78,
  :tLSHFT => 79,
  :tRSHFT => 80,
  :tCOLON2 => 81,
  :tCOLON3 => 82,
  :tOP_ASGN => 83,
  :tASSOC => 84,
  :tLPAREN => 85,
  :tLPAREN2 => 86,
  :tRPAREN => 87,
  :tLPAREN_ARG => 88,
  :tLBRACK => 89,
  :tLBRACK2 => 90,
  :tRBRACK => 91,
  :tLBRACE => 92,
  :tLBRACE_ARG => 93,
  :tSTAR => 94,
  :tSTAR2 => 95,
  :tAMPER => 96,
  :tAMPER2 => 97,
  :tTILDE => 98,
  :tPERCENT => 99,
  :tDIVIDE => 100,
  :tPLUS => 101,
  :tMINUS => 102,
  :tLT => 103,
  :tGT => 104,
  :tPIPE => 105,
  :tBANG => 106,
  :tCARET => 107,
  :tLCURLY => 108,
  :tRCURLY => 109,
  :tBACK_REF2 => 110,
  :tSYMBEG => 111,
  :tSTRING_BEG => 112,
  :tXSTRING_BEG => 113,
  :tREGEXP_BEG => 114,
  :tWORDS_BEG => 115,
  :tQWORDS_BEG => 116,
  :tSTRING_DBEG => 117,
  :tSTRING_DVAR => 118,
  :tSTRING_END => 119,
  :tSTRING => 120,
  :tSYMBOL => 121,
  :tREGEXP_OPT => 122,
  :tNL => 123,
  :tEH => 124,
  :tCOLON => 125,
  :tCOMMA => 126,
  :tSPACE => 127,
  :tSEMI => 128,
  :tEQL => 129,
  :tLOWEST => 130 }

racc_nt_base = 131

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tREGEXP_OPT",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@2",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "opt_nl",
  "primary",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@4",
  "@5",
  "@6",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "block_par",
  "block_var",
  "do_block",
  "@20",
  "operation3",
  "@21",
  "@22",
  "when_args",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@23",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_2(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_3(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_4(val, _values, result)
                      result = []
                    
    result
end

def _reduce_5(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_7(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_9(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_12(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_14(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_15(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_16(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_17(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_18(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_19(val, _values, result)
                      if in_def?
                        diagnostic :error, :begin_in_method, nil, val[0]
                      end

                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_28(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

# reduce 32 omitted

# reduce 33 omitted

def _reduce_34(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_44(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

# reduce 45 omitted

def _reduce_46(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_47(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_48(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_49(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
end

def _reduce_50(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_51(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      method_call = @builder.call_method(nil, nil, val[0],
                                      lparen_t, args, rparen_t)

                      begin_t, block_args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_52(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)

                    
    result
end

def _reduce_53(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, block_args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_54(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_55(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, block_args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_56(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_57(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:yield, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_58(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_60(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_62(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_63(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_64(val, _values, result)
                      result = val[0] << @builder.splat(val[1], val[2])
                    
    result
end

def _reduce_65(val, _values, result)
                      result = val[0] << @builder.splat(val[1])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_67(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

# reduce 68 omitted

def _reduce_69(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_70(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_71(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_77(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_79(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_80(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_81(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_82(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_85(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_86(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_87(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 89 omitted

def _reduce_90(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

def _reduce_98(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

def _reduce_102(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_103(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_104(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

def _reduce_171(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_172(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_173(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_174(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_175(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_176(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_177(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_178(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[2], [ val[3] ]
                    
    result
end

def _reduce_179(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[1], [ val[2] ]
                    
    result
end

def _reduce_180(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_181(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_182(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_183(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_184(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_185(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_186(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_189(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_190(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_191(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_193(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_194(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[3], val[4])
                    
    result
end

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

def _reduce_217(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_218(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_219(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_221(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_222(val, _values, result)
                      result = [ val[0], [], val[2] ]
                    
    result
end

def _reduce_223(val, _values, result)
                      result = [ val[0], val[1], val[3] ]
                    
    result
end

def _reduce_224(val, _values, result)
                      result = [ val[0], [ val[1] ], val[3] ]
                    
    result
end

def _reduce_225(val, _values, result)
                      result = [ val[0], val[1] << val[3], val[5] ]
                    
    result
end

def _reduce_226(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 227 omitted

def _reduce_228(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = val[0].concat(
                                [ @builder.splat(val[2], val[3]),
                                   *val[4] ])
                    
    result
end

def _reduce_231(val, _values, result)
                      result =  [ @builder.associate(nil, val[0], nil),
                                  *val[1] ]
                    
    result
end

def _reduce_232(val, _values, result)
                      result =  [ @builder.associate(nil, val[0], nil),
                                  @builder.splat(val[2], val[3]),
                                  *val[4] ]
                    
    result
end

def _reduce_233(val, _values, result)
                      result = val[0].concat(
                                [ @builder.associate(nil, val[2], nil),
                                  *val[3] ])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = val[0].concat(
                                [ @builder.associate(nil, val[2], nil),
                                  @builder.splat(val[4], val[5]),
                                  *val[6] ])
                    
    result
end

def _reduce_235(val, _values, result)
                      result =  [ @builder.splat(val[0], val[1]),
                                  *val[2] ]
                    
    result
end

def _reduce_236(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = [ val[0], *val[2].concat(val[3]) ]
                    
    result
end

def _reduce_238(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_239(val, _values, result)
                      result =  [ val[0],
                                  @builder.splat(val[2], val[3]),
                                  *val[4] ]
                    
    result
end

def _reduce_240(val, _values, result)
                      result =  [ val[0],
                                  *val[2].
                                    push(@builder.splat(val[4], val[5])).
                                    concat(val[6]) ]
                    
    result
end

def _reduce_241(val, _values, result)
                      result =  [ @builder.associate(nil, val[0], nil),
                                  *val[1] ]
                    
    result
end

def _reduce_242(val, _values, result)
                      result =  [ @builder.associate(nil, val[0], nil),
                                  @builder.splat(val[2], val[3]),
                                  *val[4] ]
                    
    result
end

def _reduce_243(val, _values, result)
                      result =  [ val[0],
                                  @builder.associate(nil, val[2], nil),
                                  *val[3] ]
                    
    result
end

def _reduce_244(val, _values, result)
                      result =  [ val[0],
                                  *val[2].
                                    push(@builder.associate(nil, val[4], nil)).
                                    concat(val[5]) ]
                    
    result
end

def _reduce_245(val, _values, result)
                      result =  [ val[0],
                                  @builder.associate(nil, val[2], nil),
                                  @builder.splat(val[4], val[5]),
                                  *val[6] ]
                    
    result
end

def _reduce_246(val, _values, result)
                      result =  [ val[0],
                                  *val[2].
                                    push(@builder.associate(nil, val[4], nil)).
                                    push(@builder.splat(val[6], val[7])).
                                    concat(val[8]) ]
                    
    result
end

def _reduce_247(val, _values, result)
                      result =  [ @builder.splat(val[0], val[1]),
                                  *val[2] ]
                    
    result
end

def _reduce_248(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_250(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = [ nil, val[0], nil ]
                    
    result
end

def _reduce_252(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [ val[0], [], val[2] ]
                    
    result
end

def _reduce_254(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_255(val, _values, result)
                      result = [ val[0], val[1], val[3] ]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_257(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = []
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_261(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

def _reduce_272(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_273(val, _values, result)
                      result = @builder.begin_keyword(val[0], val[1], val[2])
                    
    result
end

def _reduce_274(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_275(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[4])
                    
    result
end

def _reduce_276(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_277(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_278(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_282(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_284(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_286(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_287(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 288 omitted

def _reduce_289(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_290(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_291(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_292(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_293(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_295(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_296(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_298(val, _values, result)
                      when_bodies       = val[3][0..-2]
                      else_t, else_body = val[3][-1]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_299(val, _values, result)
                      when_bodies       = val[2][0..-2]
                      else_t, else_body = val[2][-1]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.case(val[0], nil,
                                             [], val[2], val[3],
                                             val[4])
                    
    result
end

def _reduce_301(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_302(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_304(val, _values, result)
                      @static_env.extend_static
                    
    result
end

def _reduce_305(val, _values, result)
                      if in_def?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @static_env.unextend
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @def_level
                      @def_level = 0

                      @static_env.extend_static
                    
    result
end

def _reduce_307(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @static_env.unextend

                      @def_level = val[4]
                    
    result
end

def _reduce_308(val, _values, result)
                      @static_env.extend_static
                    
    result
end

def _reduce_309(val, _values, result)
                      if in_def?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @static_env.unextend
                    
    result
end

def _reduce_310(val, _values, result)
                      @def_level += 1
                      @static_env.extend_static
                    
    result
end

def _reduce_311(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @static_env.unextend
                      @def_level -= 1
                    
    result
end

def _reduce_312(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_313(val, _values, result)
                      @def_level += 1
                      @static_env.extend_static
                    
    result
end

def _reduce_314(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @static_env.unextend
                      @def_level -= 1
                    
    result
end

def _reduce_315(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_318(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 319 omitted

# reduce 320 omitted

# reduce 321 omitted

# reduce 322 omitted

def _reduce_323(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 324 omitted

# reduce 325 omitted

# reduce 326 omitted

# reduce 327 omitted

def _reduce_328(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 329 omitted

def _reduce_330(val, _values, result)
                      result = val
                    
    result
end

# reduce 331 omitted

# reduce 332 omitted

def _reduce_333(val, _values, result)
                      result = [ @builder.arg_expr(val[0]) ]
                    
    result
end

def _reduce_334(val, _values, result)
                      result = val[0] << @builder.arg_expr(val[2])
                    
    result
end

# reduce 335 omitted

# reduce 336 omitted

def _reduce_337(val, _values, result)
                      result =  val[0].
                                  push(@builder.blockarg_expr(val[2], val[3]))
                    
    result
end

def _reduce_338(val, _values, result)
                      result =  val[0].
                                  push(@builder.restarg_expr(val[2], val[3])).
                                  push(@builder.blockarg_expr(val[5], val[6]))
                    
    result
end

def _reduce_339(val, _values, result)
                      result =  val[0].
                                  push(@builder.restarg_expr(val[2])).
                                  push(@builder.blockarg_expr(val[4], val[5]))
                    
    result
end

def _reduce_340(val, _values, result)
                      result =  val[0].
                                  push(@builder.restarg_expr(val[2], val[3]))
                    
    result
end

def _reduce_341(val, _values, result)
                      result =  val[0].
                                  push(@builder.restarg_expr(val[2]))
                    
    result
end

def _reduce_342(val, _values, result)
                      result =  [ @builder.restarg_expr(val[0], val[1]),
                                  @builder.blockarg_expr(val[3], val[4]) ]
                    
    result
end

def _reduce_343(val, _values, result)
                      result =  [ @builder.restarg_expr(val[0]),
                                  @builder.blockarg_expr(val[2], val[3]) ]
                    
    result
end

def _reduce_344(val, _values, result)
                      result =  [ @builder.restarg_expr(val[0], val[1]) ]
                    
    result
end

def _reduce_345(val, _values, result)
                      result =  [ @builder.restarg_expr(val[0]) ]
                    
    result
end

def _reduce_346(val, _values, result)
                      result =  [ @builder.blockarg_expr(val[0], val[1]) ]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_348(val, _values, result)
                      result = @builder.args(val[0], [], val[1])
                    
    result
end

def _reduce_349(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_350(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2], false)
                    
    result
end

def _reduce_351(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_352(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
end

def _reduce_353(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_354(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_355(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_356(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_357(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_358(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_359(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_360(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_361(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_362(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_363(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
end

def _reduce_364(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_365(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
end

def _reduce_366(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

# reduce 367 omitted

def _reduce_368(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_370(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 371 omitted

def _reduce_372(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_373(val, _values, result)
                      result = []
                    
    result
end

def _reduce_374(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 375 omitted

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 380 omitted

# reduce 381 omitted

# reduce 382 omitted

# reduce 383 omitted

def _reduce_384(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_385(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_387(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_388(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_389(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_390(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_391(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_392(val, _values, result)
                      result = []
                    
    result
end

def _reduce_393(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_394(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_395(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_396(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_397(val, _values, result)
                      result = []
                    
    result
end

def _reduce_398(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_399(val, _values, result)
                      result = []
                    
    result
end

def _reduce_400(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_401(val, _values, result)
                      result = []
                    
    result
end

def _reduce_402(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_403(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_404(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_405(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_406(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_407(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_408(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_409(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 410 omitted

def _reduce_411(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_412(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_413(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_414(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_415(val, _values, result)
                      result = @builder.negate(val[0],
                                  @builder.integer(val[1]))
                    
    result
end

def _reduce_416(val, _values, result)
                      result = @builder.negate(val[0],
                                  @builder.float(val[1]))
                    
    result
end

def _reduce_417(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_418(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_419(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_420(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_421(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_422(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_423(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_424(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_425(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_426(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_427(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_428(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_429(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_430(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_431(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_432(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_433(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_434(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_435(val, _values, result)
                      result = @builder.args(val[0], val[1], val[3])

                      @lexer.state = :expr_beg
                    
    result
end

def _reduce_436(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_437(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_438(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_439(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_440(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_441(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_442(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_443(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_444(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = []
                    
    result
end

def _reduce_446(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_447(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_448(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_449(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

def _reduce_450(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_453(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 456 omitted

# reduce 457 omitted

def _reduce_458(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 460 omitted

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = []
                    
    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_467(val, _values, result)
                      result = []
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.pair_list_18(val[0])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

# reduce 473 omitted

# reduce 474 omitted

# reduce 475 omitted

# reduce 476 omitted

# reduce 477 omitted

# reduce 478 omitted

# reduce 479 omitted

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

# reduce 484 omitted

# reduce 485 omitted

# reduce 486 omitted

# reduce 487 omitted

# reduce 488 omitted

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

def _reduce_492(val, _values, result)
                      yyerrok
                    
    result
end

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

def _reduce_496(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby18
  end   # module Parser
