<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2016 ThoughtWorks, Inc.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd"
       default-init-method="init">

  <context:annotation-config/>
  <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"/>
  <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>

  <import resource="propertyConfigurer.xml"/>

  <task:scheduled-tasks scheduler="modeAwareThreadPoolTaskScheduler">
    <task:scheduled ref="configRepository" method="garbageCollect" cron="${go.config.repo.gc.cron}"/>
    <task:scheduled ref="configRepositoryGCWarningService" method="checkRepoAndAddWarningIfRequired"
                    initial-delay="${go.config.repo.gc.check.delay}"
                    fixed-delay="${go.config.repo.gc.check.interval}"/>
    <task:scheduled ref="pipelineScheduler" method="onTimer"
                    initial-delay="${cruise.produce.build.cause.delay}"
                    fixed-delay="${cruise.produce.build.cause.interval}"/>
    <task:scheduled ref="serverHealthService" method="onTimer"
                    initial-delay="10000"
                    fixed-delay="5000"/>
    <task:scheduled ref="scheduleService" method="autoSchedulePipelinesFromRequestBuffer"
                    initial-delay="10000"
                    fixed-delay="${cruise.buildCause.consumer.interval}"/>
    <task:scheduled ref="scheduleService" method="rescheduleHungJobs"
                    initial-delay="10000"
                    fixed-delay="${cruise.reschedule.hung.builds.interval}"/>
    <task:scheduled ref="elasticAgentPluginService" method="heartbeat"
                    initial-delay="10000"
                    fixed-delay="${go.elasticplugin.heartbeat.interval}"/>
    <task:scheduled ref="scheduleService" method="cancelHungJobs"
                    initial-delay="10000"
                    fixed-delay="${cruise.cancel.hung.jobs.interval}"/>
    <task:scheduled ref="goDiskSpaceMonitor" method="onTimer"
                    initial-delay="5000"
                    fixed-delay="${cruise.disk.space.check.interval}"/>
    <task:scheduled ref="buildAssignmentService" method="onTimer"
                    initial-delay="10000"
                    fixed-delay="${cruise.build.assignment.service.interval}"/>
    <task:scheduled ref="cachedGoConfig" method="onTimer"
                    initial-delay="5000"
                    fixed-delay="${cruise.config.refresh.interval}"/>
    <task:scheduled ref="materialUpdateService" method="onTimer"
                    initial-delay="${cruise.material.update.delay}"
                    fixed-delay="${cruise.material.update.interval}"/>
    <task:scheduled ref="agentService" method="refresh"
                    initial-delay="10000"
                    fixed-delay="${cruise.agent.service.refresh.interval}"/>
    <task:scheduled ref="socketHealthService" method="keepalive"
                    fixed-delay="10000"/>
    <task:scheduled ref="accessTokenService" method="onTimer"
                    initial-delay="10000"
                    fixed-delay="${gocd.accesstoken.lastused.update.interval}"/>
  </task:scheduled-tasks>

  <bean name="/remoteBuildRepository" class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter"
        p:service-ref="buildRepositoryImpl"
        p:serviceInterface="com.thoughtworks.go.remote.BuildRepositoryRemote"/>

  <bean id="buildRepositoryRemoteImpl" class="com.thoughtworks.go.remote.BuildRepositoryRemoteImpl"/>

  <bean id="buildRepositoryImpl" class="com.thoughtworks.go.server.messaging.BuildRepositoryMessageProducer"
        autowire="constructor"/>

</beans>
