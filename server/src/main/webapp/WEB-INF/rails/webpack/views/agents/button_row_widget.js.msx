/*
 * Copyright 2019 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import m from "mithril";
import {f} from "helpers/form_helper";
import {ResourcesListWidget} from "views/agents/resources_list_widget";
import {EnvironmentsListWidget} from "views/agents/environments_list_widget";
import Stream from "mithril/stream";
import {Resources} from "models/agents/resources";
import {Environments} from "models/agents/environments";

export const ButtonRowWidget = {
  oninit (vnode) {
    const args                  = vnode.attrs;
    const self                  = this;
    this.resources              = Stream();
    this.resourcesFetchError    = Stream();
    this.environments           = Stream();
    this.environmentsFetchError = Stream();

    this.dropdownClass = function (name) {
      return args.dropdown.isDropDownOpen(name) ? 'has-dropdown is-open' : 'has-dropdown';
    };

    this.resourcesButtonClicked = function (e) {
      self.resources(undefined);
      e.preventDefault();
      Resources.all(args.selectedAgents())
        .then(self.resources, self.resourcesFetchError)
        .always(m.redraw);
      args.dropdown.toggleDropDownState('resource');
    };

    this.environmentsButtonClicked = function (e) {
      self.environments(undefined);
      e.preventDefault();
      Environments.all(args.selectedAgents())
        .then(self.environments, self.environmentsFetchError)
        .always(m.redraw);
      args.dropdown.toggleDropDownState('environment');
    };

  },

  view (vnode) {
    const ctrl = vnode.state;
    const args = vnode.attrs;

    return (
      <header class="page-header">
        <f.row>
          <f.column size={5}>
            <h1>Agents</h1>
          </f.column>

          <f.column size={7}>
            <ul class="button-group header-panel-button-group">
              <li>
                <f.button class="agents_action" onclick={args.onDelete}
                          disabled={!args.areOperationsAllowed()}>
                  Delete
                </f.button>
              </li>

              <li>
                <f.button class="agents_action" onclick={args.onDisable}
                          disabled={!args.areOperationsAllowed()}>
                  Disable
                </f.button>
              </li>

              <li>
                <f.button class="agents_action" onclick={args.onEnable}
                          disabled={!args.areOperationsAllowed()}>
                  Enable
                </f.button>
              </li>

              <li class={ ctrl.dropdownClass('resource') }>
                <f.button class="agents_action" onclick={ctrl.resourcesButtonClicked}
                          disabled={!args.areOperationsAllowed()}>
                  Resources
                </f.button>

                <ResourcesListWidget hideDropDown={args.dropdown.hide}
                                     dropDownReset={args.dropdown.reset}
                                     resources={ctrl.resources}
                                     resourcesFetchError={ctrl.resourcesFetchError}
                                     onResourcesUpdate={args.onResourcesUpdate}/>
              </li>

              <li class={ctrl.dropdownClass('environment')}>
                <f.button class="agents_action" onclick={ctrl.environmentsButtonClicked}
                          disabled={!args.areOperationsAllowed()}>
                  Environments
                </f.button>

                <EnvironmentsListWidget hideDropDown={args.dropdown.hide}
                                        dropDownReset={args.dropdown.reset}
                                        environments={ctrl.environments}
                                        environmentsFetchError={ctrl.environmentsFetchError}
                                        onEnvironmentsUpdate={args.onEnvironmentsUpdate}/>
              </li>
            </ul>
          </f.column>
        </f.row>
      </header>
    );
  }
};
