/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let m                 = require("mithril");
let f                 = require('helpers/form_helper');
let AngularPlugin     = require('views/shared/angular_plugin');
const ElasticProfiles = require('models/elastic_profiles/elastic_profiles');

const ElasticProfileModalBody = {
  oninit (vnode) {
    const setPluginInfo = function (pluginInfo) {
      vnode.attrs.pluginInfo(pluginInfo);
    };

    this.selectPluginId = function () {
      const pluginInfo = vnode.attrs.pluginInfos().findById(vnode.attrs.profile().pluginId());

      if (!pluginInfo) {
        return;
      }

      setPluginInfo(pluginInfo);
      const newProfile = new ElasticProfiles.Profile({id: vnode.attrs.profile().id(), pluginId: pluginInfo.id()});
      newProfile.etag(vnode.attrs.profile().etag());
      vnode.attrs.profile(newProfile);
    };

    this.pluginInfoItems = function () {
      return vnode.attrs.pluginInfos().mapPluginInfos((pluginInfo) => {
        return {
          id:   pluginInfo.id(),
          text: pluginInfo.id()
        };
      });
    };
  },

  view (vnode) {
    if (!vnode.attrs.pluginInfo()) {
      const firstPluginInfo = vnode.attrs.pluginInfos().firstPluginInfo();
      vnode.attrs.pluginInfo(firstPluginInfo);
      vnode.attrs.profile().pluginId(firstPluginInfo.id());
    }

    if (vnode.attrs.errorMessage && vnode.attrs.errorMessage()) {
      return (
        <f.alert>{vnode.attrs.errorMessage()}</f.alert>
      );
    }

    if (!vnode.attrs.profile()) {
      return (
        <div class="modal-spinner"/>
      );
    }

    let profileIdDisabledMessage;
    if (!vnode.attrs.newProfile) {
      profileIdDisabledMessage = (<div>Editing of profile ID is disabled</div>);
    }

    let angularPlugin;
    if (vnode.attrs.pluginInfo()) {
      angularPlugin = (<AngularPlugin pluginInfoSettings={vnode.attrs.pluginInfo().profileSettings}
                                      configuration={vnode.attrs.profile().properties}
                                      key={vnode.attrs.pluginInfo() ? vnode.attrs.pluginInfo().id() : 'no-plugin'}/>);
    }

    return (
      <div>
        <f.row collapse="true">
          <div class='row' key="static-stuff">
            <f.inputWithLabel model={vnode.attrs.profile()}
                              attrName="id"
                              validate="true"
                              isRequired="true"
                              disabled={!vnode.attrs.newProfile}
                              message={profileIdDisabledMessage}
                              label="Id"
                              key="profile-id"/>

            <f.select model={vnode.attrs.profile()}
                      attrName='pluginId'
                      label='Plugin Id'
                      onchange={vnode.state.selectPluginId.bind(vnode.state)}
                      items={vnode.state.pluginInfoItems()}
                      largeSize={4}
                      size={6}
                      end={"true"}/>

          </div>
        </f.row>

        <div class="row collapse">
          {angularPlugin}
        </div>
      </div>
    );
  }
};

module.exports = ElasticProfileModalBody;
