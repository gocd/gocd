/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m               = require('mithril');
const _               = require('lodash');
const $               = require('jquery');
const f               = require('helpers/form_helper');
const ComponentMixins = require('helpers/mithril_component_mixins');
const PipelineWidget  = require('views/dashboard/pipeline_widget');

const DashboardWidget = {
  oninit(vnode) {
    const self     = vnode.state;
    self.dashboard = vnode.attrs.dashboard;

    ComponentMixins.HasViewModel.call(self);

    const attachClickEventToBody = () => {
      const body = $("body");
      body.click(() => {
        vnode.attrs.vm.dropdown.hideAll();
        m.redraw();
      });
    };

    attachClickEventToBody();
    self.getPipelinesGroupView = (pipelineGroup) => {
      const pipelines = _.map(pipelineGroup.pipelines, (pipelineName) => {
        return (
          <PipelineWidget pipeline={self.dashboard.findPipeline(pipelineName)}
                          doCancelPolling={vnode.attrs.doCancelPolling}
                          doRefreshImmediately={vnode.attrs.doRefreshImmediately}
                          isQuickEditPageEnabled={vnode.attrs.isQuickEditPageEnabled}
                          vm={vnode.attrs.vm}/>
        );
      });

      const title = (pipelineGroup.canAdminister)
        ? (<a href={pipelineGroup.path}>{pipelineGroup.name}</a>)
        : (<span>{pipelineGroup.name}</span>);

      return (
        <div class="pipeline-group">
          <h2 class="pipeline-group_title">
            {title}
          </h2>
          <ul class="pipeline-group_items">
            {pipelines}
          </ul>
        </div>
      );
    };
  },

  view(vnode) {
    const self = vnode.state;
    const vm   = vnode.attrs.vm;

    self.dashboard   = vnode.attrs.dashboard.filterBy(vm.searchText());
    const groupsView = _.map(self.dashboard.getPipelineGroups(), self.getPipelinesGroupView);

    return (
      <div class="pipeline_wrapper">
        <div class="header-panel">
          <header class="page-header">
            <f.row>
              <f.column>Pipelines</f.column>
              <f.column>
                <input type="text"
                       oninput={m.withAttr("value", vm.searchText)}
                       value={vm.searchText()}
                       placeholder="Search for Pipeline"
                       id="pipeline_search"
                       class="pipeline_search"
                />
              </f.column>
            </f.row>
          </header>
        </div>
        <div class="dashboard">
          {groupsView}
        </div>
      </div>
    );
  }
};

module.exports = DashboardWidget;
