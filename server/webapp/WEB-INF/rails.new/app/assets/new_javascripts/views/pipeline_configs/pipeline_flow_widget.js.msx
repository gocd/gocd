/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'jquery',
  'helpers/form_helper', 'helpers/mithril_component_mixins', 'helpers/dragula_config',
  'views/pipeline_configs/stages_config_widget'
], function (m, _, $,
             f, ComponentMixins, dragulaConfig,
             StagesConfigWidget) {
  var PipelineFlowWidget = {
    controller: function (args) {
      this.args = args;
      ComponentMixins.HasViewModel.call(this);

      this.currentSelection = args.currentSelection;

      this.appendStage = function () {
        this.currentSelection(this.args.pipeline().stages().createStage());
      };
    },

    view: function (ctrl, args) {
      var appendStage = (
        <div class="pipeline-flow-box add-stage">
          <span class='label' onclick={ctrl.appendStage.bind(ctrl)}>Add Stage</span>
        </div>
      );

      var classes = function (selection, additionalClasses) {
        return _(['pipeline-flow-box', additionalClasses, (ctrl.currentSelection() === selection) ? 'active' : null]).flatten().compact().value().join(' ');
      };

      var dragDropConfig = function (elem, isInitialized) {
        if(!isInitialized) {
          var onDrop = function () {
            var reorderedStages = _.map($(elem).find('.stage:not(.gu-mirror)'), function (eachStageElem) {
              return args.pipeline().stages().stageAtIndex($(eachStageElem).attr('data-stage-index'));
            });
            args.pipeline().stages().setStages(reorderedStages);
          };

          dragulaConfig(elem, {dragulaOptions: {}, onDropCallback: onDrop});
        }
      };

      return (
        <f.accordion accordionTitles={[
                        (
          <span>Stages</span>
                        )
        ]}
                     selectedIndex={ctrl.vmState('pipelineFlowSelected', m.prop(0))}
                     accordionKeys={['stages']}
                     class='stages'>
          <div>

              <div class="stage-boxes">
                <div config={dragDropConfig} class="stages-wrapper">
                  {args.pipeline().stages().mapStages(function (stage, stageIndex) {
                    return (
                      <div class={classes(stage, 'stage')}
                           data-stage-index={stageIndex}
                           onclick={ctrl.currentSelection.bind(ctrl, stage)}
                           key={stage.uuid()}>
                        <span class="drag-handle"/>
                        <span class='label'>{stage.name()}</span>
                      </div>
                    );
                  })}
                </div>
                {appendStage}
              </div>

            <StagesConfigWidget pipeline={args.pipeline}
                                currentSelection={ctrl.currentSelection}
                                vm={ctrl.vmState('stagesConfig')}/>
          </div>
        </f.accordion>
      );
    }

  };
  return PipelineFlowWidget;
});
