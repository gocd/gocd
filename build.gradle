/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import groovy.io.FileType
import nl.javadude.gradle.plugins.license.License

import java.security.SecureRandom

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath 'org.owasp:dependency-check-gradle:1.4.5.1'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
    classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
  }
}

apply plugin: 'jacoco'
apply plugin: 'base'
apply plugin: "com.github.hierynomus.license"

if (file('build-ext.gradle').exists()) {
  apply from: 'build-ext.gradle'
}

def script = this

def gitRevision = { ->
  def hashStdOut = new ByteArrayOutputStream()
  exec {
    commandLine "git", "log", "-n", "1", "--format=%H"
    standardOutput = hashStdOut
    workingDir = script.buildscript.sourceFile.canonicalFile.parent
  }

  return hashStdOut.toString().trim()
}

def releaseRevision = { ->
  def hashStdOut = new ByteArrayOutputStream()
  exec {
    commandLine "git", "log", "--pretty=format:"
    standardOutput = hashStdOut
    workingDir = script.buildscript.sourceFile.canonicalFile.parent
  }

  return hashStdOut.size().toString()
}

def getVersion = { ... args ->
  ByteArrayOutputStream stdout = new ByteArrayOutputStream()

  try {
    project.exec {
      commandLine = args
      standardOutput = stdout
      errorOutput = stdout
      ignoreExitValue = true
    }
  } catch (Exception ignored) {
    return "could not determine version!"
  }

  return stdout.toString().trim()
}

def partitionFiles(Collection originalFiles) {
  def files = new LinkedHashSet(originalFiles).sort()
  def seed = System.getenv('GO_PIPELINE_COUNTER')?.toInteger() ?: System.getenv('PARTITION_SEED')?.toInteger() ?: new SecureRandom().nextInt().abs()
  def totalWorkers = System.getenv('GO_JOB_RUN_COUNT')?.toInteger() ?: 1
  def currentWorkerIndex = System.getenv('GO_JOB_RUN_INDEX')?.toInteger() ?: 1

  Integer testsPerBucket = Math.ceil((double) files.size() / totalWorkers)

  rootProject.logger.quiet("Partitioning ${files.size()} files into ${totalWorkers} buckets with approx ${testsPerBucket} files per bucket. Using seed ${seed}.")
  rootProject.logger.quiet("To reproduce the test failure, run with:")
  rootProject.logger.quiet("PARTITION_SEED=${seed} GO_JOB_RUN_COUNT=${totalWorkers} GO_JOB_RUN_INDEX=${currentWorkerIndex} ./gradlew YOUR_TARGET")

  // random shuffle, every agent uses the same seed, so shuffling is predictable
  Collections.shuffle(files, new Random(seed))

  def allPartitions = files.collate(testsPerBucket)
  allPartitions[currentWorkerIndex - 1]
}

def COPYRIGHT_YEAR = '2018'
def GO_VERSION_SEGMENTS = [
  year         : 18,
  releaseInYear: 5,
  patch        : 0
]
def GO_VERSION = [GO_VERSION_SEGMENTS.year, GO_VERSION_SEGMENTS.releaseInYear, GO_VERSION_SEGMENTS.patch].join('.')
def GO_VERSION_PREVIOUS = '18.4.0'
def DIST_VERSION = releaseRevision()
def GIT_REVISION = gitRevision()

if (System.getenv().containsKey("GO_SERVER_URL")) {
  println "========================================================="
  println "Gradle version:  ${gradle.gradleVersion}"
  println "JVM:             ${System.getProperty('java.version')} (${System.getProperty('java.vm.vendor')} ${System.getProperty('java.vm.version')})"
  println "OS:              ${System.getProperty('os.name')} ${System.getProperty('os.version')} ${System.getProperty('os.arch')}"
  println "========================================================="

  def isWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()

  println("Tool Versions")
  println("============================")
  println("node: ${getVersion("node", "--version")}")
  println(" npm: ${getVersion((isWindows ? "npm.cmd" : 'npm'), "--version")}")
  println("yarn: ${getVersion((isWindows ? "yarn.cmd" : 'yarn'), "--version")}")
  println(" git: ${getVersion("git", "--version")}")
  println("  hg: ${getVersion("hg", "--quiet", "--version")}")
  println(" svn: ${getVersion("svn", "--quiet", "--version")}")
  println("  p4: ${getVersion("p4", "-V").readLines().grep(~/Rev.*/).join("")}")
  println(" p4d: ${getVersion("p4d", "-V").readLines().grep(~/Rev.*/).join("")}")
  println(" gcc: ${getVersion("gcc", "-dumpversion")}")
  println(" g++: ${getVersion("g++", "-dumpversion")}")
  println("============================")
}

rootProject.ext.previousVersion = GO_VERSION_PREVIOUS
rootProject.ext.goVersionSegments = GO_VERSION_SEGMENTS
rootProject.ext.goVersion = GO_VERSION
rootProject.ext.distVersion = DIST_VERSION
rootProject.ext.fullVersion = DIST_VERSION ? "${GO_VERSION}-${DIST_VERSION}" : GO_VERSION
rootProject.ext.gitRevision = GIT_REVISION
rootProject.ext.copyrightYear = COPYRIGHT_YEAR
rootProject.ext.commandRepoUrl = System.getenv('COMMAND_REPO_URL') ? System.getenv('COMMAND_REPO_URL') : "git://github.com/gocd/go-command-repo"
rootProject.ext.versions = [
  apacheHttpComponents: '4.5.4',
  apacheHttpMime      : '4.5.4',
  assertJ             : '3.8.0',
  commonsCodec        : '1.10',
  commonsFileUpload   : '1.3.3',
  commonsIO           : '2.6',
  commonsLang         : '2.6',
  dbunit              : '2.5.4',
  felix               : '5.6.10',
  gson                : '2.8.2',
  hamcrest            : '1.3',
  jcommander          : '1.72',
  jetty               : '9.4.8.v20171121',
  jgit                : '4.9.0.201710071750-r',
  jsonAssert          : '1.5.0',
  jsonUnit            : '1.28.1',
  jsoup               : '1.11.2',
  junit               : '4.12',
  junit5              : '5.1.0',
  logback             : '1.2.3',
  mail                : '1.6.0',
  mockito             : '2.17.0',
  nanohttpd           : '2.3.1',
  oro                 : '2.0.8',
  objenesis           : '2.6',
  rack                : '1.1.21',
  rhino               : '1.7.7.2',
  servletApi          : '3.1.0',
  slf4j               : '1.7.25',
  spark               : '2.7.1',
  spring              : '3.1.3.RELEASE',
  springSecurity      : '3.1.3.RELEASE',
  tinybundles         : '3.0.0',
  tokenBucket         : '1.7',
  xmlUnitMatchers     : '2.5.1',
]

allprojects {
  apply plugin: 'idea'

  group = 'com.thoughtworks.go'
  version = project.fullVersion
  buildDir = "${projectDir}/target"

  repositories {
    mavenLocal()
    jcenter()

    maven { url "https://dl.bintray.com/gocd-maven-repo/generic/gocd" }
  }
}

idea {
  project {
    jdkName = '1.8'
    languageLevel = '1.8'
  }
}

subprojects {
  if (!project.childProjects.isEmpty()) {
    return
  }
  apply plugin: 'base'
  apply plugin: "com.github.hierynomus.license"

  license {
    skipExistingHeaders = true
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    exclude '**/*.jar'
    exclude '**/*.json'
    exclude '**/*.html'
    header rootProject.file('buildSrc/Apache-2.0.txt')
    headerDefinitions {
      intellijStyleXML {
        firstLine = "<!--"
        beforeEachLine = '  ~ '
        endLine = "  -->"
        afterEachLine = ''
        skipLinePattern = "^<\\?xml.*>\$"
        firstLineDetectionPattern = "(\\s|\\t)*<!--.*\$"
        lastLineDetectionPattern = ".*-->(\\s|\\t)*\$"
        allowBlankLines = true
        isMultiline = false
        padLines = false
      }
    }
    mapping {
      xml = 'intellijStyleXML'
    }
  }

  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: org.owasp.dependencycheck.gradle.DependencyCheck
  apply plugin: com.github.benmanes.gradle.versions.VersionsPlugin

  sourceCompatibility = 1.8
  targetCompatibility = 1.8
  buildDir = "${projectDir}/target"

  configurations {
    packagingOnly { transitive = false }
    extractedAtTopLevel { transitive = false }
    fatJarConfig

    testOutput {
      extendsFrom testRuntime
      transitive = true
    }
  }

  sourceSets {
    main {
      java {
        compileClasspath += configurations.compileOnly
      }
    }
    test {
      java {
        compileClasspath += configurations.compileOnly
        runtimeClasspath += configurations.compileOnly
      }
    }
  }

  task cleanLogs(type: Delete) {
    delete 'logs'
  }

  clean.dependsOn cleanLogs
  check.dependsOn 'license'

  tasks.withType(Jar) { jarTask ->
    manifest {
      attributes(
        'Go-Version': project.version,
        'ImplementationVersion': project.version,
        'Go-Revision': project.gitRevision,
        'Implementation-Title': project.name,
        'Implementation-Version': project.version,
        'Source-Compatibility': project.sourceCompatibility,
        'Target-Compatibility': project.targetCompatibility
      )
    }

    includeEmptyDirs false
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    if (jarTask.name == 'testJar') {
      project.artifacts.add 'testOutput', jarTask
    } else {
      project.artifacts.add 'archives', jarTask
    }
  }

  tasks.withType(AbstractArchiveTask) {
    includeEmptyDirs false
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    preserveFileTimestamps = false
    reproducibleFileOrder = true
  }

  tasks.withType(Exec) {
    if (logger.isInfoEnabled()) {
      standardOutput = System.out
      errorOutput = System.err
    } else {
      standardOutput = new ByteArrayOutputStream()
      errorOutput = new ByteArrayOutputStream()
    }
  }

  tasks.withType(JavaCompile) { compileTask ->
    options.warnings = false
    options.encoding = "UTF-8"
    options.compilerArgs += '-Xlint:-deprecation'
  }

  tasks.withType(License) {
    outputs.upToDateWhen { false }
  }

  project.afterEvaluate {
    tasks.withType(License) { thisTask ->
      thisTask.outputs.upToDateWhen { false }
      def sourceSetName = thisTask.name.replaceFirst('licenseFormat', '').replaceFirst('license', '')
      def mappedSourceSet = sourceSets.find { sourceSet -> sourceSet.name.toLowerCase().equals(sourceSetName.toLowerCase()) }

      if (thisTask.name.toLowerCase().contains('test')) {
        thisTask.source -= mappedSourceSet.resources
      }

      if (project.path == ':test:test-utils') {
        thisTask.source -= mappedSourceSet.resources
      }
    }
  }

  task testJar(type: Jar, description: "Assembles a jar archive containing the test classes.") {
    classifier = 'tests'
    from sourceSets.test.output
  }

  tasks.withType(Test) { Test testTask ->
    dependsOn 'jar'
    // run tests even when inputs have not changed
    outputs.upToDateWhen { false }

    useJUnitPlatform()

    maxParallelForks = project.hasProperty('maxParallelForks') ? project.maxParallelForks as int : 1

    // fixup a tempdir that is predictable and we can clean it up later
    def tmpDir = project.file("${System.getProperty('java.io.tmpdir')}/gocd-tests/${new BigInteger(32, new SecureRandom()).toString(32)}")
    systemProperty 'java.io.tmpdir', tmpDir
    doFirst {
      // workaround for https://github.com/unbroken-dome/gradle-testsets-plugin/issues/40
      classpath += rootProject.findProject(':test:test-utils').files("resource-include-in-all-projects")
    }

    defaultCharacterEncoding = "UTF-8"

    filter {
      failOnNoMatchingTests = true
    }

    doFirst {
      project.logger.info("Setting tmpdir ${tmpDir}")
      project.delete(tmpDir)
      tmpDir.mkdirs()

      def files = []
      testTask.testClassesDirs.files.each { File classDir ->
        if (classDir.exists()) {
          classDir.eachFileRecurse(FileType.FILES) { f ->
            def relPath = new File(classDir.toURI().relativize(f.toURI()).toString()).toString().replaceAll(/\$.*/, '.*').replaceAll(/\.class/, '.*')
            files << relPath
          }
        }
      }

      List myPartition = partitionFiles(files)

      myPartition.each { f ->
        testTask.include f
      }
    }

    doLast {
      project.logger.info("Deleting tmpdir ${tmpDir}")
      project.delete(tmpDir)
    }

    testLogging {
      showStandardStreams = project.path != ':server'

      exceptionFormat 'full'

      beforeSuite { suite ->
        if (suite.parent) {
          logger.quiet("Running ${suite.name}")
        }
      }

      afterSuite { suite, result ->
        if (suite.parent) {
          logger.quiet("Tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
          if (result.resultType == TestResult.ResultType.FAILURE) {
            logger.quiet("Test ${suite.name} FAILED")
          }
        } else {
          logger.quiet("Total tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
        }
      }
    }
  }

  idea {
    module {
      excludeDirs += project.tasks.withType(Delete)*.targetFiles*.files.flatten()
    }
  }

  configurations.all { configuration ->
    configuration.resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      // replace log4j and commons-logging implementations with the slf4j apis that redirect logs to slf4j
      // see https://www.slf4j.org/legacy.html
      if (details.requested.name == 'log4j' && details.requested.group == 'log4j') {
        details.useTarget group: 'org.slf4j', name: 'log4j-over-slf4j', version: project.versions.slf4j
      }
      if (details.requested.name == 'commons-logging' && details.requested.group == 'commons-logging') {
        details.useTarget group: 'org.slf4j', name: 'jcl-over-slf4j', version: project.versions.slf4j
      }
    }
  }

  if (project.path.startsWith(':api:') || project.path.startsWith(':spark:')) {
    project.afterEvaluate {
      project.configurations*.exclude(group: 'org.junit.vintage')
      project.configurations*.exclude(group: 'junit')
    }
  }

}

task allDependencies {
  dependsOn allprojects.collect { "$it.path:dependencies" }

  description = "Print dependency tree of all projects"
}

task compileAll { compileAllTask ->
  group LifecycleBasePlugin.BUILD_GROUP
  allprojects.collect { Project prj ->
    compileAll.dependsOn(prj.getTasks().withType(JavaCompile))
    compileAll.dependsOn(prj.getTasks().withType(GroovyCompile))
  }
}

task sparkTest { thisTask ->
  group LifecycleBasePlugin.VERIFICATION_GROUP
  description = "Run all api tests"
  (project(':api').subprojects + project(':spark').subprojects).each { Project subPrj ->
    thisTask.dependsOn subPrj.tasks.withType(Test)
    thisTask.dependsOn subPrj.tasks.withType(JacocoReport)
  }
  finalizedBy 'sparkTestJunitHtmlReport'
}

task sparkTestJunitHtmlReport(type: TestReport) {
  dependsOn sparkTest

  reportOn project(':api').subprojects*.test
  reportOn project(':spark').subprojects*.test
  def htmlOutputDir = file("${project.buildDir}/reports/tests/sparkTest")
  destinationDir = htmlOutputDir
}

task sparkTestJacocoMerge(type: JacocoMerge) { thisTask ->
  dependsOn sparkTest
  group LifecycleBasePlugin.VERIFICATION_GROUP
  description = "Combine coverage reports for api modules"

  // add a no-op execution data file
  executionData file("${project.buildDir}/no-op.exec")

  doFirst {
    (project(':api').subprojects + project(':spark').subprojects).each { subproject ->
      TaskCollection<JacocoReport> jacocoReportTasks = subproject.tasks.withType(JacocoReport)
      jacocoReportTasks.all { eachReportTask ->
        thisTask.executionData(eachReportTask.executionData)
      }
    }

    executionData = files(executionData.findAll { it.exists() })
  }
}

task sparkTestJacocoReport(type: JacocoReport, group: 'Coverage reports') { JacocoReport thisTask ->
  description = 'Generates an aggregate report from api subprojects'

  dependsOn sparkTestJacocoMerge

  executionData sparkTestJacocoMerge.destinationFile
  sourceDirectories = files([])
  classDirectories = files([])

  (project(':api').subprojects + project(':spark').subprojects).each { subproject ->
    TaskCollection<JacocoReport> jacocoReportTasks = subproject.tasks.withType(JacocoReport)
    jacocoReportTasks.all { eachReportTask ->
      thisTask.sourceDirectories += files(subproject.sourceSets.main.allSource.srcDirs)
      thisTask.classDirectories += files(subproject.sourceSets.main.output)
    }
  }

  reports {
    html.enabled = true
    xml.enabled = true
  }
}

task newApi {
  description = "Helper to create a new api module. Pass `-PapiName=roles-config -PapiVersion=v1`"

  doFirst {
    def newProjectName = "api-${project.apiName}-${project.apiVersion}"
    def moduleDir = file("api/${newProjectName}")
    def basePackage = "${moduleDir}/src/main/java/com/thoughtworks/go/api${project.apiVersion}/${project.apiName.replaceAll(~/[^a-zA-Z]/, '')}"

    project.delete(moduleDir)
    project.mkdir(moduleDir)
    project.mkdir(basePackage)
    project.mkdir("${basePackage}/spring")

    file("${moduleDir}/build.gradle").withWriter { out ->
      def contents =
        """
          /*
           * Copyright ${Calendar.getInstance().get(Calendar.YEAR)} ThoughtWorks, Inc.
           *
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           *     http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           */
          
          apply plugin: 'jacoco'
          apply plugin: 'groovy'
          
          dependencies {
            compile project(':api:api-base')
          
            testCompile project(path: ':api:api-base', configuration: 'testOutput')
            
            testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: project.versions.junit5
            testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: project.versions.junit5
          }
        """
      out.println(contents.stripIndent().trim())
    }

    file("${basePackage}/FooControllerDelegate.java").withWriter { out ->
      def contents =
        """
          /*
           * Copyright ${Calendar.getInstance().get(Calendar.YEAR)} ThoughtWorks, Inc.
           *
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           *     http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           */
          
          package com.thoughtworks.go.api${project.apiVersion}.${project.apiName.replaceAll(~/[^a-zA-Z]/, '')};

          
          public class FooControllerDelegate extends ApiController implements CrudController<Thing> {
            public FooControllerDelegate() {
              super(ApiVersion.${project.apiVersion});
            }
          }
        """
      out.println(contents.stripIndent().trim())
    }

    file("${basePackage}/spring/FooController.java").withWriter { out ->
      def contents =
        """
          /*
           * Copyright ${Calendar.getInstance().get(Calendar.YEAR)} ThoughtWorks, Inc.
           *
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           *     http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           */
          
          package com.thoughtworks.go.api${project.apiVersion}.${project.apiName.replaceAll(~/[^a-zA-Z]/, '')}.spring;

          @Component
          public class FooController implements SparkSpringController {
            private final FooControllerDelegate delegate;
            
            @Autowired
            public FooController() {
              delegate = new FooControllerDelegate();
            }
            
            @Override
            public void setupRoutes() {
                delegate.setupRoutes();
            }
          }
        """
      out.println(contents.stripIndent().trim())
    }

    file('settings.gradle').withWriter { out ->

      def contents =
        """
          /*
           * Copyright ${Calendar.getInstance().get(Calendar.YEAR)} ThoughtWorks, Inc.
           *
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           *     http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           */
        """

      out.println(contents.stripIndent().trim())
      out.println("")
      out.println("rootProject.name = 'gocd'")
      out.println("")
      def existingProjects = rootProject.allprojects.findAll { prj -> prj.childProjects.isEmpty() }.collect { it.path }
      def newProjects = existingProjects + [":api:${newProjectName}"]
      newProjects.sort().unique().each { out.println "include '${it}'" }
    }
  }
}
