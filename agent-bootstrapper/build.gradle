import com.thoughtworks.go.build.VerifyJarTask

/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

description = 'GoCD Agent Bootstrapper'

dependencies {
  compile project(':agent-common')
  compile group: 'com.apple', name: 'AppleJavaExtensions', version: '1.4'
  testCompile project(':test-utils')

  packagingOnly project(path: ':agent-launcher', configuration: 'fatJarConfig')
  extractedAtTopLevel group: 'one-jar', name: 'boot', version: '0.96'
}

jar {
  classifier 'classes'
}

task fatJar(type: Jar, dependsOn: [':agent-bootstrapper:jar', ":agent-launcher:fatJar"]) {
  manifest {
    attributes 'Main-Class': 'com.simontuffs.onejar.Boot'
    attributes 'One-Jar-Main-Class': 'com.thoughtworks.go.agent.bootstrapper.AgentBootstrapper'
  }

  from(configurations.compile) { into "lib/" }
  from(jar.archivePath) {
    into('main/')
    rename "(.*)-${project.version}-classes.jar", 'agent-bootstrapper-classes.jar'
  }

  from(configurations.packagingOnly) {
    into "defaultFiles/"
    rename "(.*)-${project.version}.jar", '$1.jar'
  }

  with(copySpec {
    from { configurations.extractedAtTopLevel.collect { it.isDirectory() ? it : zipTree(it) } }
    include '**/*.class'
    exclude 'OneJar.class'
    into("/")
  })

  doLast {
    verifyJar.execute()
  }
}

task verifyJar(type: VerifyJarTask) {
  jarTask = fatJar
  expectedJars = [
      'defaultFiles': [
          "agent-launcher.jar",
      ],
      'main'        : [
          "agent-bootstrapper-classes.jar",
      ],
      "lib"         : [
          "agent-common-${project.version}.jar",
          "AppleJavaExtensions-1.4.jar",
          "base-${project.version}.jar",
          "commons-codec-1.4.jar",
          "fluent-hc-4.5.2.jar",
          "httpclient-4.5.2.jar",
          "httpcore-4.4.4.jar",
          "jcommander-1.48.jar",
          "commons-io-2.5.jar",
          "commons-lang-2.6.jar",
          "commons-logging-1.1.1.jar",
          "joda-time-2.3.jar",
          "log4j-1.2.17.jar",

      ]
  ]
}

task prepare(dependsOn: [':agent-launcher:fatJar', ':test-agent:jar']) {
  doFirst {
    project.copy {
      from { project(':agent-launcher').fatJar.archivePath }
      into "testdata"
      rename "(.*)-${project.version}.jar", '$1.jar'
    }

    project.copy {
      from { project(':test-agent').jar.archivePath }
      into "testdata"
      rename "(.*)-${project.version}.jar", '$1.jar'
    }
  }
}

test {
  dependsOn prepare
}

artifacts {
  fatJarConfig fatJar
}
