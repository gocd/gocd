/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m = require('mithril');
const _ = require('lodash');

const PipelineInstanceWidget = require('views/dashboard/pipeline_instance_widget');

const PipelineOperationsWidget = {
  oninit(vnode) {
    const self              = vnode.state;
    const operationMessages = vnode.attrs.operationMessages;
    const pipeline          = vnode.attrs.pipeline;

    self.unpause = () => {
      pipeline.unpause().then((res) => {
        operationMessages.success(pipeline.name, res.message);
      }, (res) => {
        operationMessages.failure(pipeline.name, res.responseJSON.message);
      });
    };
  },

  view(vnode) {
    const pipeline          = vnode.attrs.pipeline;
    const operationMessages = vnode.attrs.operationMessages;

    let pauseUnpauseButton, pausedMessage;
    if (pipeline.isPaused) {
      pauseUnpauseButton = (<button onclick={vnode.state.unpause} className="btn unpause"/>);
      pausedMessage      = `Paused by ${pipeline.pausedBy} (${pipeline.pausedCause})`;
    } else {
      pauseUnpauseButton = (<button className="btn pause"/>);
    }

    let flashMessage;
    if (operationMessages.messageFor(pipeline.name)) {
      flashMessage = (<div class={`pipeline_message ${operationMessages.messageTypeFor(pipeline.name)}`}>
        <p>{operationMessages.messageFor(pipeline.name)}</p>
      </div>);
    }

    return (
      <div>
        {flashMessage}
        <ul className="pipeline_operations">
          <li><button className="btn play"/></li>
          <li><button className="btn play_with_options"/></li>
          <li>{pauseUnpauseButton}</li>
        </ul>
        <div className="pipeline_pause-message">{pausedMessage}</div>
      </div>
    );
  }
};

const PipelineHeaderWidget = {
  oninit(vnode) {
    const self              = vnode.state;
    const operationMessages = vnode.attrs.vm.operationMessages;
    const pipeline          = vnode.attrs.pipeline;

    self.unlock = () => {
      pipeline.unlock().then((res) => {
        operationMessages.success(pipeline.name, res.message);
      }, (res) => {
        operationMessages.failure(pipeline.name, res.responseJSON.message);
      });
    };
  },

  view: (vnode) => {
    const pipeline = vnode.attrs.pipeline;
    let settingsButton;
    if (pipeline.canAdminister) {
      const settingsPath = vnode.attrs.isQuickEditPageEnabled ? pipeline.quickEditPath : pipeline.settingsPath;
      settingsButton     = (<a class={`pipeline_edit`} href={settingsPath}/>);
    } else {
      settingsButton = (<a class={`pipeline_edit disabled`}/>);
    }

    let pipelineLockButton;
    if (pipeline.isLocked) {
      pipelineLockButton = pipeline.canUnlock
        ? (<button onclick={vnode.state.unlock} className="pipeline_locked"/>)
        : (<button className="pipeline_locked disabled"/>);
    }

    return (
      <div class="pipeline_header">
        <h3 class="pipeline_name"> {pipeline.name}</h3>
        <a href={pipeline.historyPath} class="pipeline_history">History</a>
        <div className="pipeline_actions">
          {settingsButton}
          {pipelineLockButton}
        </div>
        <PipelineOperationsWidget pipeline={pipeline}
                                  operationMessages={vnode.attrs.vm.operationMessages}/>
      </div>
    );
  }
};


const PipelineWidget = {
  oninit(vnode) {
    this.args = vnode.attrs;
  },

  view: (vnode) => {
    const pipeline          = vnode.attrs.pipeline;
    const pipelineInstances = _.map(pipeline.instances, (instance) => {
      return (
        <PipelineInstanceWidget instance={instance}
                                dropdown={vnode.attrs.vm.dropdown}
                                pipelineName={pipeline.name}/>
      );
    });

    return (
      <li class="pipeline-group_pipeline">
        <div class="pipeline">
          <PipelineHeaderWidget pipeline={vnode.attrs.pipeline}
                                vm={vnode.attrs.vm}
                                isQuickEditPageEnabled={vnode.attrs.isQuickEditPageEnabled}/>
          <div className="pipeline_instances">
            {pipelineInstances}
          </div>

        </div>
      </li>
    );
  }
};

module.exports = PipelineWidget;
