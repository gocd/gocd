/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.thoughtworks.go.build.VerifyJarTask

description = 'GoCD Agent Bootstrapper'

dependencies {
  compile project(':agent-common')
  compile group: 'commons-codec', name: 'commons-codec', version: project.versions.commonsCodec
  testCompile project(':test:test-utils')
  testCompile group: 'org.mockito', name: 'mockito-core', version: project.versions.mockito
  testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: project.versions.hamcrest
  packagingOnly project(path: ':agent-launcher', configuration: 'fatJarConfig')
  extractedAtTopLevel project(':jar-class-loader')
  testCompileOnly group: 'junit', name: 'junit', version: project.versions.junit
  testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: project.versions.junit5
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: project.versions.junit5
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: project.versions.junit5
}

jar {
  archiveClassifier = 'classes'
}

task fatJar(type: Jar) {
  dependsOn jar, configurations.packagingOnly, configurations.extractedAtTopLevel

  manifest {
    attributes 'Main-Class': 'com.thoughtworks.gocd.Boot'
    attributes 'GoCD-Main-Class': 'com.thoughtworks.go.agent.bootstrapper.AgentBootstrapper'
  }

  from(configurations.compile + jar.archivePath) { into "lib/" }

  from(configurations.packagingOnly) {
    into "defaultFiles/"
    rename "(.*)-${project.version}.jar", '$1.jar'
  }

  from(configurations.extractedAtTopLevel.collect { it.isDirectory() ? it : zipTree(it) }) {
    into("/")
  }
}

task verifyJar(type: VerifyJarTask) {
  jarTask = fatJar
  expectedJars = [
    'defaultFiles': [
      "agent-launcher.jar",
    ],
    'lib'         : [
      "agent-bootstrapper-${project.version}-classes.jar",
      "agent-common-${project.version}.jar",
      "ant-${project.versions.apacheAnt}.jar",
      "base-${project.version}.jar",
      "commons-codec-${project.versions.commonsCodec}.jar",
      "commons-io-${project.versions.commonsIO}.jar",
      "commons-lang3-${project.versions.commonsLang3}.jar",
      "httpclient-${project.versions.apacheHttpComponents}.jar",
      "httpcore-4.4.10.jar",
      "jcl-over-slf4j-${project.versions.slf4j}.jar",
      "jcommander-${project.versions.jcommander}.jar",
      "joda-time-${project.versions.jodaTime}.jar",
      "logback-classic-${project.versions.logback}.jar",
      "logback-core-${project.versions.logback}.jar",
      "slf4j-api-${project.versions.slf4j}.jar",
    ]
  ]
}

artifacts {
  fatJarConfig fatJar
}
