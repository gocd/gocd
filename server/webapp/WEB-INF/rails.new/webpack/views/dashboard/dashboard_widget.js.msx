/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m                   = require('mithril');
const Stream              = require('mithril/stream');
const _                   = require('lodash');
const $                   = require('jquery');
const ComponentMixins     = require('helpers/mithril_component_mixins');
const PipelineWidget      = require('views/dashboard/pipeline_widget');
const PersonalizeWidget   = require('views/dashboard/personalize_widget');
const PipelineSelectionVM = require('views/dashboard/models/pipeline_selection_view_model');
const PipelineSelection   = require('models/dashboard/pipeline_selection');

const DashboardWidget = {
  oninit(vnode) {
    const self               = vnode.state;
    self.dashboard           = Stream(vnode.attrs.dashboard);
    self.pipelineSelection   = Stream();
    self.pipelineSelectionVM = new PipelineSelectionVM();

    const filterBySearchValue = _.debounce(() => {
      self.dashboard(vnode.attrs.dashboard.filterBy(vnode.attrs.vm.searchText().toLowerCase()));
      m.redraw();
    }, 200);

    self.searchTextUpdated = (e) => {
      const filterText = e.target.value;
      vnode.attrs.vm.searchText(filterText);
      filterBySearchValue();
    };

    ComponentMixins.HasViewModel.call(self);

    self.getPipelinesGroupView = (pipelineGroup) => {
      const pipelines = _.map(pipelineGroup.pipelines, (pipelineName) => {
        return (
          <PipelineWidget pipeline={self.dashboard().findPipeline(pipelineName)}
                          doCancelPolling={vnode.attrs.doCancelPolling}
                          doRefreshImmediately={vnode.attrs.doRefreshImmediately}
                          isQuickEditPageEnabled={vnode.attrs.isQuickEditPageEnabled}
                          vm={vnode.attrs.vm}/>
        );
      });

      const pipelineGroupSettingsIcon = (pipelineGroup.canAdminister)
        ? (<a href={pipelineGroup.path} class="edit_config pipeline-group_edit-config"></a>)
        : (<a href="#" class="edit_config pipeline-group_edit-config disabled"></a>);

      return (
        <div class="pipeline-group">
          <h2 class="pipeline-group_title">
            <span> pipeline group </span>
            <strong>{pipelineGroup.name}</strong>
            {pipelineGroupSettingsIcon}
          </h2>
          <ul class="pipeline-group_items">
            {pipelines}
          </ul>
        </div>
      );
    };

    self.togglePersonalizeDropdown = (e) => {
      (vnode.attrs.vm.personalizeView.isOpen())
        ? self.pipelineSelection(undefined)
        : PipelineSelection.get().then((selection) => {
          self.pipelineSelection(selection);
          self.pipelineSelectionVM.initialize(selection.pipelineGroups());
        }).then(m.redraw);

      vnode.attrs.vm.personalizeView.toggle();
      e.stopPropagation();
      m.redraw();
    };

    const attachClickEventToBody = () => {
      const body = $("body");
      body.click(() => {
        vnode.attrs.vm.dropdown.hideAll();
        vnode.attrs.vm.personalizeView.hide();
        m.redraw();
      });
    };

    attachClickEventToBody();
  },

  view(vnode) {
    const self       = vnode.state;
    const vm         = vnode.attrs.vm;
    const groupsView = _.map(self.dashboard().getPipelineGroups(), self.getPipelinesGroupView);

    let personalizeView;

    if (vm.personalizeView.isOpen()) {
      personalizeView = (<PersonalizeWidget pipelineSelection={vnode.state.pipelineSelection}
                                            doRefreshImmediately={vnode.attrs.doRefreshImmediately}
                                            vm={vnode.state.pipelineSelectionVM}/>);
    }
    return (
      <div class="pipeline_wrapper">
        <div class="page_header">
          <h1 class="page_title">Pipelines</h1>
          <div class="filter">
            <input type="text"
                   class="pipeline-search"
                   value={vm.searchText()}
                   oninput={vnode.state.searchTextUpdated.bind(vnode.state)}
                   placeholder="Search for pipeline"/>
            <button class="filter_btn"
                    onclick={vnode.state.togglePersonalizeDropdown.bind(vnode.state)}>
              Filter View <i class="fa fa-filter"/>
            </button>
          </div>
          {personalizeView}
        </div>
        <div class="dashboard">
          {groupsView}
        </div>
      </div>
    );
  }
};

module.exports = DashboardWidget;
