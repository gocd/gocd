/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'helpers/form_helper', 'views/shared/new_modal',
  'models/pipeline_configs/packages', 'models/pipeline_configs/plugin_infos', 'views/pipeline_configs/package_repositories/package_config_new_widget',
  'views/pipeline_configs/package_repositories/package_config_edit_widget'
], function (m, _, f, Modal, Packages, PluginInfos, PackageConfigNewWidget, PackageConfigEditWidget) {

  var addOrReplacePackage = function (repository, newPackage) {
    var existingPackage = repository.packages().findPackage(function (pkg) {
      return pkg.id() === newPackage.id();
    });
    if (_.isNil(existingPackage)) {
      repository.packages().addPackage(newPackage);
    }
    else {
      repository.packages().replacePackage(newPackage, function (pkg) {
        return pkg.id() === newPackage.id();
      });
    }
  };

  var onSuccessOfPackageApi = function (vm, modal, material, repositoryVM, allRepositories, newPkg) {
    vm.saveSuccess();
    var newPackage = Packages.Package.fromJSON(newPkg);
    material.ref(newPackage.id());
    material.package(newPackage);
    repositoryVM.packageId(newPackage.id());
    var existingRepository = allRepositories().findRepository(function (repo) {
      return repo.id() === newPackage.packageRepo().id();
    });
    material.repository(existingRepository);
    addOrReplacePackage(existingRepository, newPackage);
    modal.destroy();
  };

  var onFailureOfPackageApi = function (vm, data) {
    vm.saveFailed(data);
  };

  var EditPackageWidget = {
    controller: function (args) {
      var ctrl = {
        isPluginMissing: function () {
          return _.isNil(PluginInfos.findById(args.material.repository().pluginMetadata().id()));
        },

        editPackage: function (packageForEdit, vm, modal) {
          packageForEdit().update().then(onSuccessOfPackageApi.bind(this, vm, modal, args.material, args.repositoryVM, args.repositories), onFailureOfPackageApi.bind(this, vm));
        },

        update: function () {
          args.create(args.packageForEdit, args.material.repository, PackageConfigEditWidget, 'Edit Package', ctrl.editPackage);
        }
      };
      return ctrl;
    },

    view: function (ctrl, args) {
      var packageForEdit = args.packageForEdit();
      var data           = {Name: packageForEdit.name(), AutoUpdate: packageForEdit.autoUpdate()};

      packageForEdit.configuration().mapConfigurations(function (conf) {
        data[_.capitalize(conf.key())] = conf.isSecureValue() ? "***********" : conf.value();
      });

      var editButton = ctrl.isPluginMissing() ? (
        <f.alert><b>{args.material.repository().pluginMetadata().id()}</b> plugin seems to be removed.</f.alert>)
        : (<f.editButton class={null} onclick={ctrl.update}/>);

      return (
        <div class='package'>
          {editButton}
          <dl class="key-value-pair">
            {_.map(data, function (v, k) {
              return [
                (<dt class={_.toLower(k)}>{k}</dt>),
                (<dd>{v}</dd>)
              ];
            })}
          </dl>
        </div>
      );
    }
  };


  var NewPackageWidget = {
    controller: function (args) {
      var ctrl = {
        createPackage: function (packageForEdit, vm, modal) {
          packageForEdit().create().then(onSuccessOfPackageApi.bind(this, vm, modal, args.material, args.repositoryVM, args.repositories), onFailureOfPackageApi.bind(this, vm));
        },
        create:        function () {
          var packageForEdit = m.prop(Packages.Package.fromJSON({}));
          args.create(packageForEdit, args.material.repository, PackageConfigNewWidget, 'Add Package', ctrl.createPackage);
        }
      };
      return ctrl;

    },

    view: function (ctrl, args) {

      if (args.material.repository().packages().isEmptyPackage()) {
        return (
          <div class="columns medium-8 no-package">
            <label>No packages available in this repository.</label> <a class='add-button button'
                                                                        href="javascript:void(0)"
                                                                        onclick={ctrl.create}>Create New Package</a>
          </div>
        );
      }
      return (
        <div class="columns medium-6 no-package"><a class='add-button button button-no-text'
                                                    href="javascript:void(0)"
                                                    onclick={ctrl.create}/></div>);
    }
  };

  var SelectPackageWidget = {
    controller: function (args) {

      return {
        selectPackage: function (packageId) {
          args.material.ref(packageId);
          args.repositoryVM.packageId(packageId);
          args.getPackageForEdit(packageId);
        }
      };
    },

    view: function (ctrl, args) {
      var items = [];
      args.material.repository().packages().mapPackages(function (packageInfo) {
        var item     = {};
        item['id']   = packageInfo.id();
        item['text'] = packageInfo.name();
        items.push(item);
      });
      return (
        <div class="columns medium-6">
          <select disabled={false}
                  data-prop-name={"defaultPackageId"}
                  class='package-selector'
                  onchange={m.withAttr('value', ctrl.selectPackage)}>
            {_.map(items, function (item) {
              return (
                <option value={item.id} selected={item.id === args.material.ref()}>{item.text}</option>
              );
            })}
          </select>
        </div>
      );
    }
  };

  var PackageWidget = {
    controller: function (args) {
      var ctrl = {

        getPackageForEdit: function (packageId) {
          var packageForEdit = args.material.package;
          if (packageId) {
            Packages.getPackage(packageId, packageForEdit, args.material.ref, args.material.repository());
          }
          return packageForEdit;
        },

        defaultPackageId: m.prop(args.material.ref()),

        create: function (packageForEdit, repository, PackageConfigurationWidget, modalTitle, performOperation) {
          var vm = new Packages.vm();

          var modal = new Modal({
            size:    'small',
            title:   modalTitle,
            body:    (<PackageConfigurationWidget packageForEdit={packageForEdit}
                                                  repository={repository()}
                                                  vm={vm}/>),
            onclose: function () {
              vm.reset();
              modal.destroy();
            },
            buttons: [
              {
                text:    'Save',
                class:   'save primary',
                onclick: function () {
                  vm.startUpdating();
                  performOperation(packageForEdit, vm, modal);
                }
              }
            ]
          });
          modal.render();
        }

      };
      return ctrl;
    },
    view:       function (ctrl, args) {
      return (
        <span>
          <div class="row expanded">

            {args.material.repository().packages().isEmptyPackage() ? '' :
              <SelectPackageWidget material={args.material}
                                   defaultPackageId={ctrl.defaultPackageId}
                                   repositoryVM={args.repositoryVM}
                                   getPackageForEdit={ctrl.getPackageForEdit.bind(ctrl)}/>}

            <NewPackageWidget material={args.material}
                              repositoryVM={args.repositoryVM}
                              repositories={args.repositories}
                              create={ctrl.create}/>
          </div>

          {args.material.repository().packages().isEmptyPackage() ? '' :
            <EditPackageWidget packageForEdit={args.material.package}
                               material={args.material}
                               repositoryVM={args.repositoryVM}
                               repositories={args.repositories}
                               create={ctrl.create}/>}
        </span>
      );
    }
  };
  return PackageWidget;
});