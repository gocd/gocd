/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'helpers/form_helper', 'helpers/mithril_component_mixins', 'views/shared/new_modal',
  'models/pipeline_configs/packages', 'models/pipeline_configs/repositories', 'models/pipeline_configs/plugin_infos', 'views/pipeline_configs/package_repositories/package_config_new_widget',
  'views/pipeline_configs/package_repositories/package_config_edit_widget'
], function (m, _, f, ComponentMixins, Modal, Packages, Repositories, PluginInfos, PackageConfigNewWidget, PackageConfigEditWidget) {

  var onSuccessOfPackageApi = function (vm, modal, material, data) {
    vm.saveSuccess();
    material.ref(data.id());
    Repositories.findById(material.repository().id()).then(function (repository) {
      material.repository(repository);
    });
    modal.destroy();
  };

  var onFailureOfPackageApi = function (vm, data) {
    vm.saveFailed(data);
  };

  var EditPackageWidget = {
    controller: function (args) {
      var ctrl = {
        isPluginMissing: function () {
          return _.isNil(PluginInfos.findById(args.material.repository().pluginMetadata().id()));
        },

        update:         function () {

          var vm = new Packages.vm();
          var packageForEdit = args.getPackageForEdit(args.material.ref());
          var modal = new Modal({
            size:    'small',
            title:   'Edit Package',
            body:    (<PackageConfigEditWidget packageForEdit={packageForEdit}
                                               repository={args.material.repository()}
                                               vm={vm}/>),
            onclose: function () {
              vm.reset();
              modal.destroy();
            },
            buttons: [
              {
                text:    'Save',
                class:   'save primary',
                onclick: function () {
                  vm.startUpdating();
                  packageForEdit().update().then(onSuccessOfPackageApi.bind(this, vm, modal, args.material), onFailureOfPackageApi.bind(this, vm));
                }
              }
            ]
          });
          modal.render();
        }
      };
      return ctrl;
    },

    view: function (ctrl, args) {
      var packageForEdit = args.getPackageForEdit(args.material.ref())();
      var data           = {Name: packageForEdit.name()};

      packageForEdit.configuration().mapConfigurations(function (conf) {
        data[_.capitalize(conf.key())] = conf.isSecureValue() ? "***********" : conf.value();
      });

      var editButton = ctrl.isPluginMissing() ? (
        <f.alert><b>{args.material.repository().pluginMetadata().id()}</b> plugin seems to be removed.</f.alert>)
        : (<f.editButton class={null} onclick={ctrl.update}/>);

      return (
        <div>
          <div class='repository'>
            {editButton}
            <f.row>
              <ul>
                {_.map(data, function (v, k) {
                  return (
                    <li>
                      <label class={_.toLower(k)}>{k}</label><span>{v}</span>
                    </li>
                  );
                })}
              </ul>
            </f.row>
          </div>
        </div>
      );
    }
  };


  var NewPackageWidget = {
    controller: function (args) {
      var ctrl = {
        create: function () {
          var vm             = new Packages.vm();

          var modal = new Modal({
            size:    'small',
            title:   'Add Package',
            body:    (<PackageConfigNewWidget packageForEdit={args.packageForEdit}
                                              repository={args.material.repository()}
                                              vm={vm}/>),
            onclose: function () {
              vm.reset();
              modal.destroy();
            },
            buttons: [
              {
                text:    'Save',
                class:   'save primary',
                onclick: function () {
                  vm.startUpdating();
                  args.packageForEdit().create().then(onSuccessOfPackageApi.bind(this, vm, modal, args.material), onFailureOfPackageApi.bind(this, vm));
                }
              }
            ]
          });
          modal.render();
        }
      };
      return ctrl;

    },

    view: function (ctrl, args) {
      return (
        <f.row>
          <f.column class='no-repo' size={4} largeSize={6} end>
            {args.material.repository().packages().countPackage() === 0 ?
              <div>
                <label>No packages available in this repository.</label> <a class='add-button button'
                                                                            href="javascript:void(0)"
                                                                            onclick={ctrl.create}>Create New Package</a>
              </div>
              : <a class='add-button button' href="javascript:void(0)"
                   onclick={ctrl.create}/>}

          </f.column>
        </f.row>
      );
    }
  };

  var PackageWidget = {
    controller: function (args) {
      var ctrl = {
        packageForEdit: m.prop(new Packages.Package({})),

        getPackageForEdit: function (packageId) {
          var packageForEdit = this.packageForEdit;
          if(packageId) {
            Packages.getPackage(packageId, packageForEdit);
          }
          return this.packageForEdit;
        }
      };
      return ctrl;
    },
    view:       function (ctrl, args) {
      return (
        <div>
          <NewPackageWidget material={args.material}
                            packageForEdit={ctrl.packageForEdit}
                            getPackageForEdit={ctrl.getPackageForEdit}/>
          {_.isNil(args.material.ref()) ? '' : <EditPackageWidget getPackageForEdit={ctrl.getPackageForEdit.bind(ctrl)}
                                                                  material={args.material}/>}
        </div>
      );
    }
  };
  return PackageWidget;
});