/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'string-plus',
  'helpers/form_helper',
  'views/agents/agent_state_count_widget',
  'views/agents/agent_row_widget',
  'views/agents/agent_table_header',
  'views/agents/button_row_widget',
  'models/agents/agents'
], function (m, _, s,
             f,
             AgentStateCountWidget,
             AgentRowWidget,
             AgentTableHeader,
             ButtonRowWidget, Agents) {

  var AgentsWidget = {
    controller: function (args) {

      var clearAllCheckboxes = function () {
        args.vm.agents.clearAllCheckboxes();
      };

      var timeoutID         = m.prop();
      var currentRefreshXHR = m.prop();

      var isUpdateInProgress = m.prop(false);

      var isUserAdmin = function () {
        return args.isUserAdmin;
      };

      var ctrl = {
        message: m.prop(),

        type: m.prop(),

        allAgents: args.allAgents,

        onunload: function () {
          this.cancelRefresh();
          this.cancelRefreshTimeout();
        },

        performingUpdate: function () {
          isUpdateInProgress(true);
          this.cancelRefresh();
          m.redraw(true);
        },

        donePerformingUpdate: function () {
          isUpdateInProgress(false);
          clearAllCheckboxes();
          this.cancelRefresh();
          this.refresh();
          m.redraw(true);
        },

        isUpdateInProgress: function () {
          return isUpdateInProgress();
        },

        hideDropDownsAndMessage: function () {
          args.vm.dropdown.hideAllDropDowns();
          this.message('');
        },

        cancelRefreshTimeout: function () {
          if (!_.isNil(timeoutID())) {
            window.clearTimeout(timeoutID());
            timeoutID(undefined);
          }
        },

        refreshAfterInterval: function () {
          this.cancelRefreshTimeout();
          timeoutID(window.setTimeout(this.refresh.bind(this), 10000));
        },

        cancelRefresh: function () {
          if (!_.isNil(currentRefreshXHR())) {
            currentRefreshXHR().isAbortedByGoCD = true;
            currentRefreshXHR().abort();
            currentRefreshXHR(undefined);
          }
        },

        refresh: function () {
          this.cancelRefresh();
          var requestPromise      = Agents.all(currentRefreshXHR);
          var request             = currentRefreshXHR();
          request.isAbortedByGoCD = false;
          var onSuccess           = function (data) {
            this.allAgents(data);
            args.vm.initializeWith(data);
            this.refreshAfterInterval();
          };
          var onError             = function () {
            if (!request.isAbortedByGoCD) {
              this.refreshAfterInterval();
            }
          };
          requestPromise.then(onSuccess.bind(this), onError.bind(this));
        },

        selectAllAgents: function () {
          args.vm.agents.selectAllAgents(this.allAgents);
        },

        areAllAgentsSelected: function () {
          return args.vm.agents.areAllAgentsSelected(this.allAgents);
        },

        selectedAgentsUuids: function () {
          return args.vm.agents.selectedAgentsUuids();
        },

        selectedAgentsCount: function () {
          return this.selectedAgentsUuids().length;
        },

        displaySuccessMessage: function (action) {
          var count = this.selectedAgentsCount();
          this.message(action + ' ' + count + ' ' + _('agent').pluralize(count));
          this.type('success');
        },

        displayErrorMessage: function (errors) {
          this.message(errors.message);
          this.type('warning');
        },

        displayModifiedMessage: function (action, addedItems, removedItems) {
          var count = this.selectedAgentsCount();
          this.message(_(action).pluralize(_.compact(_.concat(addedItems, removedItems)).length) + ' modified on ' + count + ' ' + _('agent').pluralize(count));
          this.type('success');
        },

        disableAgents: function () {
          this.performingUpdate();
          this.allAgents().disableAgents(this.selectedAgentsUuids())
            .then(this.displaySuccessMessage.bind(this, 'Disabled'), ctrl.displayErrorMessage.bind(ctrl))
            .then(this.donePerformingUpdate.bind(this));
        },

        enableAgents: function () {
          this.performingUpdate();
          this.allAgents().enableAgents(this.selectedAgentsUuids())
            .then(this.displaySuccessMessage.bind(this, 'Enabled'), this.displayErrorMessage.bind(this))
            .then(this.donePerformingUpdate.bind(this));
        },

        deleteAgents: function () {
          this.performingUpdate();
          this.allAgents().deleteAgents(this.selectedAgentsUuids())
            .then(this.displaySuccessMessage.bind(this, 'Deleted'), this.displayErrorMessage.bind(this))
            .then(this.donePerformingUpdate.bind(this));
        },

        updateResources: function (addResources, removeResources) {
          this.performingUpdate();
          this.allAgents().updateResources(this.selectedAgentsUuids(), addResources, removeResources)
            .then(this.displayModifiedMessage.bind(this, 'Resource', addResources, removeResources), this.displayErrorMessage.bind(this))
            .then(this.donePerformingUpdate.bind(this));
        },

        updateEnvironments: function (addEnvironments, removeEnvironments) {
          this.performingUpdate();
          this.allAgents().updateEnvironments(this.selectedAgentsUuids(), addEnvironments, removeEnvironments)
            .then(this.displayModifiedMessage.bind(this, 'Environment', addEnvironments, removeEnvironments), this.displayErrorMessage.bind(this))
            .then(this.donePerformingUpdate.bind(this));
        },

        findAgent: function (uuid) {
          return this.allAgents().findAgentByUuid(uuid);
        },

        selectedAgents: function () {
          return _.map(this.selectedAgentsUuids(), this.findAgent.bind(this));
        },

        filteredAndSortedAgents: function () {
          var attrName = m.route.param('sortBy') || 'agentState';
          var orderBy  = m.route.param('orderBy') || 'asc';
          return this.allAgents().filterBy(args.vm.filterText()).sortBy(attrName, orderBy);
        },

        sortBy: function (sortBy, orderBy) {
          m.route('/' + sortBy + '/' + orderBy);
        },

        areOperationsAllowed: function () {
          return args.vm.agents.isAnyAgentSelected() && isUserAdmin();
        }
      };

      m.redraw(true);     //freezes rendering of the page until the ajax call to agents completes
      ctrl.refresh();

      return ctrl;
    },

    view: function (ctrl, args) {
      var filterText                     = args.vm.filterText();
      var filteredAgents                 = ctrl.filteredAndSortedAgents();
      var message                        = ctrl.message();
      var maxCharsToBeDisplayedInMessage = 150;
      var classForTableBody = "agents-table-body";

      var updateMessage;

      if (!s.isBlank(message)) {
        updateMessage = (
          <f.row class="message">
            <div data-alert class={"callout radius " + ctrl.type()} title={message}>

              {_.truncate(message, {'length': maxCharsToBeDisplayedInMessage})}
              <a href="#" class="close"></a>
            </div>
          </f.row>
        );

        classForTableBody = classForTableBody + " has-message";
      }


      return (
        <div onclick={ctrl.hideDropDownsAndMessage.bind(ctrl)}>
          <div class="header-panel">
            <ButtonRowWidget areOperationsAllowed={ ctrl.areOperationsAllowed.bind(ctrl) }
                             dropdown={args.vm.dropdown}
                             selectedAgents={ ctrl.selectedAgents.bind(ctrl) }
                             onDisable={ ctrl.disableAgents.bind(ctrl) }
                             onEnable={ ctrl.enableAgents.bind(ctrl) }
                             onDelete={ ctrl.deleteAgents.bind(ctrl) }
                             onResourcesUpdate={ ctrl.updateResources.bind(ctrl) }
                             onEnvironmentsUpdate={ ctrl.updateEnvironments.bind(ctrl) }
                             isUpdateInProgress={ctrl.isUpdateInProgress}/>

            <div class="search-panel">
              <f.row>
                <f.column size={6} largeSize={3}>
                  <div class="search-bar">
                    <input type="text"
                           oninput={m.withAttr("value", args.vm.filterText)}
                           value={filterText}
                           placeholder="Filter Agents"
                           id="filter-agent"
                           class="filter-agent"
                    />
                  </div>
                </f.column>

                <f.column size={6} largeSize={8}>
                  <AgentStateCountWidget agents={ctrl.filteredAndSortedAgents.bind(ctrl)}/>
                </f.column>

              </f.row>
            </div>
            {updateMessage}
            <f.row>
              <div class="container">
                <table class="go-table agents-table">
                  <AgentTableHeader
                    onCheckboxClick={ctrl.selectAllAgents.bind(ctrl)}
                    checkboxValue={ctrl.areAllAgentsSelected.bind(ctrl)}
                    sortBy={ctrl.sortBy}
                    isUserAdmin={args.isUserAdmin}/>

                </table>
              </div>
            </f.row>
          </div>
          <f.row class={classForTableBody}>
            <div class="container">
              <table class="go-table agents-table">
                <tbody>
                {
                  filteredAgents.mapAgents(function (agent) {
                    var uuid          = agent.uuid();
                    var checkboxModel = args.vm.agents.checkboxFor(uuid);

                    return (
                      <AgentRowWidget agent={agent}
                                      key={uuid}
                                      checkBoxModel={checkboxModel}
                                      show={agent.matches(filterText)}
                                      dropdown={args.vm.dropdown}
                                      isUserAdmin={args.isUserAdmin}

                      />
                    );

                  })
                }
                </tbody>
              </table>
            </div>
          </f.row>
        </div>
      );
    }
  };

  return AgentsWidget;
});
