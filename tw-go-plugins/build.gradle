import com.thoughtworks.go.build.DownloadFile
import com.thoughtworks.go.build.GithubArtifact
import com.thoughtworks.go.build.VerifyJarTask
import org.apache.commons.codec.digest.DigestUtils

/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

configurations {
  pluginsZipConfig
}

def dependencies = [
  new GithubArtifact(
    user: 'gocd',
    repo: 'gocd-ldap-authentication-plugin',
    release: '2.0.0',
    asset: 'gocd-ldap-authentication-plugin-2.0.0-65.jar',
    checksum: '8bdd9a9de6e53f0dc1ccb03f6b4b1bbb21e179d581e435fa466541ac7e4d0be4'
  ),
  new GithubArtifact(
    user: 'gocd',
    repo: 'gocd-filebased-authentication-plugin',
    release: '2.0.0',
    asset: 'gocd-filebased-authentication-plugin-2.0.0-63.jar',
    checksum: '0095d3a3db8059e6406ef71269cd0ca29cc1f9411f3583fc73e28aea218110f7'
  ),
  new GithubArtifact(
    user: 'gocd',
    repo: 'gocd-yum-repository-poller-plugin',
    release: '2.0.3',
    asset: 'gocd-yum-repo-plugin-2.0.3-3.jar',
    checksum: 'cdf48ebb2cda67fafd2684b79c6d6e7580156876ea6084539c9d8a117f1f8883'
  ),
  new GithubArtifact(
    user: 'tomzo',
    repo: 'gocd-yaml-config-plugin',
    release: '0.10.0',
    asset: 'yaml-config-plugin-0.10.0.jar',
    checksum: '36640d92d01e4e1ea5c302fc581d0944143cd667cb2e69f32708c08ac91418a7'
  ),
  new GithubArtifact(
    user: 'tomzo',
    repo: 'gocd-json-config-plugin',
    release: '0.3.7',
    asset: 'json-config-plugin-0.3.7.jar',
    checksum: '3ebb4c809e02d3ed6ab87e382c461e8650ef040fd6a0777f53a49c38b3978d24'
  )
]

task createVersionFile {
  def file = file("${project.buildDir}/version.txt")
  inputs.property('version', rootProject.version)
  inputs.property('gitRevision', rootProject.gitRevision)

  outputs.file file

  doLast {
    file.getParentFile().mkdirs()
    file.withWriter { out ->
      out.write("${rootProject.version} (${rootProject.gitRevision})")
    }
  }
}

task downloadPlugins {
}

task pluginsZip(type: Zip) {
  finalizedBy 'verifyPluginZip'

  archiveBaseName = 'plugins'
  dependsOn createVersionFile
  from(createVersionFile)

  from(dependencies.collect { dep -> destFile(dep) })
}

task verifyPluginZip(type: VerifyJarTask) {
  jarTask = pluginsZip

  expectedJars = [
    '/': dependencies.collect { dep -> "${dep.repo}.jar".toString() }
  ]
}

artifacts {
  pluginsZipConfig pluginsZip
}

dependencies.each { dep ->
  task "download-${dep.repo}"(type: DownloadFile) { downloadTask ->
    pluginsZip.dependsOn downloadTask
    downloadPlugins.dependsOn downloadTask
    downloadTask.src dep.downloadUrl
    downloadTask.dest destFile(dep)
    downloadTask.checksum dep.checksum
  }

  pluginsZip.from(destFile(dep))
}

private File destFile(GithubArtifact dep) {
  new File(gradle.gradleUserHomeDir, "download-cache/${DigestUtils.md5Hex(dep.downloadUrl)}/${dep.repo}.jar")
}

task prepare(dependsOn: pluginsZip)
