/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let m                  = require('mithril');
let f                  = require('helpers/form_helper');
let BuildDetailsWidget = require('views/agents/build_details_widget');


const joinOrNoneSpecified = function (things) {
  if (things.length === 0) {
    return (<em>none specified</em>);
  } else {
    return things.join(', ');
  }
};

const agentJobHistoryPath = function (uuid) {
  return `/go/agents/${  uuid  }/job_run_history`;
};

const createBuildDetailsDropDown = function (agent, args) {
  return (
    <BuildDetailsWidget agent={agent}
                        dropdown={args.dropdown}/>
  );
};

const AgentRowWidget = {
  oninit (vnode) {
    const args = vnode.attrs;

    this.buildDetailsClicked = function (name) {
      args.dropdown.create(name);
      args.dropdown.toggleDropDownState(name);
    };

    this.dropdownClass = function (name) {
      return args.dropdown.isDropDownOpen(name) ? "is-open" : '';
    };
  },

  view (vnode) {
    const ctrl = vnode.state;
    const args = vnode.attrs;

    const agent           = args.agent;
    const resources       = joinOrNoneSpecified(agent.resources());
    const environments    = joinOrNoneSpecified(agent.environments());
    let agentStatus       = agent.status();
    const isBuildingAgent = !agent.buildDetails().isEmpty();
    const isElasticAgent  = agent.isElasticAgent();
    const pluginInfos     = args.pluginInfos;
    let selectAgentCheckbox;
    let elasticAgentIcon;
    let hostnameLink      = <span>{agent.hostname()}</span>;

    if (isBuildingAgent) {
      agentStatus = <f.link onclick={ctrl.buildDetailsClicked.bind(ctrl, agent.uuid())}
                            class="has-build-details-drop-down">{agent.status()}</f.link>;
    }

    if (isElasticAgent && pluginInfos()) {
      const elasticAgentIconURL = pluginInfos().findById(agent.elasticPluginId()).imageUrl;
      elasticAgentIcon          = (
        <img class="agent-icon" src={elasticAgentIconURL}/>
      );
    }

    if (args.isUserAdmin) {
      selectAgentCheckbox = (
        <input type="checkbox"
               class="select-agent"
               checked={args.checkBoxModel()}
               onclick={m.withAttr('checked', args.checkBoxModel)}/>
      );
      hostnameLink        = (
        <a href={agentJobHistoryPath(agent.uuid())}>{agent.hostname()}</a>
      );
    }

    return (
      <tr key={agent.uuid()} class={agent.status().toLowerCase()}>
        <td key="checkbox">
          {selectAgentCheckbox}
        </td>
        <td key="agentIcon">
          {elasticAgentIcon}
        </td>
        <td key="hostname">
          {hostnameLink}
        </td>
        <td key="sandbox">{agent.sandbox()}</td>
        <td key="operatingSystem">{agent.operatingSystem()}</td>
        <td key="ipAddress">{agent.ipAddress()}</td>
        <td key="status" class={ctrl.dropdownClass(agent.uuid())}>
          {agentStatus}
          {isBuildingAgent ? createBuildDetailsDropDown(agent, args) : ''}
        </td>
        <td key="readableFreeSpace">{agent.readableFreeSpace()}</td>
        <td key="resources">{resources}</td>
        <td key="environments">{environments}</td>
      </tr>
    );
  }
};
module.exports       = AgentRowWidget;
