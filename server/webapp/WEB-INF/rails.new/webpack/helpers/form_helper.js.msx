/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let m       = require('mithril');
const $     = require('jquery');
const _     = require('lodash');
const s     = require('string-plus');
const Mixin = require('models/mixins/model_mixins');
require('foundation-sites');

function deleteKeyAndReturnValue(object, key, defaultValue) {
  if (_.isNil(object)) {
    return defaultValue;
  }
  const value = object[key];
  delete object[key];
  return _.isNil(value) ? defaultValue : value;
}

function compactClasses(args) {
  const initialClasses = [].slice.call(arguments, 1);
  return _([initialClasses, deleteKeyAndReturnValue(args, 'class')]).flatten().compact().join(' ');
}

function unwrapStream(maybeStream) {
  if ("function" === typeof maybeStream) { // heuristic is good enough; no need to test with `instanceof`
    return maybeStream();
  }

  return maybeStream;
}

// ensures the input is either an array or is wrapped in an array.
// also removes blank members (empty strings, null, etc) and optionally
// applies a transform on each item.
function coerceArray(maybeArray, transform) {
  const normalized = _.isArray(maybeArray) ? maybeArray : [maybeArray];

  if ("function" === typeof transform) {
    const result = [];
    _.each(normalized, (el) => {
      if (!s.isBlank(el)) {
        result.push(transform(el));
      }
    });

    return result;
  }

  return _.reject(normalized, (el) => s.isBlank(el));
}

function wrapTextInSpan(thing) {
  if ("string" === typeof thing) {
    thing = <span>{thing}</span>;
  }
  return thing;
}

function wireUpModel(attrs, property="value", listener="onchange") {
  const model = deleteKeyAndReturnValue(attrs, "model");

  if (model) {
    let attrName;
    attrs["data-model-type"] = deleteKeyAndReturnValue(attrs, "modelType", (model.constructor ? model.constructor.modelType : null));
    attrs["data-prop-name"]  = attrName = deleteKeyAndReturnValue(attrs, "attrName");
    attrs[property]          = deleteKeyAndReturnValue(attrs, property, model[attrName]());

    const chainedCallback    = deleteKeyAndReturnValue(attrs, "onModelUpdate"),
      onUpdate               = deleteKeyAndReturnValue(attrs, listener, m.withAttr(property, model[attrName]));

    attrs[listener] = ("function" === typeof chainedCallback) ? function chained(e) { onUpdate(e); chainedCallback(e); } : onUpdate;
  }

  return model;
}

function validateModel(model, attrs) {
  if (!model) { return; }

  const performValidations = deleteKeyAndReturnValue(attrs, 'validate', false),
    attrName               = attrs["attrName"] || attrs["data-prop-name"];

  let validationErrors;

  if (performValidations) {
    attrs["onblur"] = model.validate.bind(model, performValidations !== "all" ? attrName : undefined);

    if (model.errors().hasErrors(attrName)) {
      validationErrors = <span class='form-error is-visible'>{model.errors().errorsForDisplay(attrName)}</span>;
    }
  }

  return validationErrors;
}

let f = {
  row: {
    view (vnode) {
      const args     = vnode.attrs;
      const children = vnode.children;

      const collapse = deleteKeyAndReturnValue(args, 'collapse') ? 'collapse' : 'expanded';
      return (
        <div
          class={compactClasses(args, 'row', collapse)}
          {...args}>
          {children}
        </div>
      );
    }
  },

  column: {
    view (vnode) {
      const args     = vnode.attrs;
      const children = vnode.children;

      const end   = deleteKeyAndReturnValue(args, 'end') ? 'end' : null,
        size      = deleteKeyAndReturnValue(args, 'size', 6),
        largeSize = deleteKeyAndReturnValue(args, 'largeSize', size);

      return (
        <div class={compactClasses(args, 'columns', `medium-${  size}`, `large-${  largeSize}`, end)}
             {...args}>
          {children}
        </div>
      );
    }
  },

  input: {
    view (vnode) {
      const defaultAttrs = {
        autocomplete: "off",
        autocapitalize: "off",
        autocorrect: "off",
        spellcheck: false,
        type: "text"
      };

      const args     = _.assign({}, defaultAttrs, vnode.attrs); // copy attrs instead of modifying in-place

      const model        = wireUpModel(args, "value", "oninput"),
        validationErrors = validateModel(model, args),
        label            = coerceArray(deleteKeyAndReturnValue(args, "label", []), wrapTextInSpan), // label can be a string or an array
        contentAfter     = coerceArray(deleteKeyAndReturnValue(args, "contentAfter", []), wrapTextInSpan);

      args["class"] = compactClasses(args, validationErrors ? "is-invalid-input" : null);
      const labelAttrs = {};

      if (validationErrors) {
        labelAttrs["class"] = "is-invalid-label";
        contentAfter.push(validationErrors);
      }

      const element = <input {...args} />;
      return _.isEmpty(label) ? [element, contentAfter] : <label {...labelAttrs}>
          {label}
          {element}
          {contentAfter}
        </label>;
    }
  },

  textarea: {
    view (vnode) {
      const defaultAttrs = {
        autocomplete: "off",
        autocapitalize: "off",
        autocorrect: "off",
        spellcheck: "off"
      };

      const args     = _.assign({}, defaultAttrs, vnode.attrs); // copy attrs instead of modifying in-place

      const model        = wireUpModel(args, "value", "oninput"),
        validationErrors = validateModel(model, args),
        label            = coerceArray(deleteKeyAndReturnValue(args, "label", []), wrapTextInSpan), // label can be a string or an array
        contentAfter     = coerceArray(deleteKeyAndReturnValue(args, "contentAfter", []), wrapTextInSpan);

      args["class"] = compactClasses(args, validationErrors ? "is-invalid-input" : null);
      const labelAttrs = {};

      if (validationErrors) {
        labelAttrs["class"] = "is-invalid-label";
        contentAfter.push(validationErrors);
      }

      const element = <textarea {...args}></textarea>;
      return _.isEmpty(label) ? [element, contentAfter] : <label {...labelAttrs}>
          {label}
          {element}
          {contentAfter}
        </label>;
    }
  },

  checkbox: {
    view (vnode) {
      const args = _.assign({}, vnode.attrs); // copy attrs instead of modifying in-place

      wireUpModel(args, "checked");

      const label    = coerceArray(deleteKeyAndReturnValue(args, "label", []), wrapTextInSpan), // label can be a string or an array
        inputElement = <input type="checkbox" {...args} />;

      return _.isEmpty(label) ? inputElement : <label>
        {inputElement}
        {label}
      </label>;
    }
  },

  select: {
    view (vnode) {
      const args = _.assign({}, vnode.attrs); // copy attrs instead of modifying in-place

      const model        = wireUpModel(args), // alters args, should be called first
        validationErrors = validateModel(model, args),
        items            = coerceArray(unwrapStream(deleteKeyAndReturnValue(args, "items", []))),
        label            = coerceArray(deleteKeyAndReturnValue(args, "label", []), wrapTextInSpan), // label can be a string or an array
        contentAfter     = coerceArray(deleteKeyAndReturnValue(args, "contentAfter", []), wrapTextInSpan),
        selected         = unwrapStream(args.value);

      args["class"] = compactClasses(args, validationErrors ? "is-invalid-input" : null);
      const labelAttrs = {};

      if (validationErrors) {
        labelAttrs["class"] = "is-invalid-label";
        contentAfter.push(validationErrors);
      }

      const element = <select {...args}>{
        _.map(items, (item) => {
          // item may be a string or an object
          const text = item.text || item;
          const id = item.id || text;
          return <option value={id} selected={selected === id}>{text}</option>;
        })
      }</select>;

      return _.isEmpty(label) ? [element, contentAfter] : <label {...labelAttrs}>
        {label}
        {element}
        {contentAfter}
      </label>;
    }
  },

  resetAttrButton: {
    view(vnode) {
      const resetFnName = `resetToOriginal${_.upperFirst(vnode.attrs.attrName)}`;
      return <f.resetButton onclick={vnode.attrs.model[resetFnName].bind(vnode.attrs.model)} />;
    }
  },

  tabs: {
    oninit (vnode) {
      this.selectedIndex = s.defaultToStream(vnode.attrs.selectedIndex || 0);

      this.classNameForTab = function (tabIndex) {
        return this.selectedIndex() === tabIndex ? 'is-active' : '';
      };

      this.componentClass = compactClasses(vnode.attrs);

      this.prefixedClass = function (suffix) {
        if (!s.isBlank(this.componentClass)) {
          return `${this.componentClass  }-${  suffix}`;
        }
      };
    },

    view (vnode) {
      const children = vnode.children;

      const tabs = (
        <ul class={_.compact(['tabs', vnode.attrs.isVertical ? 'vertical' : undefined]).join(' ')}>
          {_.map(vnode.attrs.tabTitles, (tabTitle, tabIndex) => {

            let tabTitleElem;

            if (s.isBlank(tabTitle)) {
              tabTitleElem = (<a href='javascript:void(0)'>{m.trust('&nbsp;')}</a>);
            }
            else if (_.isString(tabTitle)) {
              tabTitleElem = (<a href='javascript:void(0)'>{tabTitle}</a>);
            } else {
              tabTitleElem = tabTitle;
            }

            return (
              <li
                class={_.compact(['tabs-title', vnode.state.classNameForTab(tabIndex), vnode.state.prefixedClass('tabs-title')]).join(' ')}
                onclick={vnode.state.selectedIndex.bind(vnode.state, tabIndex)}
                key={vnode.attrs.tabKeys[tabIndex]}>
                {tabTitleElem}
              </li>
            );
          })}
        </ul>
      );

      const tabsContent = (
        <div
          class={_.compact([vnode.attrs.isVertical ? 'vertical' : undefined, 'tabs-content', 'tabs-content-container', vnode.state.prefixedClass('tabs-content-container')]).join(' ')}>
          {_.map(_.flatten(children), (child, tabIndex) => {

            let renderedChild;

            if (tabIndex === vnode.state.selectedIndex()) {
              renderedChild = child;
            }

            return (
              <div
                class={_.compact(['tabs-panel', vnode.state.classNameForTab(tabIndex), vnode.state.prefixedClass('tabs-panel')]).join(' ')}>
                {renderedChild}
              </div>
            );
          })}
        </div>
      );

      if (vnode.attrs.isVertical) {
        return (
          <f.row
            class={_.compact(['collapse', vnode.state.componentClass, 'tab-container', vnode.state.prefixedClass('tab-container')]).join(' ')}>
            <f.column size={2}>
              {tabs}
            </f.column>
            <f.column size={10}>
              {tabsContent}
            </f.column>
          </f.row>
        );
      } else {
        return (
          <div
            class={_.compact([vnode.state.componentClass, 'tab-container', vnode.state.prefixedClass('tab-container')]).join(' ')}>
            {tabs}
            {tabsContent}
          </div>
        );
      }
    }
  },

  accordion: {
    oninit (vnode) {
      this.selectedIndex = Mixin.TogglingGetterSetter(s.defaultToStream(vnode.attrs.selectedIndex || 0));

      this.classNameForAccordionIndex = function (tabIndex) {
        return this.selectedIndex() === tabIndex ? 'is-active' : null;
      };

      this.classNameForAccordionContent = function (tabIndex) {
        return this.selectedIndex() === tabIndex ? 'show' : 'hide';
      };
    },

    view (vnode) {
      const ctrl     = vnode.state;
      const args     = vnode.attrs;
      const children = vnode.children;

      return (
        <ul class={compactClasses(args, 'accordion')} data-accordion data-multi-expand="true">
          {_.map(_.flatten(children), (child, index) => {
            let renderedChild;

            if (index === ctrl.selectedIndex()) {
              renderedChild = child;
            }
            return (
              <li class={_.compact(['accordion-item', ctrl.classNameForAccordionIndex(index)]).join(' ')}
                  key={args.accordionKeys[index]} data-accordion-item>
                <a href="javascript:void(0)"
                   class="accordion-title"
                   onclick={ctrl.selectedIndex.bind(ctrl, index)}>
                  {args.accordionTitles[index]}
                </a>

                <div class={_.compact(['accordion-content', ctrl.classNameForAccordionContent(index)]).join(' ')}>
                  {renderedChild}
                </div>
              </li>
            );
          })}
        </ul>
      );
    }
  },

  removeButton: {
    view (vnode) {
      const args     = vnode.attrs;
      const children = vnode.children;

      return (
        <button type={deleteKeyAndReturnValue(args, 'type', 'button')} class={compactClasses(args, 'remove')}
                title='Remove' {...args}>{children}</button>

      );
    }
  },

  editButton: {
    view (vnode) {
      const args     = vnode.attrs;
      const children = vnode.children;

      return (
        <button type={deleteKeyAndReturnValue(args, 'type', 'button')} class={compactClasses(args, 'edit')}
                title='Edit' {...args}>{children}</button>
      );
    }
  },

  resetButton: {
    view (vnode) {
      const args     = vnode.attrs;
      const children = vnode.children;

      return (
        <button type={deleteKeyAndReturnValue(args, 'type', 'button')} class={compactClasses(args, 'reset')}
                title='Reset' {...args}>{children}</button>
      );
    }
  },

  button: {
    view (vnode) {
      return (
        <button type="button"
                class={compactClasses(vnode.attrs, 'button')}
                {...vnode.attrs}>
          {vnode.children}
        </button>
      );
    }
  },

  link: {
    view (vnode) {
      if (vnode.attrs.target === '_blank') {
        if (s.isBlank(vnode.attrs.rel)) {
          vnode.attrs.rel = 'noopener noreferrer';
        } else {
          vnode.attrs.rel += " noopener noreferrer";
        }
      }
      return (<a href="javascript:void(0)" class={compactClasses(vnode.attrs)} {...vnode.attrs}>{vnode.children}</a>);
    }
  },

  anchor: {
    view (vnode) {
      return (<a href={vnode.attrs.href} class={compactClasses(vnode.attrs)} {...vnode.attrs}>{vnode.children}</a>);
    }
  },

  tooltip: {
    view (vnode) {
      const args     = vnode.attrs;
      const children = vnode.children;

      if (!args.tooltip && _.isEmpty(children)) {
        return <noscript/>;
      }

      const direction = deleteKeyAndReturnValue(args.tooltip, 'direction', 'bottom'),
        size      = deleteKeyAndReturnValue(args.tooltip, 'size', 'medium'),
        content   = deleteKeyAndReturnValue(args.tooltip, 'content', children),
        clazz     = deleteKeyAndReturnValue(args.tooltip, 'class', null),
        type      = deleteKeyAndReturnValue(args.tooltip, 'type', 'question-mark');

      let tooltipId = 'tooltip-';

      if (args.model && args.model.uuid) {
        tooltipId += (`${args.model.uuid()  }-${  args.attrName}`);
      } else {
        tooltipId += s.uuid();
      }

      return (
        <span class={_.compact(['tooltip-wrapper', clazz]).join(' ')}>
          <a href='javascript:void(0)'
             data-toggle={tooltipId}
             class={`tooltip-${type}`}/>
          <f.dropdown id={tooltipId}
                      class={_.compact(['f-dropdown', 'dropdown-pane', 'content', 'tooltip-content', size, direction]).join(' ')}
                      data-dropdown
                      data-hover='true'
                      data-hover-pane='true'>
            {content}
          </f.dropdown>
        </span>
      );
    }
  },

  dropdown: {
    oncreate: (vnode) => {
      new window.Foundation.Dropdown($(vnode.dom));
    },

    onupdate: (vnode) => {
      new window.Foundation.Dropdown($(vnode.dom));
    },

    onbeforeremove: (vnode) => {
      $(vnode.dom).foundation('destroy');
    },

    view (vnode) {
      const args     = vnode.attrs;
      const children = vnode.children;

      return (
        <div {...args}>
          {children}
        </div>
      );
    }
  },

  callout: {
    view (vnode) {
      const children = vnode.children;
      const type     = deleteKeyAndReturnValue(vnode.attrs, 'type');
      return (<div class={`callout ${  type}`} {...vnode.attrs}>{children}</div>);
    }
  },

  alert: {
    view (vnode) {
      return (<f.callout type="alert" {...vnode.attrs}>{vnode.children}</f.callout>);
    }
  },

  warning: {
    view (vnode) {
      return (<f.callout type="warning" {...vnode.attrs}>{vnode.children}</f.callout>);
    }
  },

  info: {
    view (vnode) {
      return (<f.callout type="info" {...vnode.attrs}>{vnode.children}</f.callout>);
    }
  },

  switch: {
    view (vnode) {
      const args = vnode.attrs;

      const model     = deleteKeyAndReturnValue(args, 'model'),
        modelType = deleteKeyAndReturnValue(args, 'modelType', (model.constructor ? model.constructor.modelType : null)),
        disabled  = deleteKeyAndReturnValue(args, 'disabled'),
        labelText = deleteKeyAndReturnValue(args, 'label'),
        attrName  = deleteKeyAndReturnValue(args, 'attrName');

      return (
        <f.column {...args}
                  class={`toggle-switch ${  args.class}`}>
          <input id="toggle"
                 class="cbx-toggle cbx-toggle-round-flat"
                 type="checkbox"
                 data-prop-name={attrName}
                 data-model-type={modelType}
                 disabled={disabled}
                 checked={model[attrName]()}
                 onchange={m.withAttr('checked', model[attrName])}/>
          <label for="toggle"/>
          <span>{labelText}</span>
        </f.column>
      );
    }
  }
};

module.exports = f;
