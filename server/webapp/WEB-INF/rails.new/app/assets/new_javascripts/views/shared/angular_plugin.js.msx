/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


define(['mithril', 'lodash', 'jquery', 'string-plus', 'angular'], function (m, _, $, s, angular) {

  var template = function (template) {
    return $('<div></div>').html(template.replace(/GOINPUTNAME\[([^\]]*)\]/g, function (match, name) {
      return "GOINPUTNAME['" + name + "']";
    })).html();
  };

  var AngularPlugin = {
    controller: function (args) {
      this.pluginTemplate = function () {
        if (args.pluginInfo()) {
          return m.trust(template(args.pluginInfo().viewTemplate()));
        }
      };

      if (args.pluginInfo()) {
        this.uuid             = s.uuid();
        this.defaultConfig    = args.pluginInfo().configurations();
        this.appName          = 'app-' + this.uuid;
        this.ngControllerName = 'controller-' + this.uuid;
      }

      this.$scope = undefined;
    },

    view: function (ctrl, args) {
      if (!args.pluginInfo()) {
        return (<div/>);
      }

      var config = function (elem, isInitialized) {
        if (!isInitialized) {
          angular.module(ctrl.appName, []).controller(ctrl.ngControllerName, ['$scope', '$http', function ($scope) {
            ctrl.$scope = $scope;

            $scope.addError = function (field) {
              $scope.GOINPUTNAME[field.key] = {
                $error: {
                  server: field.errors.join()
                }
              };
            };

            $scope.clearErrors = function () {
              $scope.GOINPUTNAME = {};
            };

            $scope.clearErrors();

            _.map(ctrl.defaultConfig, function (config) {
              $scope[config.key] = args.configuration.valueFor(config.key);

              $scope.$watch(config.key, function (newValue) {
                args.configuration.setConfiguration(config.key, newValue);
              });
            });
          }]);

          angular.bootstrap(elem, [ctrl.appName]);
        }
      };


      if (ctrl.$scope) {
        ctrl.$scope.clearErrors();

        _.map(ctrl.defaultConfig, function (config) {
          var matchingConfig = args.configuration.findConfiguration(function (eachConfig) {
            return eachConfig.key() === config.key;
          });

          if (matchingConfig.errors().hasErrors(config.key)) {
            ctrl.$scope.addError({key: config.key, errors: matchingConfig.errors().errors(config.key)});
          }

        });
        ctrl.$scope.$apply();
      }

      return (
        <div class='plugin-view'
             ng-controller={ctrl.ngControllerName}
             config={config}>
          {ctrl.pluginTemplate()}
        </div>
      );
    }
  };

  return AngularPlugin;
});