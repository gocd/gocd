/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m = require('mithril');
const _ = require('lodash');

const PipelineInstanceWidget = require('views/dashboard/pipeline_instance_widget');

const PipelineHeaderWidget = {
  view: (vnode) => {
    const pipeline = vnode.attrs.pipeline;
    let settingsButton;

    if (pipeline.canAdminister) {
      const settingsPath = vnode.attrs.isQuickEditPageEnabled ? pipeline.quickEditPath : pipeline.settingsPath;
      settingsButton     = (<a class={`pipeline_edit`} href={settingsPath}/>);
    } else {
      settingsButton = (<a class={`pipeline_edit disabled`}/>);
    }

    return (
      <div class="pipeline_header">
        <h3 class="pipeline_name"> {pipeline.name}</h3>
        <a href={pipeline.historyPath} class="pipeline_history">History</a>
        <div className="pipeline_actions">
          {settingsButton}
          <button className="pipeline_locked"/>
        </div>
        <div class="pipeline_message success">
          <p>Pipeline up42 paused successfully.</p>
        </div>
        <ul className="pipeline_operations">
          <li>
            <button className="btn play"></button>
          </li>
          <li>
            <button className="btn play_with_options"></button>
          </li>
          <li>
            <button className="btn pause"></button>
          </li>
        </ul>
        <div className="pipeline_pause-message">Paused by admin (this is paused due to something)</div>
      </div>
    );
  }
};


const PipelineWidget = {
  oninit(vnode) {
    this.args = vnode.attrs;
  },

  view: (vnode) => {
    const pipeline          = vnode.attrs.pipeline;
    const pipelineInstances = _.map(pipeline.instances, (instance) => {
      return (
        <PipelineInstanceWidget instance={instance}
                                dropdown={vnode.attrs.dropdown}
                                pipelineName={pipeline.name}/>
      );
    });

    return (
      <li class="pipeline-group_pipeline">
        <div class="pipeline">
          <PipelineHeaderWidget pipeline={vnode.attrs.pipeline}
                                isQuickEditPageEnabled={vnode.attrs.isQuickEditPageEnabled}/>
          <div className="pipeline_instances">
            {pipelineInstances}
          </div>

        </div>
      </li>
    );
  }
};

module.exports = PipelineWidget;
