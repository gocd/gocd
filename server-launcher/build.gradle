import com.thoughtworks.go.build.VerifyJarTask

/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

description = 'GoCD Server Launcher'

configurations {
  packagingInLibDir.extendsFrom packagingOnly
  packagingInDefaultFilesDir.extendsFrom packagingOnly

  packagingInMainJarTopLevel {
    transitive = false
  }

  packagingInMainJarCommonJar {
    transitive = false
  }

  packagingInMainJarBaseJar {
    transitive = false
  }

  packagingInMainJarServerJar {
    transitive = false
  }

  pluginsZip.extendsFrom packagingOnly
}

dependencies {
  compile project(':base')
  compile project(':server')

  packagingInDefaultFilesDir project(path: ':agent-launcher', configuration: 'fatJarConfig')
  packagingInDefaultFilesDir project(path: ':agent', configuration: 'fatJarConfig')
  packagingInDefaultFilesDir project(path: ':server', configuration: 'warConfig')
  packagingInDefaultFilesDir project(path: ':tfs-impl-14', configuration: 'fatJarConfig')

  packagingInLibDir project(path: ':tfs-impl-14', configuration: 'fatJarConfig')

  packagingInLibDir(project(path: ':go-plugin-activator')) {
    transitive = false
  }
  packagingInLibDir group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
  packagingInLibDir group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.47'
  packagingInLibDir group: 'commons-io', name: 'commons-io', version: '2.5'
  packagingInLibDir group: 'joda-time', name: 'joda-time', version: '2.3'
  packagingInLibDir group: 'log4j', name: 'log4j', version: project.versions.log4j
  packagingInLibDir group: 'org.slf4j', name: 'slf4j-api', version: project.versions.slf4j
  packagingInLibDir group: 'org.slf4j', name: 'slf4j-log4j12', version: project.versions.slf4j
  packagingInLibDir group: 'com.jezhumble', name: 'javasysmon', version: '0.3.6'

  pluginsZip project(path: ':tw-go-plugins', configuration: 'pluginsZipConfig')

  packagingInMainJarTopLevel project(':jetty9')
  packagingInMainJarTopLevel project(':app-server')
  packagingInMainJarCommonJar project(':common')
  packagingInMainJarBaseJar project(':base')
  packagingInMainJarServerJar project(':server')

  extractedAtTopLevel project(':jar-class-loader')
}

jar {
  classifier 'classes'
}

task mainJar(type: Jar) {
  dependsOn jar, project.configurations.packagingInMainJarBaseJar, project.configurations.packagingInMainJarCommonJar, project.configurations.packagingInMainJarTopLevel
  classifier = 'main'

  from(project.configurations.packagingInMainJarTopLevel.collect { it.isDirectory() ? it : zipTree(it) }) {
    into('/')
  }

  from(project.configurations.packagingInMainJarCommonJar.collect { it.isDirectory() ? it : zipTree(it) }) {
    include "**/SubprocessLogger*.class"
    include "**/validators/*.class"
    include "**/Environment*.class"
    include "**/X509CertificateGenerator*.class"
    include "**/X509PrincipalGenerator*.class"
    include "**/KeyStoreManager.class"
    include "**/PKCS12BagAttributeSetter.class"
    include "**/Registration.class"
    include "**/CommandLineException.class"

    exclude "**/domain/*.class"
    exclude "**/validation/*.class"
    exclude "**/remote/*.class"
    exclude "**/remote/work/*.class"
    into('/')
  }

  from(project.configurations.packagingInMainJarBaseJar.collect { it.isDirectory() ? it : zipTree(it) }) {
    include "**/StoppableFileWatchdogBecauseFileWatchDogIsUnStoppable.class"
    include "**/PropertyWatchdog.class"
    include "**/XMLWatchdog.class"
    include "**/AssertJava8.class"
    include "**/LogConfigurator.class"
    include "**/OperatingSystem.class"
    include "**/SystemEnvironment*.class"
    include "**/ConfigDirProvider.class"
    include "**/validators/*.class"
    include "**/SystemUtil.class"
    include "**/Os.class"
    include "**/ExceptionUtils.class"
    include "**/FileUtil*.class"
    include "**/StreamConsumer.class"
    include "**/InMemoryConsumer.class"
    include "**/InMemoryStreamConsumer.class"
    include "**/ConsoleOutputStreamConsumer.class"
    include "**/ArrayUtil.class"
    include "**/StringUtil.class"

    into('/')
  }

  from(project.configurations.packagingInMainJarServerJar.collect { it.isDirectory() ? it : zipTree(it) }) {
    include "**/GoServer*.class"
    include "**/DeploymentContextWriter*.class"
    include "**/BaseUrlProvider*.class"
    include "**/GoLauncher*.class"

    into('/')
  }

  from("${project(':server').projectDir}/properties/src/config/log4j.properties") { into 'config' }
}

task h2deltasZip(type: Zip) {
  baseName = 'h2deltas'
  destinationDir = project.libsDir
  from("${project(':server').projectDir}/db/migrate/h2deltas") { into '/h2deltas' }
}

task h2dbZip(type: Zip) {
  baseName = 'h2db'
  destinationDir = project.libsDir
  from("${project(':server').projectDir}/db/dbtemplate/h2db") { into '/h2db' }
}

def commandRepoCheckoutDir = file("${project.buildDir}/go-command-repo")

task cloneCommandRepository(type: Exec) {
  onlyIf { !project.hasProperty('fastBuild') }
  outputs.upToDateWhen { false }
  doFirst { execTask ->
    if (commandRepoCheckoutDir.exists()) {
      execTask.workingDir = commandRepoCheckoutDir
      execTask.commandLine "git", "pull"
    } else {
      execTask.commandLine "git", "clone", project.commandRepoUrl, commandRepoCheckoutDir
    }
  }
}

task defaultCommandSnippetsZip(type: Zip, dependsOn: [':server-launcher:cloneCommandRepository']) {
  baseName 'defaultCommandSnippets'
  destinationDir = project.libsDir
  from(commandRepoCheckoutDir) { into '/' }
  // because .git is in global excludes
  from("${commandRepoCheckoutDir}/.git") { into '/.git' }
}

clean {
  delete 'defaultFiles'
}

task fatJar(type: Jar) {
  finalizedBy 'verifyFatJar'
  dependsOn configurations.packagingInDefaultFilesDir, h2dbZip, h2deltasZip, defaultCommandSnippetsZip, configurations.pluginsZip,
    (project(':jetty9').configurations.compileOnly - project(':jetty9').configurations.compile),
    configurations.packagingInLibDir, configurations.compileOnly, mainJar, configurations.extractedAtTopLevel, jar

  manifest {
    attributes 'Main-Class': 'com.thoughtworks.gocd.Boot'
    attributes 'GoCD-Main-Class': 'com.thoughtworks.go.server.util.GoLauncher'
  }

  from(configurations.packagingInDefaultFilesDir) {
    into "defaultFiles/"
    rename "(.*)-${project.version}.(.*)", '$1.$2'
  }

  from("${project(':installers').projectDir}/go-server/release/cruise-config.xml") { into 'defaultFiles/config' }
  from("${project(':server').projectDir}/config/jetty.xml") { into 'defaultFiles/config' }
  from("${project(':server').projectDir}/config/go_update_server.pub") { into 'defaultFiles/config' }
  from("${project(':server').projectDir}/properties/src/log4j.properties") { into 'defaultFiles/config' }
  from("${project(':server').projectDir}/historical_jars") { into 'defaultFiles/historical_jars' }
  from("${project(':config-server').projectDir}/resources/cruise-config.xsd") { into 'defaultFiles/config' }
  from(h2dbZip) { into 'defaultFiles' rename "(.*)-${project.version}.zip", '$1.zip' }
  from(h2deltasZip) { into 'defaultFiles' rename "(.*)-${project.version}.zip", '$1.zip' }
  from(defaultCommandSnippetsZip) { into 'defaultFiles' rename "(.*)-${project.version}.zip", '$1.zip' }
  from(configurations.pluginsZip) { into 'defaultFiles' rename "(.*)-${project.version}.zip", '$1.zip' }

  from(project(':jetty9').configurations.compileOnly - project(':jetty9').configurations.compile) {
    into 'lib/'
  }

  from(configurations.packagingInLibDir + configurations.compileOnly) {
    into 'lib/'
    rename "tfs-impl-(.*)-${project.version}.jar", 'tfs-impl-$1.jar'
    rename "go-plugin-activator-${project.version}.jar", "go-plugin-activator.jar"
  }

  from(mainJar.archivePath) {
    into('lib/')
  }

  from(configurations.extractedAtTopLevel.collect { it.isDirectory() ? it : zipTree(it) }) {
    into("/")
  }

  from(zipTree(jar.archivePath)) {
    into('/')
  }

  from("${rootProject.rootDir}/LICENSE") {
    into "/"
  }
}

task verifyFatJar(type: VerifyJarTask) {
  jarTask = fatJar
  expectedJars = [
    "defaultFiles": [
      "agent-launcher.jar",
      "agent.jar",
      "tfs-impl-14.jar",
      "plugins.zip",
      "h2deltas.zip",
      "h2db.zip",
      project.hasProperty('fastBuild') ? null : "defaultCommandSnippets.zip"
    ].findAll { it != null },
    "lib"         : [
      "server-launcher-${project.version}-main.jar",
      "bcprov-jdk15on-1.47.jar",
      "commons-io-2.5.jar",
      "go-plugin-activator.jar",
      "javasysmon-0.3.6.jar",
      "javax.servlet-api-3.1.0.jar",
      "jetty-continuation-${versions.jetty}.jar",
      "jetty-http-${versions.jetty}.jar",
      "jetty-io-${versions.jetty}.jar",
      "jetty-jmx-${versions.jetty}.jar",
      "jetty-jndi-${versions.jetty}.jar",
      "jetty-plus-${versions.jetty}.jar",
      "jetty-security-${versions.jetty}.jar",
      "jetty-server-${versions.jetty}.jar",
      "jetty-servlet-${versions.jetty}.jar",
      "jetty-servlets-${versions.jetty}.jar",
      "jetty-util-${versions.jetty}.jar",
      "jetty-webapp-${versions.jetty}.jar",
      "jetty-xml-${versions.jetty}.jar",
      "joda-time-2.3.jar",
      "log4j-${project.versions.log4j}.jar",
      "slf4j-api-${project.versions.slf4j}.jar",
      "slf4j-log4j12-${project.versions.slf4j}.jar",
      "tfs-impl-14.jar",
      "websocket-api-${versions.jetty}.jar",
      "websocket-client-${versions.jetty}.jar",
      "websocket-common-${versions.jetty}.jar",
      "websocket-server-${versions.jetty}.jar",
      "websocket-servlet-${versions.jetty}.jar",
    ]
  ]
}

artifacts {
  fatJarConfig fatJar
}
