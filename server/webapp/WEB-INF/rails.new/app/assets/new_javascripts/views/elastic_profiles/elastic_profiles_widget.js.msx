/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'helpers/form_helper', 'views/shared/modal', 'helpers/mithril_component_mixins', 'models/elastic_profiles/elastic_profiles'
], function (m, _, f, Modal, ComponentMixins, ElasticProfiles) {

  var ElasticProfileEditModal = {
    controller: function () {
      this.update = function (profile) {
        profile.update();
      };
    },

    view: function (ctrl, args) {
      var profile = args.profile;

      if (!profile) {
        return <f.modalSpinner/>;
      }

      return (
        <div>
          <f.row>
            <f.inputWithLabel
              model={profile}
              isRequired="true"
              attrName="id"
              labelText="Id"
              size="3"
              largeSize="3"
            />
            <f.inputWithLabel
              model={profile}
              isRequired="true"
              attrName="pluginId"
              labelText="Plugin Id"
              size="3"
              largeSize="3"
              end="true"
            />
          </f.row>

          <h4>Properties</h4>

          {profile.properties().mapConfigurations(function (property) {
            return (
              <f.row>
                <f.input model={property} attrName="key" size="3"/>
                <f.input model={property} attrName="value" end="true" size="3"/>
              </f.row>
            );
          })}

          <f.row>
            <f.button onclick={ctrl.update.bind(ctrl, profile)}>Update</f.button>
          </f.row>
        </div>
      );
    }
  };

  var ElasticProfileWidget = {
    controller: function (args) {
      this.modal = new Modal({
        subView: {
          component: ElasticProfileEditModal,
          args:      {}
        },
        title:   'Edit profile ' + args.profile.id(),
      });

      this.modal.onClose(function () {
        console.log('closed', arguments);
      });

      this.edit = function (profile) {
        var modal = this.modal;
        modal.open();
        m.redraw(true);
        ElasticProfiles.Profile.get(profile.id()).then(function (profile) {
          modal.subView.args.profile = profile;
        });
      };

      this.delete = function (profile) {
        profile.delete();
      };

    },

    view: function (ctrl, args) {
      var profile = args.profile;
      return (
        <f.column size="12">
          <f.row>
            <div><span>ID: </span>{profile.id()}</div>
            <div><span>Plugin ID: </span>{profile.pluginId()}</div>
            <div>
              <f.link onclick={ctrl.edit.bind(ctrl, profile)}>Edit</f.link>
              <f.link onclick={ctrl.delete.bind(ctrl, profile)}>Delete</f.link>
            </div>
            {ctrl.modal.view()}
          </f.row>
        </f.column>
      );
    }
  };

  var ElasticProfilesWidget = {
    controller: function () {
      this.profiles = ElasticProfiles.all();
      ComponentMixins.ManagesCollection.call(this, {as: 'Profile'});
      window.profiles = this.profiles;
    },

    view: function (ctrl) {
      return (
        <div>
          <f.row class="page-header">
            <f.column size="12">
              <h1>Showing all elastic agent profiles</h1>
            </f.column>
          </f.row>

          <f.row class="profiles">
            {ctrl.profiles().mapProfiles(function (profile) {
              return (<ElasticProfileWidget profile={profile}/>);
            })}
          </f.row>
        </div>
      );
    }
  };

  return ElasticProfilesWidget;
});