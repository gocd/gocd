<div class="form_item">
  <% external_fetch_task = (scope[:task].getAppropriateTask().getTaskType() == 'fetch_pluggable_artifact') %>
  <textarea id="gocd-fetch-artifact_template" class="template">
    <%= render :partial => 'admin/tasks/fetch/gocd_artifact_config', :locals => {:scope => {:var_form => scope[:form]}} %>
  </textarea>

  <textarea id="external-fetch-artifact_template" class="template">
    <%= render :partial => 'admin/tasks/fetch/external_artifact_config', :locals => {:scope => {:var_form => scope[:form], :task => scope[:task], :artifact_plugin_to_fetch_view => scope[:artifact_plugin_to_fetch_view]}} %>
  </textarea>

  <div class="form_item_block">
    <%= scope[:form].radio_button "selectedTaskType", "gocd", :id => "task_artifact_type_gocd", :title => 'GoCD', :checked => !external_fetch_task, :class => 'fetch_artifact_type' -%>
    <%= scope[:form].label 'artifact_type_gocd', 'GoCD' %>
    <%= scope[:form].radio_button "selectedTaskType", "external", :id => "task_artifact_type_external", :title => 'External', :checked => external_fetch_task, :class => 'fetch_artifact_type' -%>
    <%= scope[:form].label 'artifact_type_external', 'External' %>
  </div>

  <div class="form_item_block">
    <%= label_tag random_dom_id('pipeline_'), 'Pipeline' -%>
    <%= scope[:form].text_field com.thoughtworks.go.config.FetchTask::PIPELINE_NAME %>
    <div class="contextual_help has_go_tip_right" title="The name of direct upstream pipeline or ancestor pipeline of one of the upstream pipelines on which the pipeline of the job depends on. The pipeline should be a dependency material or should be reachable as an ancestor(of the form fetch-from-pipeline/path/to/upstream-pipeline) of at-least one dependency material. Defaults to current pipeline if not specified."></div>
    <%= error_message_on(@task, com.thoughtworks.go.config.FetchTask::PIPELINE_NAME, :css_class => "form_error") %>
  </div>
  <div class="form_item_block">
    <%= label_tag random_dom_id('pipeline_'), required_label_text('Stage') -%>
    <%= scope[:form].text_field com.thoughtworks.go.config.FetchTask::STAGE %>
    <div class="contextual_help has_go_tip_right" title="The name of the stage to fetch artifacts from."></div>
    <%= error_message_on(@task, com.thoughtworks.go.config.FetchTask::STAGE, :css_class => "form_error") %>
  </div>
  <div class="form_item_block">
    <%= label_tag random_dom_id('pipeline_'), required_label_text('Job') -%>
    <%= scope[:form].text_field com.thoughtworks.go.config.FetchTask::JOB %>
    <div class="contextual_help has_go_tip_right" title="The name of the job to fetch artifacts from."></div>
    <%= error_message_on(@task, com.thoughtworks.go.config.FetchTask::JOB, :css_class => "form_error") %>
  </div>
  <% if scope[:task].getAppropriateTask().getTaskType() == 'fetch_pluggable_artifact' %>
    <div class="fetch-artifact-config">
      <%= render :partial => 'admin/tasks/fetch/external_artifact_config', :locals => {:scope => {
        :var_form => scope[:form], :task => scope[:task], :artifact_plugin_to_fetch_view => scope[:artifact_plugin_to_fetch_view]}} %>
    </div>
  <% else %>
    <div class="fetch-artifact-config">
      <%= render :partial => 'admin/tasks/fetch/gocd_artifact_config', :locals => {:scope => {:var_form => scope[:form], :task => scope[:task]}} %>
    </div>
  <% end %>
</div>

<script type="text/javascript">
  var artifactIdToPluginId    = <%== com.google.gson.Gson.new.toJson(scope[:artifact_id_to_plugin_id]) %>;
  var pluginToFetchView       = <%== com.google.gson.Gson.new.toJson(scope[:artifact_plugin_to_fetch_view]) %>;
  var routeFetchTask          = "<%== scope[:routeFetch] %>";
  var routeFetchPluggableTask = "<%== scope[:routeFetchPluggable] %>";
  var currentPipelineName     = '<%= @pipeline.name() %>';
  var isFormEdited            = false;

  Util.on_load(function () {
    var pipelines       = <%== @pipeline_json %>;
    var fetchTaskEditor = new TaskEditor.FetchTaskEditor();
    fetchTaskEditor.wireInAutocomplete(jQuery("#task_pipelineName"), jQuery("#task_stage"), jQuery("#task_job"), pipelines, currentPipelineName);
    jQuery('#task_form input[type="radio"]').on('change', showFetchTaskView);
    jQuery('#task_pipelineName, #task_stage, #task_job').on('input propertychange paste result', function () {
      showFetchTaskView(true);
    });

    showFetchTaskView(false);
  });

  function showFetchTaskView(isEdited) {
    isFormEdited = isEdited;
    getSelectedTaskType() === "external" ? renderExternalFetchTaskView() : renderGoCDFetchTaskView();
  }

  function renderGoCDFetchTaskView() {
    jQuery("#task_form").attr("action", routeFetchTask);
    jQuery(".fetch-artifact-config").html(getTemplate("gocd-fetch-artifact_template"));
  }

  function renderExternalFetchTaskView() {
    jQuery("#task_form").attr("action", routeFetchPluggableTask);
    jQuery(".fetch-artifact-config").html(getTemplate("external-fetch-artifact_template"));
    clearArtifactId();

    if (isAnyParameterized('task_pipelineName', 'task_stage', 'task_job')) {
      showPluginSelectionDropdown();
    } else {
      hidePluginSelectionDropdown();
      initArtifactIdAutoComplete();
      jQuery("#task_artifactId").on("input propertychange paste result", renderViewForSelectedArtifactId)
    }
  }

  function clearArtifactId() {
    if (isFormEdited) {
      jQuery("#task_artifactId").val("");
    }
  }

  function renderViewForSelectedArtifactId() {
    var artifactId = jQuery("#task_artifactId").val();
    if (!artifactId || artifactId.trim().length === 0) {
      hidePluginSelectionDropdown();
      return;
    }

    if (artifactId && artifactId.startsWith("#{")) {
      showPluginSelectionDropdown();
      return;
    }

    var pluginId = determinePluginId(artifactId);
    if (pluginId) {
      hidePluginSelectionDropdown();
      renderPluginView(pluginId);
    } else {
      showPluginSelectionDropdown();
      resetPluginDropdown();
      jQuery("#fetch_pluggable_task_view").html("");
    }
  }

  function resetPluginDropdown() {
    jQuery("#FetchArtifact_pluginId").prop("selectedIndex", 0);
  }

  function renderPluginView(pluginId) {
    jQuery("#task_pluginId").val(pluginId);
    jQuery("#fetch_pluggable_task_view").html(getFetchArtifactView(pluginId));
    initializeAngular();
  }

  function getFetchArtifactView(pluginId) {
    for (var i in pluginToFetchView) {
      if (pluginId === pluginToFetchView[i].id) {
        return pluginToFetchView[i].view;
      }
    }
    return "";
  }

  function showPluginSelectionDropdown() {
    jQuery(".artifact_plugin_selection").show();
    jQuery("#FetchArtifact_pluginId").change(function () {
      renderPluginView(jQuery(this).val());
    });
  }

  function hidePluginSelectionDropdown() {
    jQuery(".artifact_plugin_selection").hide();
  }

  function initArtifactIdAutoComplete() {
    jQuery("#task_artifactId").autocomplete(getAllArtifactIdsInJob(pipeline(), stage(), job()), {
      multiple:      false,
      minChars:      0,
      matchContains: true,
      selectFirst:   false,
      width:         248
    });
  }

  function determinePluginId(artifactId) {
    var artifactInJob = getAllArtifactsFor(pipeline(), stage(), job());
    return artifactInJob ? artifactInJob[artifactId] : null;
  }

  function getAllArtifactIdsInJob(pipelineName, stageName, jobName) {
    var artifactInJob       = getAllArtifactsFor(pipelineName, stageName, jobName);
    var allArtifactIdsInJob = [];
    for (var artifactId in artifactInJob) {
      allArtifactIdsInJob.push(artifactId);
    }
    return allArtifactIdsInJob;
  }

  function getAllArtifactsFor(pipelineName, stageName, jobName) {
    var artifactInPipeline = artifactIdToPluginId[pipelineName];
    if (!artifactInPipeline) {
      return null;
    }
    var artifactInStage = artifactInPipeline[stageName];
    if (!artifactInStage) {
      return null;
    }

    return artifactInStage[jobName];
  }

  function isAnyParameterized() {
    if (arguments.length === 0) {
      return false;
    }
    for (var i in arguments) {
      var value = jQuery("#" + arguments[i]).val();
      if (value != null && value.startsWith("#{")) {
        return true;
      }
    }
    return false;
  }

  function getSelectedTaskType() {
    return jQuery('input[name="task[selectedTaskType]"]:checked', '#task_form').val();
  }

  function getTemplate(template_id) {
    var template = jQuery("#" + template_id).val();
    return template ? template : "";
  }

  function pipeline() {
    var selectedPipelineNameWithAncestor = jQuery("#task_pipelineName").val();
    if (selectedPipelineNameWithAncestor) {
      selectedPipelineNameWithAncestor = selectedPipelineNameWithAncestor.split("/")[0];
    }

    return selectedPipelineNameWithAncestor || currentPipelineName;
  }

  function stage() {
    return jQuery("#task_stage").val();
  }

  function job() {
    return jQuery("#task_job").val();
  }

  function initializeAngular() {
    new TaskPluginView().initialize("fetch_pluggable_task_view", "fetch_pluggable_artifact_data", "task");
    new TaskPluginView().bootstrapAngular();
  }
</script>
