/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define(['mithril', 'lodash', 'jquery', 'string-plus', 'helpers/form_helper',
    'helpers/mithril_component_mixins', 'js-routes', 'models/pipeline_configs/argument', 'helpers/pipeline_configs/tooltips',
    'jquery.textcomplete'
  ],
  function (m, _, $, s, f, ComponentMixins, Routes, Argument, tt) {
    var LookupCommandWidget = {
      Command: {
        textComplete: function (attrName, selectSnippet, searchSnippets) {
          return function (elem, isInitialized) {
            if (!isInitialized) {
              var $inputElem = $(elem).find("input[name='" + attrName + "']");

              $inputElem.textcomplete([
                {
                  match:   /([^\s].*)$/,
                  index:   1,
                  search:  searchSnippets,
                  replace: function (word) {
                    return word;
                  }
                }
              ]);
              $inputElem.on('textComplete:select', selectSnippet);
            }
          };
        },

        lookup: function (term) {
          var xhrConfig = function(xhr) {
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.setRequestHeader("Accept", "application/vnd.go.cd.v1+json");
          };

          var unwrap = function (response) {
            return response._embedded.command_snippets;
          };

          return m.request({
            method:        'GET',
            url:           Routes.apiv1AdminInternalCommandSnippetsPath({prefix: term}),
            config:        xhrConfig,
            unwrapSuccess: unwrap,
            type:          LookupCommandWidget.Command.Snippet
          });
        },

        Snippet: function (data) {
          var self          = this;
          self.name         = m.prop(data.name);
          self.description  = m.prop(data.description);
          self.author       = m.prop(data.author);
          self.authorInfo   = m.prop(data.author_info);
          self.moreInfo     = m.prop(data.more_info);
          self.command      = m.prop(data.command);
          self.arguments    = m.prop(data.arguments);
          self.relativePath = m.prop(data.relative_path);
        },

        Snippets: function (snippets) {
          var self = this;
          self.list = snippets;

          self.findByName = function (name) {
            return _.find(self.list, function (snippet) {
              return name === snippet.name();
            });
          };

          self.allNames = function () {
            return _.map(self.list, function (snippet) {
              return snippet.name();
            });
          };
        }
      },

      controller: function (args) {
        var self      = this;
        self.task     = args.model;
        self.snippet  = args.snippet || new LookupCommandWidget.Command.Snippet({});
        self.snippets = args.snippets || new LookupCommandWidget.Command.Snippets([]);

        self.selectSnippet = function (e, command) {
          self.snippet = self.snippets.findByName(command);

          self.task.args().data(self.snippet.arguments());
          self.task.command(self.snippet.command());

          m.redraw();
        };

        self.searchSnippets = function (term, textComplete) {
          LookupCommandWidget.Command.lookup(term).then(
            function (snippets) {
              self.snippets = new LookupCommandWidget.Command.Snippets(snippets);
              textComplete(self.snippets.allNames());
            },
            function () {
              textComplete([]);
            });
        };
      },

      view: function (ctrl) {
        var snippet = ctrl.snippet;

        var snippetDetails = function () {
          if (snippet.name()) {
            return (
              <div class="snippet">
                <header>
                  <h5 class="snippet-title">{snippet.name()}</h5>
                  <div class="author">
                    <label>Author: </label>
                    <a target="_blank" href={snippet.authorInfo()}>{snippet.author()}</a>
                  </div>
                </header>
                <p>
                  {snippet.description()}
                  <a target="_blank" href={snippet.moreInfo()}>more info</a>
                </p>
              </div>
            );
          }
        };

        var lookUpTextBox = function () {
          if (ctrl.task.args().isList()) {
            return (<input type="text"
                           name="lookup"
                           autocomplete="false"
                           autocapitalize="off"
                           autocorrect="off"
                           spellcheck="off"/>);
          }
          return (<input type="text" disabled="disabled"/>);
        };

        var lookupDisabledMessage = function() {
          if(!ctrl.task.args().isList()){
            return (
              <label>The lookup feature is only available for the <a class=""
                   href="http://www.go.cd/documentation/user/current/advanced_usage/command_repository.html#args-style-commands"
                   target="_blank">
                  new style</a> of custom commands.</label>
            );
          }
        };

        return (
          <div class="lookup">
            <f.row>
              <f.column
                config={LookupCommandWidget.Command.textComplete('lookup', ctrl.selectSnippet, ctrl.searchSnippets)}
                size={4}>
                <label>Look up
                  <f.tooltip tooltip={{
                    content: tt.task.lookup,
                    direction: 'bottom',
                    size: 'small'
                  }}/>
                </label>
                {lookUpTextBox()}
                {lookupDisabledMessage()}
              </f.column>
              <f.column size={8}>
                {snippetDetails()}
              </f.column>
            </f.row>
          </div>
        );
      }
    };

    return LookupCommandWidget;
  });
