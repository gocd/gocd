/*
 * Copyright 2019 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import m from "mithril";
import Stream from "mithril/stream";
import _ from "lodash";
import {f} from "helpers/form_helper";

function EmailSettingsFormEditableState(model, smtpEnabled) {
  const readonly    = this.readonly = Stream(true);
  this.rejectToggle = readonly.map((value) => !smtpEnabled || value);

  this.enterEditMode = function enterEditMode(e) {
    if (e) {
      e.preventDefault();
    }

    readonly(false);
    model.reset();
  };

  this.exitEditMode = function exitEditMode(e) {
    if (e) {
      e.preventDefault();
    }

    readonly(true);
    model.reset();
  };
}

export const EmailSettingsWidget = {
  oninit(vnode) {
    const model = vnode.attrs.model;
    this.es     = new EmailSettingsFormEditableState(model, vnode.attrs.smtpEnabled);
    model.load();
  },

  view(vnode) {
    const model    = vnode.attrs.model,
          readonly = this.es.readonly();

    return <form {...model.config({class: "email-settings"}, this.es.exitEditMode)}>
      <legend>Email Settings</legend>
      <fieldset>
        <LockableInput name="email" label="Email" type="email" model={model} attrName="email" readonly={readonly}
                       placeholder="Email not set"/>
        <f.checkbox name="email_me" label="Enable email notification" model={model} attrName="enableNotifications"
                    disabled={this.es.rejectToggle()}/>
        <LockableInput name="checkin_aliases" label="My check-in aliases" model={model} attrName="checkinAliases"
                       readonly={readonly} placeholder="No matchers defined"/>
      </fieldset>
      <fieldset>
        {readonly ? <input type="button" value="Edit" onclick={this.es.enterEditMode}/> : [
          <input type="submit" value="Save" class="primary"/>,
          <input type="reset" value="Cancel" onclick={this.es.exitEditMode}/>
        ]}
      </fieldset>
    </form>;
  }
};

const LockableInput = {
  view(vnode) {
    const args     = _.assign({}, vnode.attrs),
          value    = args.model[args.attrName],
          readonly = args.readonly;

    args.autocomplete = "on"; // it's nice to remember past entries for things like "email"

    return readonly ? <label>
      <span>{args.label}</span>
      <span class="value">{value() || args.placeholder}</span>
    </label> : <f.input {...args} />;
  }
};
