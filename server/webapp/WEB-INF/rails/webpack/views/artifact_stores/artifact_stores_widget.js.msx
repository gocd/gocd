/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const $                   = require('jquery');
const _                   = require('lodash');
const f                   = require('helpers/form_helper');
const m                   = require('mithril');
const Stream              = require('mithril/stream');
const Spinner             = require('views/shared/spinner');
const PageLoadError       = require('views/shared/page_load_error');
const HeaderPanel         = require('views/shared/header_panel');
const ArtifactStores      = require('models/artifact_stores/artifact_stores');
const ArtifactStoresState = require('views/artifact_stores/artifact_stores_state');
const ArtifactStoreWidget = require('views/artifact_stores/artifact_store_widget');
const ArtifactStoreModal  = require('views/artifact_stores/artifact_store_modal');
const PluginInfos         = require('models/shared/plugin_infos');
const PluginGroupHeader   = require('views/shared/plugin_config/plugin_group_header');
const Modal               = require('views/shared/new_modal');

class ArtifactStoresWidget {

  constructor() {
    this.state = new ArtifactStoresState();
  }

  oninit() {
    this.state = new ArtifactStoresState();

    const onSuccess = (artifactStoresResponse, pluginInfosResponse) => {
      this.state.updateWithData(artifactStoresResponse, pluginInfosResponse);
      m.redraw();
    };

    const onFailure = () => {
      this.state.updateWithApiError();
      m.redraw();
    };

    $.when(ArtifactStores.all(), PluginInfos.all(null, {type: 'artifact'})).then(onSuccess, onFailure);
  }

  view() {
    if (this.state.error) {
      return (
        <PageLoadError message="There was a problem fetching the artifact stores"/>
      );
    } else if (this.state.loading) {
      return (
        <Spinner/>
      );
    } else {
      const addButton        = (
        <f.button onclick={addClicked.bind(this)} class="add-artifact-store" disabled={this.state.noPlugins()}>
          Add
        </f.button>
      );
      const noPluginsMessage = this.state.noPlugins() ?
        <f.infoRow message="No artifact plugins installed."/> : undefined;
      return (
        <div>
          <HeaderPanel title="Artifact Stores" button={addButton}/>
          <div class="artifact-stores">
            {noPluginsMessage}
            <f.dismissableCallout message={this.state.message}/>
          </div>
          {
            _.map(this.state.artifactStores.groupByArtifactStoreProperty('pluginId'), (stores, pluginId) => {
              const pluginInfo = this.state.findPluginInfo(pluginId);
              return (
                <div className="row expanded">
                  <div class="panel">
                    <PluginGroupHeader pluginInfo={pluginInfo} pluginId={pluginId}/>
                    <div class="panel_body">
                    {_.map(stores, (store) => {
                      return (

                        <ArtifactStoreWidget
                          artifactStore={store}
                          pluginInfo={pluginInfo}
                          onEdit={editClicked.bind(this, store)}
                          onDelete={deleteClicked.bind(this, store)}
                          onClone={cloneClicked.bind(this, store)}/>

                      );
                    })}
                    </div>
                  </div>
                </div>);
            })
          }
        </div>
      );
    }
  }
}

function reloadArtifactStores(widget) {
  ArtifactStores.all().then((artifactStores) => {
    widget.state.artifactStores = artifactStores;
  }, (message) => {
    widget.state.setAlertMessage(message);
  }).always(m.redraw);
}

function addClicked() {
  const newArtifactStore = Stream(new ArtifactStores.ArtifactStore({}));
  const modal            = new ArtifactStoreModal({
    title:         'Add a new artifact store',
    pluginInfos:   this.state.pluginInfos,
    artifactStore: newArtifactStore,
    errorMessage:  this.state.message,
    onclick:       () => {
      newArtifactStore().create()
        .then(
          actionSucceeded.bind(this, modal, `The artifact store '${newArtifactStore().id()}' was created successfully.`),
          actionFailed(this, modal, newArtifactStore))
        .always(m.redraw);
    }
  });
  modal.render();
}

function actionFailed(widget, modal, artifactStore) {
  return function (errorMessageOrStoreWithErrors) {
    if (_.isString(errorMessageOrStoreWithErrors)) {
      modal.destroy();
      widget.state.setAlertMessage(errorMessageOrStoreWithErrors);
    } else {
      widget.state.resetMessage();
      artifactStore(errorMessageOrStoreWithErrors);
    }
  };
}

function actionSucceeded(modal, message) {
  modal.destroy();
  reloadArtifactStores(this);
  this.state.setSuccessMessage(message);
}

function editClicked(store) {
  const artifactStore      = Stream();
  const saveButtonDisabled = Stream(true);
  const modal              = new ArtifactStoreModal({
    title:          'Edit artifact store',
    pluginInfos:    this.state.pluginInfos,
    artifactStore,
    errorMessage:   this.state.message,
    onclick:        () => {
      artifactStore().update()
        .then(
          actionSucceeded.bind(this, modal, `The artifact store '${artifactStore().id()}' was updated successfully.`),
          actionFailed(this, modal, artifactStore))
        .always(m.redraw);
    },
    buttonDisabled: saveButtonDisabled,
  });

  modal.render();

  ArtifactStores.ArtifactStore.get(store.id()).then((storeWithEtag) => {
    artifactStore(storeWithEtag);
    this.state.resetMessage();
    saveButtonDisabled(false);
  }, actionFailed(this, modal, artifactStore))
    .always(m.redraw);
}

function cloneClicked(artifactStore) {
  const newArtifactStore   = Stream();
  const saveButtonDisabled = Stream(true);
  const onclick            = () => {
    newArtifactStore().create().then(
      actionSucceeded.bind(this, modal, `The artifact store '${newArtifactStore().id()}' was cloned successfully.`),
      actionFailed(this, modal, newArtifactStore)
    ).always(m.redraw);
  };
  const modal              = new ArtifactStoreModal({
    title:          `Clone artifact store '${artifactStore.id()}'`,
    pluginInfos:    this.state.pluginInfos,
    artifactStore:  newArtifactStore,
    errorMessage:   this.state.message,
    onclick,
    buttonDisabled: saveButtonDisabled
  });

  modal.render();

  const onFulfilled = function (storeFromAjax) {
    newArtifactStore(storeFromAjax);
    newArtifactStore().id('');
    newArtifactStore().etag(null);
    newArtifactStore().errors().add('id', "Provide id to your clone.");
    saveButtonDisabled(false);
  };

  ArtifactStores.ArtifactStore.get(artifactStore.id()).then(onFulfilled, actionFailed(this, modal, newArtifactStore))
    .always(m.redraw);
}

function deleteClicked(artifactStore) {
  const deleteInProgress = Stream(false);
  const modal            = new Modal({
    title:   'Are you sure?',
    body:    () => (
      <div>Are you sure you want to delete the artifact store '<strong>{artifactStore.id()}</strong>'?</div>),
    onclose: () => modal.destroy(),
    buttons: () => [
      {
        text:    'Delete',
        class:   deleteInProgress() ? 'delete-artifact-store in-progress' : 'delete-artifact-store',
        onclick: () => {
          deleteInProgress(true);
          artifactStore.delete().then(
            actionSucceeded.bind(this, modal, `The artifact store '${artifactStore.id()}' was deleted successfully.`),
            actionFailed(this, modal, artifactStore)
          ).always(m.redraw);
        }
      }
    ]
  });
  modal.render();
}

module.exports = ArtifactStoresWidget;
