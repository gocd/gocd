#!/bin/bash
#*************************GO-LICENSE-START********************************
# Copyright 2014 ThoughtWorks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#*************************GO-LICENSE-END**********************************

# chkconfig: 2345 90 90
# description: GoCD Server
### BEGIN INIT INFO
# Provides: go-server
# Required-Start: $network $remote_fs
# Required-Stop: $network $remote_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Description: Start the GoCD Server
### END INIT INFO

PID_FILE="/var/run/go-server/go-server.pid"
CUR_USER=$(whoami)

# LSB implimentation is not standard across distros, so we have to roll our own...
kill_proc() {
    /usr/bin/pkill -u go -f /usr/share/go-server/go.jar
}

start_daemon() {
    eval "$*"
}

log_success_msg() {
    echo $1
}

log_failure_msg() {
    echo $1
}

. /etc/default/go-server

check_proc() {
    /usr/bin/pgrep -u go -f /usr/share/go-server/go.jar >/dev/null
}

start_go_server() {
    if [ "${CUR_USER}" != "root" ] && [ "${CUR_USER}" != "go" ]; then
        log_failure_msg "GoCD Server can only be started as 'root' or 'go' user."
        exit 4
    fi

    check_proc
    if [ $? -eq 0 ]; then
        log_success_msg "GoCD Server already running on http://$HOSTNAME:$GO_SERVER_PORT/go and https://$HOSTNAME:$GO_SERVER_SSL_PORT/go"
        exit 0
    fi

    if [ "${CUR_USER}" == "root" ]; then
        start_daemon /bin/su - go -c /usr/share/go-server/server.sh
    else
        start_daemon /usr/share/go-server/server.sh
    fi

    # Sleep for a while to see if GoCD complains about anything
    sleep 30
    check_proc

    if [ $? -eq 0 ]; then
        log_success_msg "Started GoCD Server on http://$HOSTNAME:$GO_SERVER_PORT/go and https://$HOSTNAME:$GO_SERVER_SSL_PORT/go"
    else
        log_failure_msg "Error starting Go Server."
        exit -1
    fi
}

stop_go_server() {
    if [ "${CUR_USER}" != "root" ] && [ "${CUR_USER}" != "go" ]; then
        log_failure_msg "You do not have permission to stop the GoCD Server"
        exit 4
    fi

    check_proc

    if [ $? -eq 0 ]; then
        kill_proc

        # Make sure it's dead before we return
        until [ $? -ne 0 ]; do
            sleep 1
            check_proc
        done

        check_proc
        if [ $? -eq 0 ]; then
            log_failure_msg "Error stopping GoCD Server."
            exit -1
        else
            log_success_msg "Stopped GoCD Server."
        fi
    else
        log_failure_msg "GoCD is not running"
    fi
}

go_status() {
    check_proc
    if [ $? -eq 0 ]; then
	    log_success_msg "GoCD Server is running."
    else
	    log_failure_msg "GoCD Server is stopped."
      exit 3
    fi
}

case "$1" in
    start)
        start_go_server
        ;;
    stop)
        stop_go_server
        ;;
    restart)
        stop_go_server
        start_go_server
        ;;
    status)
        go_status
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
esac

exit 0

