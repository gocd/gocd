/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const _                    = require('lodash');
const m                    = require('mithril');
const f                    = require('helpers/form_helper');
const BuildDetailsWidget   = require('views/agents/build_details_widget');
const AgentAnalyticsWidget = require('views/agents/agent_analytics_widget');


const joinOrNoneSpecified = function (things) {
  if (things.length === 0) {
    return (<em>none specified</em>);
  } else {
    return things.join(', ');
  }
};

const agentJobHistoryPath = function (uuid) {
  return `/go/agents/${uuid}/job_run_history`;
};

const agentStatusReportPath = function (elasticPluginId, elasticAgentId) {
  return `/go/admin/status_reports/${elasticPluginId}/${elasticAgentId}`;
};

const createBuildDetailsDropDown = function (agent, args) {
  return (
    <BuildDetailsWidget agent={agent}
                        dropdown={args.dropdown}/>
  );
};

const supportsAgentStatusReport = function (pluginInfos, pluginId) {
  if (!pluginInfos || !pluginInfos()) {
    return false;
  }

  const pluginInfo = pluginInfos().findById(pluginId);
  if (pluginInfo) {
    return pluginInfo.extensions()['elastic-agent'].capabilities().supportsAgentStatusReport();
  }

  return false;
};

const getHostnameLink = function (isUserAdmin, agent, pluginInfos) {
  if (!isUserAdmin) {
    return (<span>{agent.hostname()}</span>);
  }
  if (!agent.isElasticAgent()) {
    return (<a href={agentJobHistoryPath(agent.uuid())}>{agent.hostname()}</a>);
  }

  if (supportsAgentStatusReport(pluginInfos, agent.elasticPluginId())) {
    return (<a href={agentStatusReportPath(agent.elasticPluginId(), agent.elasticAgentId())}>{agent.hostname()}</a>);
  } else {
    return (<a href={agentJobHistoryPath(agent.uuid())}>{agent.hostname()}</a>);
  }
};

const AgentRowWidget = {
  oninit(vnode) {
    const args = vnode.attrs;

    this.buildDetailsClicked = function (name) {
      args.dropdown.create(name);
      args.dropdown.toggleDropDownState(name);
    };

    this.dropdownClass = function (name) {
      return args.dropdown.isDropDownOpen(name) ? "is-open" : '';
    };

    this.getPluginSupportingAgentAnalytics = function (pluginInfos) {
      const agentAnalyticsPlugins = {};

      if (!pluginInfos || !pluginInfos()) {
        return agentAnalyticsPlugins;
      }

      pluginInfos().eachPluginInfo((p) => {
        if (p.extensions().analytics) {
          const agentAnalytics = p.extensions().analytics.capabilities().supportedAgentAnalytics();
          if (agentAnalytics.length > 0) {
            agentAnalyticsPlugins[p.id] = agentAnalytics;
          }
        }
      });

      return agentAnalyticsPlugins;
    };
  },

  view(vnode) {
    const ctrl = vnode.state;
    const args = vnode.attrs;

    const agent           = args.agent;
    const resources       = joinOrNoneSpecified(agent.resources());
    const environmentNames    = joinOrNoneSpecified(agent.environmentNames());
    let agentStatus       = agent.status();
    const isBuildingAgent = !agent.buildDetails().isEmpty();
    const isElasticAgent  = agent.isElasticAgent();
    const pluginInfos     = args.pluginInfos;
    let selectAgentCheckbox;
    let elasticAgentIcon;
    const hostnameLink    = getHostnameLink(args.isUserAdmin, agent, pluginInfos);

    if (isBuildingAgent) {
      agentStatus = <f.link onclick={ctrl.buildDetailsClicked.bind(ctrl, agent.uuid())}
                            class="has-build-details-drop-down">{agent.status()}</f.link>;
    }

    if (isElasticAgent && pluginInfos()) {
      const pluginInfo = pluginInfos().findById(agent.elasticPluginId());
      if (pluginInfo) {
        const elasticAgentIconURL = pluginInfo.imageUrl;
        elasticAgentIcon          = (
          <img class="agent-icon" src={elasticAgentIconURL}/>
        );
      }
    }

    if (args.isUserAdmin) {
      selectAgentCheckbox = (
        <input type="checkbox"
               class="select-agent"
               checked={args.checkBoxModel()}
               onclick={m.withAttr('checked', args.checkBoxModel)}/>
      );
    }

    let analyticsIcon;
    const agentAnalytics = vnode.state.getPluginSupportingAgentAnalytics(pluginInfos);
    if (vnode.attrs.shouldShowAnalyticsIcon && !_.isEmpty(agentAnalytics)) {
      analyticsIcon = (<td key="analyticsIcon">
        <span class="show-for-large">
          <AgentAnalyticsWidget agent={agent} supportedAnalytics={agentAnalytics}/>
        </span>
      </td>);
    }

    return (
      <tr key={agent.uuid()} class={agent.status().toLowerCase()}>
        <td key="checkbox">
          {selectAgentCheckbox}
        </td>
        <td key="agentIcon">
          <span class="show-for-large">{elasticAgentIcon}</span>
        </td>
        <td key="hostname">
          <label class="hide-for-large">Agent Name</label>
          <span class="hide-for-large">{elasticAgentIcon}</span>
          <span class="content">{hostnameLink}</span>
        </td>
        <td key="sandbox">
          <label class="hide-for-large">Sandbox</label>
          <span class="content">{agent.sandbox()}</span>
        </td>
        <td key="operatingSystem">
          <label class="hide-for-large">OS</label>
          <span class="content">{agent.operatingSystem()}</span>
        </td>
        <td key="ipAddress">
          <label class="hide-for-large">IP Address</label>
          <span class="content">{agent.ipAddress()}</span>
        </td>
        <td key="status" class={ctrl.dropdownClass(agent.uuid())}>
          <label class="hide-for-large">Status</label>
          <span class="content">
            {agentStatus}
            {isBuildingAgent ? createBuildDetailsDropDown(agent, args) : ''}
          </span>
        </td>
        <td key="readableFreeSpace">
          <label class="hide-for-large">Free Space</label>
          <span class="content">{agent.readableFreeSpace()}</span>
        </td>
        <td key="resources">
          <label class="hide-for-large">Resources</label>
          <span class="content">{resources}</span>
        </td>
        <td key="environments">
          <label class="hide-for-large">Environments</label>
          <span class="content">{environmentNames}</span>
        </td>
        {analyticsIcon}
      </tr>
    );
  }
};

module.exports = AgentRowWidget;
