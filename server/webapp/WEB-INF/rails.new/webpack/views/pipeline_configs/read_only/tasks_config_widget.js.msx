/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m      = require('mithril');
const s      = require('string-plus');
const Stream = require('mithril/stream');
const _      = require('lodash');
const f      = require('helpers/form_helper');

const Tasks       = require('models/pipeline_configs/tasks');
const PluginInfos = require('models/pipeline_configs/plugin_infos');

const ArtifactsWidget = {
  oninit(vnode){
    const self = vnode.state;

    self.getTaskDisplayName = function (task) {
      return Tasks.isBuiltInTaskType(task.type()) ? task.type() : PluginInfos.findById(task.pluginId()).displayName();
    };

    self.getProperties = function (task) {
      const content = _.map(task.summary(), (v, k) => {
        return <f.column>
          {`${k  }: ${  v}`}
        </f.column>;
      });

      return (<f.row>
        {content}
      </f.row>);
    };

    self.oncancelTaskClicked = function (task) {
      const isOpen = self.onCanceldropdowns[task.uuid()]();
      if (s.isBlank(isOpen)) {
        self.onCanceldropdowns[task.uuid()]('is-open');
      } else {
        self.onCanceldropdowns[task.uuid()]('');
      }
    };

    self.onCanceldropdowns = {};

    self.init = function () {
      vnode.attrs.tasks().mapTasks((task) => {
        if (!_.isNil(task.onCancelTask)) {
          self.onCanceldropdowns[task.onCancelTask.uuid()] = Stream('');
        }
      });
    };

    self.onCancel = function (task) {
      if (_.isNil(task.onCancelTask)) {
        return '-';
      } else {
        const onCancelTask = task.onCancelTask;

        return (
          <div>
            <f.link onclick={self.oncancelTaskClicked.bind(self, onCancelTask)}
                    class="has-oncancel-task-drop-down">{onCancelTask.type}</f.link>
            <f.row class={`oncancel-task-description ${self.onCanceldropdowns[onCancelTask.uuid()]()}`}>
              <div>{self.getProperties(onCancelTask)}</div>
            </f.row>
          </div>
        );
      }
    };

    self.init();
  },

  view (vnode) {
    const ctrl = vnode.state;
    const rows = vnode.attrs.tasks().mapTasks((task) => ({
      "Task Type":  ctrl.getTaskDisplayName(task),
      "Run If":     task.runIf().data().join(' '),
      "Properties": ctrl.getProperties(task),
      "On Cancel":  ctrl.onCancel(task)
    }));

    return (
      <div>
        <f.row>
          <f.readOnlyHeading value="Tasks:"/>
        </f.row>
        {(<f.table rows={rows}/>)}
      </div>
    );
  }
};

module.exports = ArtifactsWidget;
