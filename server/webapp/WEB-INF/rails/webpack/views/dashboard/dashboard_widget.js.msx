/*
 * Copyright 2019 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const m                       = require('mithril');
const f                       = require('helpers/form_helper');
const _                       = require('lodash');
const ComponentMixins         = require('helpers/mithril_component_mixins');
const DashboardGroupsWidget   = require('views/dashboard/dashboard_groups_widget');
const PersonalizedViewsWidget = require('views/dashboard/personalized_views_widget');
const Dropdown                = require('views/shared/dropdown');

import {RewardBanner} from "views/components/reward_banner";
import {SearchBox} from "views/components/search_box";

const GroupingSwitch = {
  view(vnode) {
    const vm = vnode.attrs.vm;

    return <Dropdown model={vm}
                     label="Group pipelines by:"
                     attrName="scheme"
                     class="grouping_select"
                     items={vm.groupByItems}/>;
  }
};

const DashboardWidget = {
  oninit(vnode) {
    ComponentMixins.HasViewModel.call(vnode.state);
  },

  view(vnode) {
    const args          = vnode.attrs;
    const vm            = args.vm;
    const dashboard     = vm.dashboard;
    const personalizeVM = args.personalizeVM;

    const sharedGroupArgs = _.assign(_.pick(args, [
      "doCancelPolling",
      "doRefreshImmediately",
      "pluginsSupportingAnalytics", "shouldShowAnalyticsIcon"
    ]), _.pick(vm, ["operationMessages", "dropdown", "buildCause"]));

    if (args.showSpinner()) {
      return (<span class="page-spinner"/>);
    }

    let messageView;
    if (!_.isEmpty(dashboard.message())) {
      const content = (<h3 class="dashboard-message text-center">{dashboard.message().content}</h3>);
      messageView   = (dashboard.message().type === 'info')
        ? (<f.info>{content} </f.info>)
        : (<f.alert>{content} </f.alert>);
    }

    return (
      <div class="pipeline_wrapper">
        <PersonalizedViewsWidget vm={personalizeVM}/>

        <div class="dashboard-container" key="dashboard-content">
          <RewardBanner
            rewardText="Congratulations! You just created your first pipeline in GoCD!"
            key="addPipeline"
            query={m.parseQueryString(window.location.search).new_pipeline_name}
          />

          <section class="dashboard-modifiers">
            <GroupingSwitch vm={vm}/>
            <SearchBox width="350"
                       class="pipeline-search_dashboard"
                       model={vm} attrName="searchText"
                       placeholder="Search pipelines"/>
          </section>

          {messageView}
          <DashboardGroupsWidget scheme={vm.scheme()}
                                 useNewAddPipelineFlow={args.useNewAddPipelineFlow}
                                 addPipelineButtonStyling={args.addPipelineButtonStyling}
                                 invalidateEtag={vm.invalidateEtag}
                                 resolver={dashboard} {...sharedGroupArgs}
                                 groups={vm.filteredGroups(personalizeVM.currentFilter())}/>
        </div>
      </div>
    );
  }
};

module.exports = DashboardWidget;
