/*
 * Copyright 2019 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import m from "mithril";
import Stream from "mithril/stream";
import _ from "lodash";
import {f} from "helpers/form_helper";
import {PipelineWidget} from "views/dashboard/pipeline_widget";
import {BehaviorPrompt} from "views/components/behavior_prompt/behavior_prompt";
import * as Buttons from "views/components/buttons/index";
import {CollapsiblePanel} from "views/components/collapsible_panel";
import styles from "./panel.scss";

const GroupHeading = {
  goToAddPipeline(url) {
    window.location.href = url;
  },

  view(vnode) {
    const vm    = vnode.attrs.vm;
    const paths = vm.routes();

    return <div class="dashboard-group_title">
      <f.link disabled={!vm.canAdminister} href={paths.show} class="dashboard-group_name"
              aria-label={vm.label()}>{vm.name || "Pipelines not in any Environment"}</f.link>
      {vm.name && <f.link class="edit_config dashboard-group_edit-config" disabled={!vm.canAdminister} href={paths.edit}
                          tooltipText={vm.tooltipForEdit()} title={vm.titleForEdit()} aria-label={vm.ariaLabelForEdit()}/>}
      {vnode.attrs.showPrompt ? [<BehaviorPrompt
        promptText="Create your first pipeline"
        key="addPipeline"
        query={m.parseQueryString(window.location.search).new_pipeline_name}
        position={{
          right: "197px",
          top: "3px"
        }}
      />]: null}
    </div>;
  }
};

class Dropdown {
  show = Stream(false);

  view(vnode) {
    const vm = vnode.attrs.vm;
    const paths = vm.routes();

    return <Buttons.SimpleDropdown
        show={this.show}
        classes={["new-pipeline-button"]}
        aria-label={vm.ariaLabelForNewPipeline()}
        title={vm.titleForNewPipeline()}
        disabled={!vm.canAdminister}
        text="New Pipeline">
        <ul class="new-pipeline-items">
          <li class="new-pipeline-item"><a href={paths.new}>Use Pipeline Wizard</a></li>
          <li class="new-pipeline-item"><a href={paths.asCode}>Use Pipelines as Code</a></li>
        </ul>
      </Buttons.SimpleDropdown>;
  }
}

const Group = {
  view(vnode) {
    const vm = vnode.attrs.vm;
    const resolver = vnode.attrs.resolver;
    const pipelines = vm.resolvePipelines(resolver);

    const sharedArgs = _.assign({}, vnode.attrs);
    _.each(["vm", "resolver", "pipelines", "scheme"], (k) => delete sharedArgs[k]);

      const paths = vm.routes();
      let addPipeline = "";

      if (vm.canAdminister && paths.new) {
          addPipeline = <Dropdown vm={vm}/>;
      }

      return <div class="dashboard-group" key={vm.name}>
          <CollapsiblePanel expanded={true} header={<GroupHeading {...vnode.attrs} />} actions={addPipeline} css={styles}>
              <ul class="dashboard-group_items">
                  {_.map(pipelines, (pipeline) => <PipelineWidget invalidateEtag={vnode.attrs.invalidateEtag}
                                                                  pipeline={pipeline}
                                                                  key={pipeline.name} {...sharedArgs} />)}
              </ul>
          </CollapsiblePanel>
      </div>;
  }
};

export const DashboardGroupsWidget = {
  view(vnode) {
    const sharedArgs = _.assign({}, vnode.attrs);
    const { groups, testDrive } = sharedArgs;
    delete sharedArgs.groups;
    delete sharedArgs.testDrive;

    return _.map(groups, (group, i) => <Group vm={group} invalidateEtag={vnode.attrs.invalidateEtag}
                                              showPrompt={testDrive && 0 === i} {...sharedArgs} />);
  }
};
