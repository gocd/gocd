/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'jquery', 'angular', 'helpers/form_helper', 'models/pipeline_configs/pluggable_tasks', 'js-routes',
  'models/pipeline_configs/argument', 'views/pipeline_configs/lookup_command_widget', 'models/pipeline_configs/plugin_infos',
  'helpers/pipeline_configs/tooltips'],
  function (m, _, $, angular, f, PluggableTasks, Routes, Argument, LookupCommandWidget, PluginInfos, tt) {

    var TaskBasicViews = {
      ant: {
        view: function (ctrl, args) {
          var task = args.task;
          return (
          <div class="task-basic">
            <f.row>
              <f.inputWithLabel attrName='buildFile'
                                model={task}
                                tooltip={{
                                  content: tt.task.ant.buildFile,
                                  direction: 'bottom',
                                  size: 'small'
                                }}/>
              <f.inputWithLabel attrName='target'
                                model={task}
                                tooltip={{
                                  content: tt.task.ant.target,
                                  direction: 'bottom',
                                  size: 'small'
                                }}/>
              <f.inputWithLabel attrName='workingDirectory'
                                model={task}
                                end={true}
                                tooltip={{
                                  content: tt.task.ant.workingDirectory,
                                  direction: 'bottom',
                                  size: 'small'
                                }}/>
            </f.row>
          </div>
        );
        }
      },

      nant: {
        view: function (ctrl, args) {
          var task = args.task;
          return (
          <div class="task-basic">
            <f.row>
              <f.inputWithLabel attrName='buildFile'
                                model={task}
                                tooltip={{
                                  content: tt.task.nant.buildFile,
                                  direction: 'bottom',
                                  size: 'medium'
                                }}/>
              <f.inputWithLabel attrName='target'
                                model={task}
                                tooltip={{
                                  content: tt.task.nant.target,
                                  direction: 'bottom',
                                  size: 'medium'
                                }}/>
              <f.inputWithLabel attrName='workingDirectory'
                                model={task}
                                end={true}
                                tooltip={{
                                  content: tt.task.nant.workingDirectory,
                                  direction: 'bottom',
                                  size: 'small'
                                }}/>

            </f.row>
            <f.row>
              <f.inputWithLabel attrName='nantPath'
                                model={task}
                                end={true}
                                tooltip={{
                                  content: tt.task.nant.path,
                                  direction: 'bottom',
                                  size: 'medium'
                                }}/>
            </f.row>
          </div>
        );
        }
      },

      exec: {
        view: function (ctrl, args) {
          var task = args.task;
          var vm = Argument.vm(task.args());
          var arguments = function () {
            if (task.args().isList()) {
              return (
              <f.column size={8}>
                <f.textareaWithLabel attrName="data"
                                     model={vm}
                                     label="Args"
                                     size={12}/>
              </f.column>);
            }
            return (
            <f.column size={8}>
              <f.inputWithLabel attrName='data'
                                model={vm}
                                label="Args"
                                size={12}
                                largeSize={12}/>
            </f.column>);
          };

          return (
          <div class="task-basic">
            <f.row collapse>
              <f.column size={4}>
                <f.row>
                  <f.inputWithLabel attrName='command'
                                    model={task}
                                    validate={true}
                                    isRequired={true}
                                    size={12}
                                    largeSize={12}
                                    tooltip={{
                                      content: tt.task.custom.command,
                                      direction: 'bottom',
                                      size: 'small'
                                    }}/>
                  <f.inputWithLabel attrName='workingDirectory'
                                    model={task}
                                    end={true}
                                    size={12}
                                    largeSize={12}
                                    tooltip={{
                                      content: tt.task.custom.workingDirectory,
                                      direction: 'bottom',
                                      size: 'medium'
                                    }}/>
                </f.row>
              </f.column>
              {arguments()}
            </f.row>
            <LookupCommandWidget model={args.task}/>
          </div>
        );
        }
      },

      rake: {
        view: function (ctrl, args) {
          var task = args.task;
          return (
          <div class="task-basic">
            <f.row>
              <f.inputWithLabel attrName='buildFile'
                                model={task}
                                tooltip={{
                                  content: tt.task.rake.buildFile,
                                  direction: 'bottom',
                                  size: 'small'
                                }}/>
              <f.inputWithLabel attrName='target'
                                model={task}
                                tooltip={{
                                  content: tt.task.rake.target,
                                  direction: 'bottom',
                                  size: 'medium'
                                }}/>
              <f.inputWithLabel attrName='workingDirectory'
                                model={task}
                                end={true}
                                tooltip={{
                                  content: tt.task.rake.workingDirectory,
                                  direction: 'bottom',
                                  size: 'small'
                                }}/>
            </f.row>
          </div>
        );
        }
      },

      fetch: {
        view: function (ctrl, args) {
          var task = args.task;
          return (
          <div class="task-basic">
            <f.row>
              <f.inputWithLabel attrName='pipeline'
                                model={task}
                                tooltip={{
                                  content: tt.task.fetchArtifacts.pipeline,
                                  direction: 'bottom',
                                  size: 'large'
                                }}/>
              <f.inputWithLabel attrName='stage'
                                model={task}
                                validate={true}
                                isRequired={true}
                                tooltip={{
                                  content: tt.task.fetchArtifacts.stage,
                                  direction: 'bottom',
                                  size: 'small'
                                }}/>
              <f.inputWithLabel attrName='job'
                                model={task}
                                validate={true}
                                isRequired={true}
                                end={true}
                                tooltip={{
                                  content: tt.task.fetchArtifacts.job,
                                  direction: 'bottom',
                                  size: 'small'
                                }}/>
            </f.row>
            <f.row>
              <f.inputWithLabel attrName='source'
                                model={task}
                                validate={true}
                                isRequired={true}
                                tooltip={{
                                  content: tt.task.fetchArtifacts.source,
                                  direction: 'bottom',
                                  size: 'medium'
                                }}/>
              <f.inputWithLabel attrName='destination'
                                model={task}
                                tooltip={{
                                  content: tt.task.fetchArtifacts.destination,
                                  direction: 'bottom',
                                  size: 'medium'
                                }}/>
              <f.checkBox attrName='isSourceAFile'
                                model={task}
                                class='check'
                                label='Source is a file'
                                addPadding={true}
                                end={true}/>
            </f.row>
          </div>
        );
        }
      },

      pluggable_task: { //eslint-disable-line camelcase
        controller: function (args) {
          var self              = this;
          var ctrl              = self;
          self.task             = args.task;
          self.ngControllerName = 'controller-' + self.task.uuid();
          self.appName          = 'app-' + self.task.uuid();

          var template = function (template) {
            return $('<div></div>').html(template.replace(/GOINPUTNAME\[([^\]]*)\]/g, function (match, name) {
              return "GOINPUTNAME['" + name + "']";
            })).html();
          };

          PluginInfos.PluginInfo.byId(this.task.pluginId()).then(function (plugin) {
            self.templateHTML = template(plugin.viewTemplate());
            self.defaultTaskConfig = plugin.configurations();

            self.ngController = angular.module(self.appName, []).controller(self.ngControllerName, ['$scope', '$http', function ($scope, $http) {
              $scope.addError = function (field) {
                $scope.GOINPUTNAME[field.key] = {$error: {}};
                $scope.GOINPUTNAME[field.key].$error[_.toLower(field.key)] = field.errors.join();
              };

              $scope.clearErrors = function () {
                $scope.GOINPUTNAME = {};
                $scope.pluggableTaskGenericError = null;
              };

              $scope.clearErrors();

              var ajaxValidator = _.debounce(function (configuration, config, newValue) {
                configuration.setConfiguration(config.key, newValue);
                var req = {
                  url: Routes.apiInternalPluggableTaskValidationPath({
                    plugin_id: ctrl.task.pluginId()//eslint-disable-line camelcase
                  }),
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Confirm': true,
                    'X-CSRF-Token': $('meta[name=csrf-token]').attr('content')
                  },
                  data: JSON.stringify(configuration)
                };

                $http(req).then(
                $scope.clearErrors.bind($scope),
                function (response) {
                  if (response.status === 422) {
                    _.each(response.data, $scope.addError, $scope);
                  } else if (response.status === 520) {
                    $scope.pluggableTaskGenericError = response.data.error;
                  }
                });
              }, 250);

              _.map(self.defaultTaskConfig, function (config) {
                var configuration = ctrl.task.configuration();
                $scope[config.key] = configuration.valueFor(config.key);

                $scope.$watch(config.key, function (newValue) {
                  configuration.setConfiguration(config.key, newValue);
                  ajaxValidator(configuration, config, newValue);
                });
              });
            }]);
          });
        },

        view: function (ctrl) {
          var config = function (elem, isInitialized) {
            if (!isInitialized) {
              var pluginTaskTemplateElement = $('#pluggable-task-template-' + ctrl.task.uuid());
              angular.bootstrap(pluginTaskTemplateElement.get(0), [ctrl.appName]);
            }
          };

          return (
          <div id={'pluggable-task-template-' + ctrl.task.uuid()} ng-controller={ctrl.ngControllerName} class='task-basic' config={config}>
            <div class="callout alert"
                 ng-show="pluggableTaskGenericError">{'{{pluggableTaskGenericError}}'}</div>
            <div class='pluggable-task'>
              {m.trust(ctrl.templateHTML)}
            </div>
          </div>
        );
        }
      }
    };
    return TaskBasicViews;
  });
