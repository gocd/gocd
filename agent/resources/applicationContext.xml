<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2016 ThoughtWorks, Inc.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd"
       default-init-method="init">

    <import resource="classpath:applicationContext-plugin-infra.xml"/>
    <context:annotation-config/>

    <!-- Loads the System Properties -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:agent.properties</value>
            </list>
        </property>
        <!--SYSTEM_PROPERTIES_MODE_OVERRIDE : Check system properties first, before trying the specified properties.
            This allows system properties to override any other property source.-->
        <property name="systemPropertiesMode" value="2"/>
    </bean>

    <bean id="log4jDirectConfigurer" class="com.thoughtworks.go.util.Log4jDirectConfigurer"/>

    <bean id="buildLoopServer" class="com.thoughtworks.go.agent.service.HttpInvokerProxyFactoryWrapper"
          p:serviceInterface="com.thoughtworks.go.remote.BuildRepositoryRemote">
        <property name="httpInvokerRequestExecutor">
            <bean class="com.thoughtworks.go.agent.GoHttpClientHttpInvokerRequestExecutor">
                <constructor-arg ref="httpClient"/>
            </bean>
        </property>
    </bean>

    <bean class="com.thoughtworks.go.util.URLService"/>
    <bean class="com.thoughtworks.go.util.HttpService"/>
    <bean class="com.thoughtworks.go.publishers.GoArtifactsManipulator"/>
    <bean class="com.thoughtworks.go.agent.service.SslInfrastructureService"/>
    <bean class="com.thoughtworks.go.agent.service.AgentUpgradeService"/>
    <bean class="com.thoughtworks.go.config.DefaultAgentRegistry"/>

    <bean class="com.thoughtworks.go.agent.service.AgentWebsocketService"/>
    <bean id="subprocessLogger" class="com.thoughtworks.go.util.SubprocessLogger"/>
    <bean id="agentController" class="com.thoughtworks.go.agent.AgentController"/>
    <bean id="agentPluginsInitializer" class="com.thoughtworks.go.agent.AgentPluginsInitializer"/>
    <bean class="com.thoughtworks.go.plugin.access.packagematerial.PackageAsRepositoryExtension"/>
    <bean class="com.thoughtworks.go.plugin.access.scm.SCMExtension"/>
    <bean class="com.thoughtworks.go.plugin.access.pluggabletask.TaskExtension"/>

    <bean id="httpClient" class="com.thoughtworks.go.agent.common.ssl.GoAgentServerHttpClient">
        <constructor-arg ref="systemEnvironment"/>
    </bean>

    <bean id="agentControllerLooper" class="org.springframework.scheduling.timer.MethodInvokingTimerTaskFactoryBean"
          p:targetObject-ref="agentController"
          p:targetMethod="loop"/>

    <bean id="agentControllerPinger" class="org.springframework.scheduling.timer.MethodInvokingTimerTaskFactoryBean"
          p:targetObject-ref="agentController"
          p:targetMethod="ping"/>

    <bean id="agentControllerInstructionExecutor"
          class="org.springframework.scheduling.timer.MethodInvokingTimerTaskFactoryBean"
          p:targetObject-ref="agentController"
          p:targetMethod="executeAgentInstruction"/>


    <!-- worker thread -->
    <bean name="loopThread" class="org.springframework.scheduling.timer.TimerFactoryBean">
        <property name="scheduledTimerTasks">
            <list>
                <bean class="org.springframework.scheduling.timer.ScheduledTimerTask"
                      p:delay="${agent.get.work.delay}"
                      p:period="${agent.get.work.interval}"
                      p:timerTask-ref="agentControllerLooper"/>
            </list>
        </property>
    </bean>

    <!-- ping thread -->
    <bean name="pingThread" class="org.springframework.scheduling.timer.TimerFactoryBean">
        <property name="scheduledTimerTasks">
            <list>
                <bean class="org.springframework.scheduling.timer.ScheduledTimerTask"
                      p:delay="${agent.ping.delay}"
                      p:period="${agent.ping.interval}"
                      p:fixedRate="true"
                      p:timerTask-ref="agentControllerPinger"/>
            </list>
        </property>
    </bean>

    <!-- instruction checker -->
    <bean name="instructionExecuteThread" class="org.springframework.scheduling.timer.TimerFactoryBean">
        <property name="scheduledTimerTasks">
            <list>
                <bean class="org.springframework.scheduling.timer.ScheduledTimerTask"
                      p:delay="${agent.instruction.delay}"
                      p:period="${agent.instruction.interval}"
                      p:timerTask-ref="agentControllerInstructionExecutor"/>
            </list>
        </property>
    </bean>
</beans>
