/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  "mithril", 'lodash', 'jquery', 'helpers/form_helper', 'models/pipeline_configs/plugin_infos', 'models/auth_configs/auth_configs',
  'views/shared/angular_plugin'
], function (m, _, $, f, PluginInfos, AuthConfigs, AngularPlugin) {

  var autoComplete = function (model, attrName, selectCb) {
    return function (elem, isInitialized, context) {
      if (isInitialized) {
        return;
      }

      var $inputElem = $($(elem).find("input[data-prop-name='" + attrName + "']"));
      var values     = _.map(PluginInfos(), function (pluginInfo) {
        return pluginInfo.id();
      });

      context.onunload = function () {
        $inputElem.textcomplete('destroy');
      };

      $inputElem.textcomplete([
        {
          match:   /([^\s].*)$/,
          index:   1, // use the second match in the regex to extract the search term
          search:  function (term, callback) {
            term = term.toLowerCase();
            callback($.map(values, function (word) {
              return word.toLowerCase().indexOf(term) >= 0 ? word : null;
            }));
          },
          replace: function (word) {
            return word;
          }
        }
      ], {
        zIndex: '10000'
      });

      $inputElem.on('textComplete:select', function () {
        model()[attrName]($inputElem.val());
        if (selectCb) {
          selectCb($inputElem.val());
        }
      });
    };
  };

  var AuthConfigModalBody = {
    controller: function (args) {
      var setPluginInfo = function (pluginInfo) {
        args.pluginInfo(pluginInfo);
        args.saveDisabled(!pluginInfo);
      };

      this.selectAuthConfigId = function () {
        var pluginInfo = _.find(PluginInfos(), function (pluginInfo) {
          return pluginInfo.id() === args.authConfig().pluginId();
        });

        setPluginInfo(pluginInfo);
        if (!pluginInfo) {
          return;
        }

        PluginInfos.PluginInfo.get(pluginInfo.id()).then(function (pluginInfo) {
          setPluginInfo(pluginInfo);
          var newAuthConfig = new AuthConfigs.AuthConfig({id: args.authConfig().id(), pluginId: pluginInfo.id()});
          newAuthConfig.etag(args.authConfig().etag());
          args.authConfig(newAuthConfig);
        });
      };

      this.clearMessage = function () {
        args.message({});
      };
    },

    view: function (ctrl, args) {
      var authConfigIdDisabledMessage;

      this.getMessage = function () {
        if (args.message && args.message() && args.message().type) {
          return (
            <f.row>
              <f.callout type={args.message().type}>
                {args.message().message}

                <button class="close-button" aria-label="Dismiss alert" type="button"
                        onclick={ctrl.clearMessage.bind(ctrl)}>
                  <span aria-hidden="true">&times;</span>
                </button>
              </f.callout>
            </f.row>
          );
        }
      };

      if (args.errorMessage && args.errorMessage()) {
        return (
          <f.alert>{args.errorMessage()}</f.alert>
        );
      }

      if (!args.authConfig()) {
        return (
          <div class="modal-spinner"/>
        );
      }

      if (!args.newAuthConfig) {
        authConfigIdDisabledMessage = (<div>Editing of authorization configuration ID is disabled</div>);
      }

      var settingsView = (
        <div></div>
      );

      if (args.pluginInfo()) {
        settingsView = (<AngularPlugin settings={args.pluginInfo().profileSettings}
                                       configuration={args.authConfig().properties}
                                       key={args.pluginInfo() ? args.pluginInfo().id() : 'no-plugin'}/>
        );
      }

      return (
        <div>
          {this.getMessage()}
          <f.row key="static-stuff" class="id-and-plugin-id-wrapper">
            <f.inputWithLabel model={args.authConfig()}
                              attrName="id"
                              validate="true"
                              isRequired="true"
                              disabled={!args.newAuthConfig}
                              message={authConfigIdDisabledMessage}
                              label="Id"
                              key="auth-config-id"/>
            <f.inputWithLabel model={args.authConfig()}
                              key="plugin-id-autocomplete"
                              validate="true"
                              attrName="pluginId"
                              isRequired="true"
                              label="Plugin Id"
                              onChange={ctrl.selectAuthConfigId.bind(ctrl)}
                              config={autoComplete(args.authConfig, 'pluginId', ctrl.selectAuthConfigId.bind(ctrl))}
                              end="true"/>
          </f.row>

          <div class="row collapse">
            {settingsView}
          </div>
        </div>
      );
    }
  };

  return AuthConfigModalBody;
});