/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'helpers/form_helper', 'views/shared/new_modal',
  'views/pipeline_configs/package_repositories/repository_config_edit_widget', 'views/pipeline_configs/package_repositories/repository_config_new_widget', 'views/pipeline_configs/package_repositories/package_config_widget',
  'models/pipeline_configs/repositories', 'models/pipeline_configs/plugin_infos'
], function (m, _, f, Modal, RepositoryConfigEditWidget, RepositoryConfigNewWidget, PackageConfigWidget, Repositories, PluginInfos) {

  var onSuccessOfRepoAPI = function (vm, modal, material, data) {
    vm.saveSuccess();
    modal.destroy();
    material.repository(data);
    Repositories.init();
  };

  var onFailureOfRepoAPI = function (vm, data) {
    vm.saveFailed(data);
  };

  var EditRepositoryWidget = {
    controller: function (args) {

      var ctrl = {

        editRepository: function(repoForEdit, vm, modal, material) {
          repoForEdit().update().then(onSuccessOfRepoAPI.bind(this, vm, modal, material), onFailureOfRepoAPI.bind(this, vm));
        },

        update: function () {
          var repoForEdit = m.prop(args.material.repository());
          args.create(repoForEdit, RepositoryConfigEditWidget, 'Edit Repository', ctrl.editRepository);
        },

        isPluginMissing: function () {
          return _.isNil(PluginInfos.findById(args.material.repository().pluginMetadata().id()));
        }
      };
      return ctrl;
    },

    view: function (ctrl, args) {

      var repository = args.material.repository();
      var data       = {Name: repository.name(), Plugin: PluginInfos.findById(repository.pluginMetadata().id()).name()};

      repository.configuration().mapConfigurations(function (conf) {
        data[_.capitalize(conf.key())] = conf.isSecureValue() ? "***********" : conf.value();
      });

      var editButton = ctrl.isPluginMissing() ? (
        <f.alert><b>{repository.pluginMetadata().id()}</b> plugin seems to be removed.</f.alert>)
        : (<f.editButton onclick={ctrl.update}/>);

      return (
        <div>
          <div class='repository'>
            {editButton}
            <f.row>
              <ul>
                {_.map(data, function (v, k) {
                  return (
                    <li>
                      <label class={_.toLower(k)}>{k}</label><span>{v}</span>
                    </li>
                  );
                })}
              </ul>
            </f.row>
          </div>
        </div>
      );
    }
  };

  var NewRepositoryWidget = {
    controller: function (args) {
      var ctrl = {
        createRepository: function(repoForEdit, vm, modal, material) {
          repoForEdit().create().then(onSuccessOfRepoAPI.bind(this, vm, modal, material), onFailureOfRepoAPI.bind(this, vm));
        },

        create: function () {
          var repoForEdit = m.prop(new Repositories.Repository({}));
          args.create(repoForEdit, RepositoryConfigNewWidget, 'Add Repository', ctrl.createRepository);
        }
      };
      return ctrl;
    },

    view: function (ctrl) {
      return (
        <f.row>
          <f.column class='no-repo' size={4} largeSize={6} end>
            {_.isEmpty(Repositories()) ?
              <div>
                <label>No repositories available.</label> <a class='add-button button' href="javascript:void(0)"
                                                             onclick={ctrl.create}>Create New Repository</a></div>
              : <a class='add-button button' href="javascript:void(0)"
                   onclick={ctrl.create}/>}

          </f.column>
        </f.row>
      );
    }
  };

  var SelectRepositoryWidget = {
    controller: function (args) {

      Repositories.findById(args.defaultRepoId()).then(function (repository) {
        args.material.repository(repository);
      });

      var ctrl = {
        selectRepository: function () {
          var id = args.defaultRepoId();
          Repositories.findById(id).then(function (repository) {
            args.material.repository(repository);
          });
        }
      };
      return ctrl;
    },

    view: function (ctrl, args) {
      var items = [];
      _.each(Repositories(), function (repository) {
        var item     = {};
        item['id']   = repository.id();
        item['text'] = repository.name();
        items.push(item);
      });

      return (
        <f.row class='repo-selector'>
          <f.select
            model={args}
            attrName="defaultRepoId"
            items={items}
            size={6}
            largeSize={2}
            onchange={ctrl.selectRepository}
          />
        </f.row>
      );
    }
  };

  var RepositoryWidget = {
    controller: function (args) {

      var temp = function() {
        var headOfRepositories;
        if(!_.isEmpty(_.head(Repositories()))) {
          headOfRepositories = _.head(Repositories()).id();
        }
        return _.isNil(args.material.repository()) ? headOfRepositories : args.material.repository().id();
      };

      var ctrl = {

        defaultRepoId: m.prop(temp()),

        create: function (repoForEdit, RepositoryConfigurationWidget, modalTitle, performOperation) {
          var vm    = new Repositories.vm();
          var modal = new Modal({
            size:    'small',
            title:   modalTitle,
            body:    (<RepositoryConfigurationWidget repoForEdit={repoForEdit}
                                        vm={vm}/>),
            onclose: function () {
              vm.reset();
              modal.destroy();
            },
            buttons: [
              {
                text: 'Check Repository Connection',
                class: 'check_repo_connection primary',
                onclick: function () {
                  //TODO: implement the check repository API
                }
              },
              {
                text:    'Save',
                class:   'save primary',
                onclick: function () {
                  vm.startUpdating();
                  performOperation(repoForEdit, vm, modal, args.material);
                }
              }
            ]
          });
          modal.render();
        }
      };
      return ctrl;
    },
    view:       function (ctrl, args) {
      var repository = args.material.repository;

      return (
        <div>
          <NewRepositoryWidget material={args.material}
                               create={ctrl.create}/>
          {!_.isNil(repository()) || !_.isEmpty(Repositories()) ?
            <SelectRepositoryWidget material={args.material} defaultRepoId={ctrl.defaultRepoId}/> : ''}
          {_.isNil(repository()) ? '' : <EditRepositoryWidget material={args.material}
                                                              create={ctrl.create}/> }
          {!_.isNil(repository()) ? <PackageConfigWidget material={args.material}/> : ''}
        </div>
      );
    }
  };
  return RepositoryWidget;
});