<?xml version="1.0" encoding="UTF-8"?>
<!-- *************************GO-LICENSE-START******************************
 * Copyright 2014 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *************************GO-LICENSE-END******************************* -->

<!--
  - Application context definition for the data access layer.
  - Accessed by business layer objects defined in "applicationContext.xml"
  - (see web.xml's "contextConfigLocation").
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:annotation-config/>
    <context:component-scan base-package="com.thoughtworks.go.util"/>
    <context:component-scan base-package="com.thoughtworks.go.server.dao"/>
    <context:component-scan base-package="com.thoughtworks.go.server.persistence"/>
    <import resource="propertyConfigurer.xml"/>
    <import resource="classpath*:optional-development-server-configurer.xml" />

    <bean id="cache" class="com.opensymphony.oscache.base.Cache">
        <constructor-arg value="true"/>
        <!-- useMemoryCaching -->
        <constructor-arg value="false"/>
        <!-- unlimitedDiskCache -->
        <constructor-arg value="false"/>
        <!-- overflowPersistence -->
        <constructor-arg value="false"/>
        <!-- blocking -->
        <constructor-arg value="com.opensymphony.oscache.base.algorithm.LRUCache"/>
        <!-- algorithmClass -->
        <constructor-arg value="1000"/>
        <!-- capacity -->
    </bean>

    <bean id="dbLauncher" class="com.thoughtworks.go.server.database.DatabaseStrategy"/>

    <bean id="databaseUpgraderDataSourceFactory" class="com.thoughtworks.go.server.util.DatabaseUpgraderDataSourceFactory"/>

    <bean id="goDataSource" factory-bean="databaseUpgraderDataSourceFactory" factory-method="dataSource" scope="singleton"/>
    <!--
        <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
            <property name="driverClassName" value="${jdbc.driverClassName}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
        </bean>
    -->

    <!-- ========================= RESOURCE DEFINITIONS ========================= -->

    <!-- Local Apache Commons DBCP DataSource that refers to a combined database -->
    <!-- The placeholders are resolved from jdbc.properties through -->
    <!-- the PropertyPlaceholderConfigurer in applicationContext.xml -->
    <!-- Transaction manager for a single JDBC DataSource-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="goDataSource"/>
    </bean>


    <bean id="transactionTemplate" class="com.thoughtworks.go.server.transaction.TransactionTemplate">
        <constructor-arg index="0">
            <bean class="org.springframework.transaction.support.TransactionTemplate">
                <property name="transactionManager" ref="txManager"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="transactionSynchronizationManager" class="com.thoughtworks.go.server.transaction.TransactionSynchronizationManager"/>


    <!-- SqlMap setup for iBATIS Database Layer -->
    <bean id="sqlMapClient" class="com.thoughtworks.go.server.database.SqlSessionFactoryBean">
        <!--<property name="configLocation" value="WEB-INF/sql-map-config.xml"/>-->
        <!-- WEB-INF/ -->
        <!--<property name="dataSource" ref="goDataSource"/>-->
        <!--<property name="useTransactionAwareDataSource" value="true"/>-->
    </bean>

    <!-- ========================= HIBERNATE ========================= -->

    <bean id="hibernateProperties" class="com.thoughtworks.go.server.database.HibernateProperties" />
    <bean id="sessionFactory" class="com.thoughtworks.go.server.database.LocalSessionFactoryBean">
        <property name="dataSource" ref="goDataSource" />
        <property name="mappingDirectoryLocations">
            <list>
                <value>classpath:/hibernate-mappings</value>
            </list>
        </property>
        <property name="hibernateProperties" ref="hibernateProperties" />
        <property name="entityInterceptor">
            <bean class="com.thoughtworks.go.server.transaction.TransactionCacheInterceptor" lazy-init="true">
                <constructor-arg index="0" ref="goCache"/>
            </bean>
        </property>
    </bean>

    <bean id="goTransactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- ========================= DAO DEFINITIONS ========================= -->

    <bean class="com.thoughtworks.go.server.persistence.MaterialRepository" name="materialRepository" lazy-init="true">
        <constructor-arg index="0" ref="sessionFactory"/>
        <constructor-arg index="1" ref="goCache"/>
        <constructor-arg index="2" value="${cruise.material.modifications.cache.limit}"/>
        <constructor-arg index="3" ref="transactionSynchronizationManager"/>
        <constructor-arg index="4" ref="materialConfigConverter"/>
    </bean>
</beans>
