/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m      = require('mithril');
const Stream = require('mithril/stream');
const f      = require('helpers/form_helper');
const Template        = require('models/template_configs/template');
const ComponentMixins = require('helpers/mithril_component_mixins');

const PipelineSelectionWidget = {
  oninit (vnode) {
    const self = this;
    ComponentMixins.HasViewModel.call(this);
    self.pipelines = Stream([]);
    self.args      = vnode.attrs;

    self.reloadPipelines = function () {
      Template.getPipelinesForNewTemplate().then((response) => {
        const pipelines = response.map((pipeline) => {
          return {id: pipeline, text: pipeline};
        });
        self.pipelines(pipelines);
      });
    };

    self.reloadPipelines();
  },

  view (vnode) {
    const arePipelinesAvailable = (vnode.state.pipelines().length > 0);

    let selectPipelineSection = (
      <f.info>
        There are no Pipelines available to extract a new Template.
      </f.info>
    );

    if (arePipelinesAvailable) {
      const template = vnode.attrs.template();
      template.pipeline(vnode.state.pipelines()[0].text);

      selectPipelineSection = (<f.row class='pipeline-selector'>
          <f.select
            model={template}
            attrName='pipeline'
            class='inline'
            label='Select a pipeline to extract new Template'
            items={vnode.state.pipelines()}
            size={4}
            largeSize={4}/>
        </f.row>
      );
    }

    return (
      <f.accordion accordionTitles={[(<span>Select Pipeline</span>)]}
                   accordionKeys={['templatePipeline']}
                   selectedIndex={vnode.state.vmState('templatePipelineSelected', Stream(0))}
                   class='accordion select-pipeline'>
        <div>
          {selectPipelineSection}
        </div>
      </f.accordion>
    );
  }
};

module.exports = PipelineSelectionWidget;
