/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define(['mithril', 'jquery', 'lodash', 'string-plus', 'models/model_mixins', 'es6shim'], function (m, $, _, s, Mixin) {

  var deleteKeyAndReturnValue = function (object, key, defaultValue) {
    var value = object[key];
    delete object[key];
    return _.isNil(value) ? defaultValue : value;
  };

  var compactClasses = function (args) {
    var initialClasses = [].slice.call(arguments, 1);
    return _([initialClasses, deleteKeyAndReturnValue(args, 'class')]).flatten().compact().join(' ');
  };

  var foundationReflow = function () {
    return function (elem, isInitialized) {
      if (!isInitialized) {
        $(elem).foundation();
      }
    };
  };

  function setValue(items, cb) {
    return function (e) {
      e                 = e || window.event;
      var currentTarget = e.currentTarget || this;

      var mappings = _.reduce(items, function (memo, item) {
        var id = s.coerceToMprop(item.id)();
        memo[id] = item;
        return memo;
      }, {});

      cb(mappings[currentTarget.value]);
    };
  }

  var f = {
    row: {
      view: function (_ctrl, args, children) {
        var collapse = deleteKeyAndReturnValue(args, 'collapse') ? 'collapse' : null;
        return (
          <div
            class={compactClasses(args, 'row expanded', collapse)}
            {...args}>
            {children}
          </div>
        );
      }
    },

    column: {
      view: function (_ctrl, args, children) {
        var end       = deleteKeyAndReturnValue(args, 'end') ? 'end' : null,
            size      = deleteKeyAndReturnValue(args, 'size', 6),
            largeSize = deleteKeyAndReturnValue(args, 'largeSize', size);

        return (
          <div class={compactClasses(args, 'columns', 'medium-' + size, 'large-' + largeSize, end)}
               {...args}>
            {children}
          </div>
        );
      }
    },

    input: {
      controller: function () {
        this.onInput = function (model, attrName, callback, e) {
          var currentTarget = (e || event).currentTarget;
          var newValue      = currentTarget.value || currentTarget.getAttribute('value');
          model[attrName](newValue);
          if (callback) {
            callback();
          }
        };
      },

      view: function (ctrl, args) {
        var model       = deleteKeyAndReturnValue(args, 'model'),
          attrName    = deleteKeyAndReturnValue(args, 'attrName'),
          type        = deleteKeyAndReturnValue(args, 'type', 'text'),
          placeholder = deleteKeyAndReturnValue(args, 'placeholder', ''),
          modelType   = deleteKeyAndReturnValue(args, 'modelType', (model.constructor ? model.constructor.modelType : null)),
          validate    = deleteKeyAndReturnValue(args, 'validate', false),
          tooltip     = deleteKeyAndReturnValue(args, 'tooltip'),
          onChange    = deleteKeyAndReturnValue(args, 'onChange');

        args.size      = args.size || 6;
        args.largeSize = args.largeSize || 4;

        var validationAttr = (validate && !_.isEqual(validate, 'all')) ? attrName : undefined;

        var propertyError = (validate && model.errors().hasErrors(attrName)) ? (
          <span class='form-error is-visible'>{model.errors().errorsForDisplay(attrName)}</span>) : undefined;

        return (
          <f.column {...args}>
            <input
              autocomplete="off"
              autocapitalize="off"
              autocorrect="off"
              spellcheck="off"
              data-prop-name={attrName}
              data-model-type={modelType}
              value={model[attrName]()}
              type={type}
              placeholder={placeholder}
              class={propertyError ? 'is-invalid-input' : ''}
              oninput={ctrl.onInput.bind(ctrl, model, attrName, onChange)}
              onblur={validate ? model.validate.bind(model, validationAttr) : undefined}/>
            <f.tooltip tooltip={tooltip} model={model} attrName={attrName}/>
            {propertyError}
          </f.column>
        );
      }
    },

    inputWithLabel: {
      controller: function () {
        this.onInput = function (model, attrName, callback, e) {
          var currentTarget = (e || event).currentTarget;
          var newValue      = currentTarget.value || currentTarget.getAttribute('value');
          model[attrName](newValue);
          if (callback) {
            callback();
          }
        };
      },

      view: function (ctrl, args) {
        var model       = deleteKeyAndReturnValue(args, 'model'),
          attrName    = deleteKeyAndReturnValue(args, 'attrName'),
          type        = deleteKeyAndReturnValue(args, 'type', 'text'),
          placeholder = deleteKeyAndReturnValue(args, 'placeholder', ''),
          labelText   = deleteKeyAndReturnValue(args, 'label'),
          onChange    = deleteKeyAndReturnValue(args, 'onChange'),
          tooltip     = deleteKeyAndReturnValue(args, 'tooltip'),
          modelType   = deleteKeyAndReturnValue(args, 'modelType', (model.constructor ? model.constructor.modelType : null)),
          validate    = deleteKeyAndReturnValue(args, 'validate', false),
          isRequired  = deleteKeyAndReturnValue(args, 'isRequired', false),
          disabled    = deleteKeyAndReturnValue(args, 'disabled', false),
          message     = deleteKeyAndReturnValue(args, 'message', '');

        args.size      = args.size || 6;
        args.largeSize = args.largeSize || 4;

        var validationAttr = (validate && !_.isEqual(validate, 'all')) ? attrName : undefined;

        var propertyError = (validate && model.errors().hasErrors(attrName)) ? (
          <span class='form-error is-visible'>{model.errors().errorsForDisplay(attrName)}</span>) : undefined;

        var propertyMessage;
        if (message) {
          propertyMessage = <f.infoToolTip content={message}/>;
        }

        var resetButton = function () {
          if (args.withReset && model[attrName]()) {
            var capitalizedAttrName = _.upperFirst(attrName);
            return (
              <f.resetButton onclick={model['resetToOriginal' + capitalizedAttrName].bind(model)}/>
            );
          }
        };

        return (
          <f.column {...args} class={_.compact([propertyError ? 'is-invalid-label' : null, args.class]).join(' ')}>
            <label
              class={_.compact([propertyError ? 'is-invalid-label' : null, tooltip ? 'has-tooltip' : null]).join(' ')}>
              {labelText || s.humanize(attrName)}
              {isRequired ? (<span class='asterisk'>*</span>) : undefined}
            </label>

            <f.tooltip tooltip={tooltip} model={model} attrName={attrName}/>
            {propertyMessage}

            <input
              autocomplete="off"
              autocapitalize="off"
              autocorrect="off"
              spellcheck="off"
              data-prop-name={attrName}
              data-model-type={modelType}
              value={model[attrName]()}
              type={type}
              placeholder={placeholder}
              class={propertyError ? 'is-invalid-input' : ''}
              disabled={disabled}
              oninput={ctrl.onInput.bind(ctrl, model, attrName, onChange)}
              onblur={validate ? model.validate.bind(model, validationAttr) : undefined}/>
            {resetButton()}
            {propertyError}
          </f.column>
        );
      }
    },

    textareaWithLabel: {
      controller: function () {
        this.onInput = function (model, attrName, callback, e) {
          var currentTarget = (e || event).currentTarget;
          var newValue      = currentTarget.value || "";
          model[attrName](newValue);
          if (callback) {
            callback();
          }
        };
      },

      view: function (ctrl, args) {
        var model       = deleteKeyAndReturnValue(args, 'model'),
          attrName    = deleteKeyAndReturnValue(args, 'attrName'),
          placeholder = deleteKeyAndReturnValue(args, 'placeholder', ''),
          labelText   = deleteKeyAndReturnValue(args, 'label'),
          onChange    = deleteKeyAndReturnValue(args, 'onChange'),
          tooltip     = deleteKeyAndReturnValue(args, 'tooltip'),
          modelType   = deleteKeyAndReturnValue(args, 'modelType', (model.constructor ? model.constructor.modelType : null)),
          validate    = deleteKeyAndReturnValue(args, 'validate', false);

        args.size = args.size || 3;

        var validationAttr = (validate && !_.isEqual(validate, 'all')) ? attrName : undefined;

        var propertyError = (validate && model.errors().hasErrors(attrName)) ? (
          <small class='error'>{model.errors().errorsForDisplay(attrName)}</small>) : undefined;

        return (
          <f.column {...args} class={propertyError ? 'error' : null}>
            <label class={_.compact([propertyError ? 'error' : null, tooltip ? 'has-tooltip' : null]).join(' ')}>
              {_.isNil(labelText) ? s.humanize(attrName) : labelText}
            </label>

            <f.tooltip tooltip={tooltip} model={model} attrName={attrName}/>

            <textarea
              data-prop-name={attrName}
              data-model-type={modelType}
              spellcheck="off"
              placeholder={placeholder}
              class={propertyError ? 'error' : ''}
              oninput={ctrl.onInput.bind(ctrl, model, attrName, onChange)}
              value={model[attrName]()}
              onblur={validate ? model.validate.bind(model, validationAttr) : undefined}>
              </textarea>
            {propertyError}
          </f.column>
        );
      }
    },

    checkBox: {
      view: function (_ctrl, args) {
        var model      = deleteKeyAndReturnValue(args, 'model'),
          attrName   = deleteKeyAndReturnValue(args, 'attrName'),
          labelText  = deleteKeyAndReturnValue(args, 'label'),
          disabled   = deleteKeyAndReturnValue(args, 'disabled'),
          tooltip    = deleteKeyAndReturnValue(args, 'tooltip'),
          addPadding = deleteKeyAndReturnValue(args, 'addPadding'),
          id         = s.uuid(),
          modelType  = deleteKeyAndReturnValue(args, 'modelType', (model.constructor ? model.constructor.modelType : null));

        if (!args.size) {
          args.size = 3;
        }

        var padding;

        if (addPadding) {
          padding = (<label class='check-box-spacing' style={{display: 'block'}}>{m.trust('&nbsp;')}</label>);
        }

        return (
          <f.column {...args}>
            {padding}
            <input type="checkbox"
                   data-prop-name={attrName}
                   data-model-type={modelType}
                   id={id}
                   disabled={disabled}
                   checked={model[attrName]()}
                   onchange={m.withAttr('checked', model[attrName])}/>
            <label class={_.compact(['inline', tooltip ? 'has-tooltip' : null]).join(' ')} for={id}>
              {labelText || s.humanize(attrName)}
            </label>

            <f.tooltip tooltip={tooltip} model={model} attrName={attrName}/>
          </f.column>
        );
      }
    },

    multiSelectionBox: {
      controller: function (args) {
        this.attr = args.model[args.attrName];

        this.onChange = function (e) {
          var currentTarget = (e || event).currentTarget;

          currentTarget.checked ? this.attr().push(currentTarget.value)
            : this.attr().pop(currentTarget.value);
        };

        this.isChecked = function (value) {
          return _.includes(this.attr().data(), value);
        };
      },

      view: function (ctrl, args) {
        var model      = deleteKeyAndReturnValue(args, 'model'),
          attrName   = deleteKeyAndReturnValue(args, 'attrName'),
          value      = deleteKeyAndReturnValue(args, 'value'),
          labelText  = deleteKeyAndReturnValue(args, 'label'),
          disabled   = deleteKeyAndReturnValue(args, 'disabled'),
          tooltip    = deleteKeyAndReturnValue(args, 'tooltip'),
          addPadding = deleteKeyAndReturnValue(args, 'addPadding'),
          id         = s.uuid(),
          modelType  = deleteKeyAndReturnValue(args, 'modelType', (model.constructor ? model.constructor.modelType : null));

        if (!args.size) {
          args.size = 3;
        }

        var padding;

        if (addPadding) {
          padding = (<label style={{display: 'block'}}>{m.trust('&nbsp;')}</label>);
        }

        return (
          <f.column {...args}>
            {padding}
            <input type="checkbox"
                   data-prop-name={attrName}
                   data-model-type={modelType}
                   id={id}
                   disabled={disabled}
                   value={value}
                   checked={ctrl.isChecked(value)}
                   onchange={ctrl.onChange.bind(ctrl)}/>
            <label class={_.compact(['inline', tooltip ? 'has-tooltip' : null]).join(' ')} for={id}>
              {labelText || s.humanize(attrName)}
            </label>

            <f.tooltip tooltip={tooltip} model={model} attrName={attrName}/>
          </f.column>
        );
      }
    },

    tabs: {
      controller: function (args) {
        this.selectedIndex = s.coerceToMprop(args.selectedIndex || 0);

        this.classNameForTab = function (tabIndex) {
          return this.selectedIndex() === tabIndex ? 'is-active' : '';
        };

        this.componentClass = compactClasses(args);

        this.prefixedClass = function (suffix) {
          if (!s.isBlank(this.componentClass)) {
            return this.componentClass + '-' + suffix;
          }
        };
      },

      view: function (ctrl, args, children) {
        var tabs = (
          <ul class={_.compact(['tabs', args.isVertical ? 'vertical' : undefined]).join(' ')}>
            {_.map(args.tabTitles, function (tabTitle, tabIndex) {

              var tabTitleElem;

              if (s.isBlank(tabTitle)) {
                tabTitleElem = (<a href='javascript:void(0)'>{m.trust('&nbsp;')}</a>);
              }
              else if (_.isString(tabTitle)) {
                tabTitleElem = (<a href='javascript:void(0)'>{tabTitle}</a>);
              } else {
                tabTitleElem = tabTitle;
              }

              return (
                <li
                  class={_.compact(['tabs-title', ctrl.classNameForTab(tabIndex), ctrl.prefixedClass('tabs-title')]).join(' ')}
                  onclick={ctrl.selectedIndex.bind(ctrl, tabIndex)}
                  key={args.tabKeys[tabIndex]}>
                  {tabTitleElem}
                </li>
              );
            })}
          </ul>
        );

        var tabsContent = (
          <div
            class={_.compact([args.isVertical ? 'vertical' : undefined, 'tabs-content', 'tabs-content-container', ctrl.prefixedClass('tabs-content-container')]).join(' ')}>
            {_.map(_.flatten(children), function (child, tabIndex) {

              var renderedChild;

              if (tabIndex === ctrl.selectedIndex()) {
                renderedChild = child;
              }

              return (
                <div
                  class={_.compact(['tabs-panel', ctrl.classNameForTab(tabIndex), ctrl.prefixedClass('tabs-panel')]).join(' ')}>
                  {renderedChild}
                </div>
              );
            })}
          </div>
        );

        if (args.isVertical) {
          return (
            <f.row
              class={_.compact(['collapse', ctrl.componentClass, 'tab-container', ctrl.prefixedClass('tab-container')]).join(' ')}>
              <f.column size={2}>
                {tabs}
              </f.column>
              <f.column size={10}>
                {tabsContent}
              </f.column>
            </f.row>
          );
        } else {
          return (
            <div
              class={_.compact([ctrl.componentClass, 'tab-container', ctrl.prefixedClass('tab-container')]).join(' ')}>
              {tabs}
              {tabsContent}
            </div>
          );
        }
      }
    },

    select: {
      controller: function (args) {
        this.value = s.coerceToMprop(args.value, '');
      },

      view: function (_ctrl, args) {
        var items         = deleteKeyAndReturnValue(args, 'items', [{}]),
          label         = deleteKeyAndReturnValue(args, 'label'),
          model         = deleteKeyAndReturnValue(args, 'model'),
          modelType     = deleteKeyAndReturnValue(args, 'modelType', (model.constructor ? model.constructor.modelType : null)),
          attrName      = deleteKeyAndReturnValue(args, 'attrName'),
          tooltip       = deleteKeyAndReturnValue(args, 'tooltip'),
          disabled      = deleteKeyAndReturnValue(args, 'disabled', false),
          receiveObject = deleteKeyAndReturnValue(args, 'receiveObject', false),
          message       = deleteKeyAndReturnValue(args, 'message', '');

        if (!args.size) {
          args.size = 3;
        }

        var propertyMessage;
        if (message) {
          propertyMessage = <f.infoToolTip content={message}/>;
        }

        var onchange = receiveObject ? setValue(items, model[attrName]) : m.withAttr('value', model[attrName]);

        var selectedValue = model[attrName]();
        var selectElem    = (
          <select value={selectedValue}
                  disabled={disabled}
                  data-prop-name={attrName}
                  data-model-type={modelType}
                  onchange={onchange}>
            {_.map(items, function (item) {
              var id   = s.coerceToMprop(item.id)();
              var text = s.coerceToMprop(item.text)();

              return (
                <option value={id} selected={id === selectedValue}>{text}</option>
              );
            })}
          </select>
        );

        if (s.isBlank(label)) {
          return (
            <f.column {...args}>
              <f.tooltip tooltip={tooltip}/>
              {propertyMessage}
              {selectElem}
            </f.column>);
        } else {
          return (
            <f.column {...args}>
              <label>
                {label}
              </label>
              <f.tooltip tooltip={tooltip}/>
              {propertyMessage}
              {selectElem}
            </f.column>
          );
        }
      }
    },

    accordion: {
      controller: function (args) {
        this.selectedIndex = Mixin.TogglingGetterSetter(s.coerceToMprop(args.selectedIndex || 0));

        this.classNameForAccordionIndex = function (tabIndex) {
          return this.selectedIndex() === tabIndex ? 'is-active' : null;
        };

        this.classNameForAccordionContent = function (tabIndex) {
          return this.selectedIndex() === tabIndex ? 'show' : 'hide';
        };
      },

      view: function (ctrl, args, children) {
        return (
          <ul class={compactClasses(args, 'accordion')} data-accordion data-multi-expand="true">
            {_.map(_.flatten(children), function (child, index) {
              var renderedChild;

              if (index === ctrl.selectedIndex()) {
                renderedChild = child;
              }
              return (
                <li class={_.compact(['accordion-item', ctrl.classNameForAccordionIndex(index)]).join(' ')}
                    key={args.accordionKeys[index]} data-accordion-item>
                  <a href="javascript:void(0)"
                     class="accordion-title"
                     onclick={ctrl.selectedIndex.bind(ctrl, index)}>
                    {args.accordionTitles[index]}
                  </a>

                  <div class={_.compact(['accordion-content', ctrl.classNameForAccordionContent(index)]).join(' ')}>
                    {renderedChild}
                  </div>
                </li>
              );
            })}
          </ul>
        );
      }
    },

    removeButton: {
      view: function (_ctrl, args, children) {
        return (
          <button type={deleteKeyAndReturnValue(args, 'type', 'button')} class={compactClasses(args, 'remove')}
                  title='Remove' {...args}>{children}</button>

        );
      }
    },

    editButton: {
      view: function (_ctrl, args, children) {
        return (
          <button type={deleteKeyAndReturnValue(args, 'type', 'button')} class={compactClasses(args, 'edit')}
                  title='Edit' {...args}>{children}</button>
        );
      }
    },

    resetButton: {
      view: function (_ctrl, args, children) {
        return (
          <button type={deleteKeyAndReturnValue(args, 'type', 'button')} class={compactClasses(args, 'reset')}
                  title='Reset' {...args}>{children}</button>
        );
      }
    },

    button: {
      view: function (_ctrl, args, children) {
        return (
          <button type="button" class={compactClasses(args, 'button')} {...args}>{children}</button>
        );
      }
    },

    link: {
      view: function (_ctrl, args, children) {
        return (<a href="javascript:void(0)" class={compactClasses(args)} {...args}>{children}</a>);
      }
    },

    tooltip: {
      view: function (_ctrl, args, children) {
        if (!args.tooltip && _.isEmpty(children)) {
          return <noscript/>;
        }

        var direction = deleteKeyAndReturnValue(args.tooltip, 'direction', 'bottom'),
          size      = deleteKeyAndReturnValue(args.tooltip, 'size', 'medium'),
          content   = deleteKeyAndReturnValue(args.tooltip, 'content', children),
          clazz     = deleteKeyAndReturnValue(args.tooltip, 'class', null),
          tooltipId = 'help-tooltip-';

        if (args.model && args.model.uuid) {
          tooltipId += (args.model.uuid() + '-' + args.attrName);
        } else {
          tooltipId += s.uuid();
        }

        return (
          <span class={_.compact(['tooltip-wrapper', clazz]).join(' ')}>
            <a href='javascript:void(0)'
               data-toggle={tooltipId}
               class='tooltip-question-mark'/>
            <div id={tooltipId}
                 class={_.compact(['f-dropdown', 'dropdown-pane', 'content', 'tooltip-content', size, direction]).join(' ')}
                 data-dropdown
                 data-hover='true'
                 data-hover-pane='true'
                 config={foundationReflow()}>
              {content}
            </div>
          </span>
        );
      }
    },

    callout: {
      view: function (_ctrl, args, children) {
        var type = deleteKeyAndReturnValue(args, 'type');
        return (<div class={'callout ' + type} {...args}>{children}</div>);
      }
    },

    alert: {
      view: function (_ctrl, args, children) {
        return (<f.callout type="alert" {...args}>{children}</f.callout>);
      }
    },

    warning: {
      view: function (_ctrl, args, children) {
        return (<f.callout type="warning" {...args}>{children}</f.callout>);
      }
    },

    info: {
      view: function (_ctrl, args, children) {
        return (<f.callout type="info" {...args}>{children}</f.callout>);
      }
    },

    infoToolTip: {
      view: function (_ctrl, args) {
        var content   = deleteKeyAndReturnValue(args, 'content'),
          tooltipId = 'info-tooltip-' + s.uuid();
        return (
          <span class={_.compact(['info-wrapper']).join(' ')}>
            <a href='javascript:void(0)'
               data-toggle={tooltipId}
               class='tooltip-info'/>
            <div id={tooltipId}
                 class={_.compact(['f-dropdown', 'dropdown-pane', 'content', 'tooltip-content']).join(' ')}
                 data-dropdown
                 data-hover='true'
                 data-hover-pane='true'
                 config={foundationReflow()}>
              {content}
            </div>
          </span>
        );
      }
    }

  };

  return f;
});