/*
 * Copyright 2019 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import m from "mithril";
import Stream from "mithril/stream";
import _ from "lodash";
import $ from "jquery";
import {angular} from 'angular';

const appName = function (configuration) {
  return `app-${configuration.uuid}`;
};

const controllerName = function (configuration) {
  return `controller-${configuration.uuid}`;
};

const pluginTemplate = function (pluginInfoSettings) {
  return m.trust(AngularPluginNew.template(pluginInfoSettings.viewTemplate()));
};

function onCreate(scope, args) {
  return function (vnode) {
    const elem = vnode.dom;

    angular.module(appName(args.configuration), []).controller(controllerName(args.configuration), ['$scope', function ($scope) {
      scope($scope);

      $scope.addError = function (field) {
        $scope.GOINPUTNAME[field.key] = {
          $error: {
            server: field.errors
          }
        };
      };

      $scope.clearErrors = function () {
        $scope.GOINPUTNAME = {};
      };

      const listeners = [];

      function unregisterExistingListeners() {
        if (listeners.length !== 0) {
          // we are re-initializing, so get rid of old watches
          _.map(listeners, (listener) => {
            listener();
          });
        }
      }

      function copyOverErrors(configurations, configKey) {
        const matchingConfig = configurations.findConfiguration(configKey);
        if (matchingConfig && matchingConfig.errors && matchingConfig.errors.length > 0) {
          $scope.addError({key: configKey, errors: matchingConfig.errors[0]});
        }
      }

      function addListeners(configurations, configKey) {
        const listener = $scope.$watch(configKey, (newValue) => {
          configurations.setConfiguration(configKey, newValue);
        });
        listeners.push(listener);
      }

      $scope.initialize = function (pluginInfoSettings, configurations) {
        unregisterExistingListeners();
        $scope.clearErrors();

        pluginInfoSettings.configurations().map((config) => {
          $scope[config.key] = configurations.valueFor(config.key);
          addListeners(configurations, config.key);
          copyOverErrors(configurations, config.key);
        });

        const supportedConfigKeys = pluginInfoSettings.configurations().map((configuration) => configuration.key);
        _.remove(configurations.configurations, (configuration) => {
          return !_.includes(supportedConfigKeys, configuration.key);
        });
      };

      $scope.initialize(args.pluginInfoSettings(), args.configuration);
    }]);

    angular.bootstrap(elem, [appName(args.configuration)]);
  };
}

function onUpdate(scope, args) {
  return function () {
    scope().initialize(args.pluginInfoSettings(), args.configuration);
    scope().$apply();
  };
}


const oncreate = function (vnode) {
  vnode.children.forEach((elem) => {
    if (!(elem.dom instanceof Element)) {
      return;
    }

    Array.from(elem.dom.querySelectorAll("script")).forEach((script) => {
      const newScript     = document.createElement('script');
      newScript.innerHTML = script.innerHTML;
      script.parentNode.replaceChild(newScript, script);
    });
  });
};

export const AngularPluginNew = {
  template(template) {
    return $('<div></div>').html(template.replace(/GOINPUTNAME\[([^\]]*)\]/g, (_match, name) => {
      return `GOINPUTNAME['${name}']`;
    })).html();
  },

  oninit() {
    this.$scope = Stream();
  },

  view(vnode) {
    return (
      <div class="plugin-view"
           ng-controller={controllerName(vnode.attrs.configuration)}
           oncreate={onCreate(vnode.state.$scope, vnode.attrs)}
           onupdate={onUpdate(vnode.state.$scope, vnode.attrs)}>
        {m.fragment({oncreate}, [pluginTemplate(vnode.attrs.pluginInfoSettings())])}
      </div>
    );
  },

  oncreate(vnode) {
    if (vnode.attrs.disabled) {
      const pluginView = document.getElementsByClassName("plugin-view");
      if (pluginView && pluginView.length) {
        const elementsToDisable = ["input", "textarea", "select"];
        elementsToDisable.forEach((elementName) => Array.from(pluginView[0].getElementsByTagName(elementName))
          .forEach((element) => element.setAttribute("disabled", "true")));
      }
    }
  }
};
