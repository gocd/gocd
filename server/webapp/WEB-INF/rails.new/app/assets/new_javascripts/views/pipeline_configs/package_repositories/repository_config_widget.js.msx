/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define(['mithril', 'helpers/form_helper', 'models/pipeline_configs/repositories', 'views/shared/new_modal',
  'views/pipeline_configs/package_repositories/repo_config_new_widget', 'views/pipeline_configs/package_repositories/repo_config_edit_widget', 'models/pipeline_configs/plugin_infos',
  'models/pipeline_configs/packages', 'views/pipeline_configs/package_repositories/package_config_widget', 'helpers/mithril_component_mixins'
], function (m, f, Repositories, Modal, RepositoryConfigNewWidget, RepositoryConfigEditWidget, PluginInfos, Packages, PackageConfigWidget, ComponentMixins) {

  var resolveRepository = function (ref, allRepositories, selectedRepositoryId, alwaysFind) {
    var repo;
    repo = allRepositories().findRepository(function (repository) {
      return repository.id() === selectedRepositoryId();
    });
    if (ref) {
      repo =  allRepositories().findRepositoryByPackageId(ref);
    }
    if (alwaysFind) {
      repo = allRepositories().findRepository(function (repository) {
        return repository.id() === selectedRepositoryId();
      });
    }
    return repo;
  };

  var addOrReplaceRepository = function (allRepositories, newRepository) {

    var existingRepo = allRepositories().findRepository(function (repository) {
      return repository.id() === newRepository.id();
    });

    if (_.isNil(existingRepo)) {
      allRepositories().addRepository(newRepository);
    } else {
      allRepositories().replaceRepository(newRepository, function (repo) {
        return repo.id() === newRepository.id();
      });
    }
  };

  var onSuccessOfRepoAPI = function (vm, modal, allRepositories, newRepository) {
    vm.saveSuccess();
    modal.destroy();
    var newRepo = Repositories.Repository.fromJSON(newRepository);
    addOrReplaceRepository(allRepositories, newRepo);
  };

  var onFailureOfRepoAPI = function (vm, data) {
    vm.saveFailed(data);
  };

  var NewRepositoryWidget = {
    controller: function (args) {
      var ctrl = {
        createRepository: function (repoForEdit, vm, modal) {
          repoForEdit().create().then(onSuccessOfRepoAPI.bind(this, vm, modal, args.repositories), onFailureOfRepoAPI.bind(this, vm));
        },

        create: function () {
          var repoForEdit = m.prop(Repositories.Repository.fromJSON({}));
          args.create(repoForEdit, RepositoryConfigNewWidget, 'Add Repository', 'add-repository', ctrl.createRepository);
        }
      };
      return ctrl;
    },

    view: function (ctrl, args) {
      return (
        <f.column class='no-repo' size={6} end="true">
          {args.repositories().isEmptyRepository() ?
            <div>
              <label>No repositories available.</label>
              <f.link class='add-button button' onclick={ctrl.create}>Create New Repository</f.link>
            </div>
            :
            <f.link class='add-button button-no-text button' onclick={ctrl.create}/>}
        </f.column>
      );
    }
  };

  var EditRepositoryWidget = {
    controller: function (args) {

      var ctrl = {

        editRepository: function (repoForEdit, vm, modal) {
          repoForEdit().update().then(onSuccessOfRepoAPI.bind(this, vm, modal, args.repositories), onFailureOfRepoAPI.bind(this, vm));
        },

        update: function () {
          var repoForEdit = m.prop(args.repository());
          args.create(repoForEdit, RepositoryConfigEditWidget, 'Edit Repository', 'edit-repository', ctrl.editRepository);
        },

        isPluginMissing: function () {
          return _.isNil(PluginInfos.findById(args.repository().pluginMetadata().id()));
        }
      };
      return ctrl;
    },

    view: function (ctrl, args) {
      var repository = args.repository();
      var data       = {
        Name:   repository.name(),
        Plugin: PluginInfos.findById(repository.pluginMetadata().id()).name()
      };

      repository.configuration().mapConfigurations(function (conf) {
        data[_.capitalize(conf.key())] = conf.isSecureValue() ? "***********" : conf.value();
      });

      var editButton = ctrl.isPluginMissing() ? (
          <f.alert><b>{repository.pluginMetadata().id()}</b> plugin seems to be removed.</f.alert>)
        : (<f.editButton onclick={ctrl.update}/>);

      return (
        <div class='repository'>
          {editButton}
          <dl class="key-value-pair">
            {_.map(data, function (v, k) {
              return [
                (<dt class={_.toLower(k)}>{k}</dt>),
                (<dd>{v}</dd>)
              ];
            })}
          </dl>
        </div>
      );
    }
  };

  var repositoryVM = {
    packageId: m.prop()
  };

  var SelectRepositoryWidget = {
    controller: function (args) {
      console.log('Select Repo config Widget');

      var ctrl = {
        args: args,
        selectedRepoId: m.prop(args.repositories().firstRepository().id()),
        selectedRepository: m.prop(args.repositories().firstRepository()),

        selectRepository: function (selectedRepoId, selectedRepository) {
          var existingRepository = resolveRepository(args.material.ref(), args.repositories, selectedRepoId, true);
          existingRepository.refresh().then(function (repository) {
            selectedRepoId(repository.id());
            selectedRepository(repository);
            if (!repository.packages().isEmptyPackage()) {
              var packageId = repository.packages().firstPackage().id();
              Packages.getPackage(packageId, args.material.package, args.material.ref, repository);
            }
            else {
              args.material.package(new Packages.Package({}));
              args.material.ref(null);
            }
          });
        }
      };


      var existingRepository = resolveRepository(args.material.ref(), args.repositories, ctrl.selectedRepoId, false);
      existingRepository.refresh().then(function (repository) {
        ctrl.selectedRepoId(repository.id());
        ctrl.selectedRepository(repository);
        if (!repository.packages().isEmptyPackage()) {
          var packageId = repository.packages().firstPackage().id();
          Packages.getPackage(packageId, args.material.package, args.material.ref, repository);
        }
        else {
          args.material.package(new Packages.Package({}));
          args.material.ref(null);
        }
      });
      return ctrl;
    },
    view: function (ctrl, args) {
      var items = [];

      args.repositories().eachRepository(function (repository) {
        var item     = {};
        item['id']   = repository.id();
        item['text'] = repository.name();
        items.push(item);
      });

      return (
        <div>
          <f.select model={ctrl}
                    attrName="selectedRepoId"
                    class="repo-selector"
                    items={items}
                    size={6}
                    onchange={ctrl.selectRepository.bind(ctrl, ctrl.selectedRepoId, ctrl.selectedRepository)}/>

          <EditRepositoryWidget repositories={args.repositories}
                                repository={ctrl.selectedRepository}
                                create={args.create}/>

          <PackageConfigWidget material={args.material}
                               repositories={args.repositories}
                               repository={ctrl.selectedRepository}
                               repositoryVM={repositoryVM}/>
        </div>
      );
    }
  };

  var RepositoryConfigWidget = {
    controller: function (args) {
      console.log('Repo config Widget');

      var ctrl = {
        args: args,
        create: function (repoForEdit, RepositoryConfigurationWidget, modalTitle, modalClass, performOperation) {
          var vm    = new Repositories.vm();
          var modal = new Modal({
            size:    'small',
            title:   modalTitle,
            class:   modalClass,
            body:    (<RepositoryConfigurationWidget repoForEdit={repoForEdit}
                                                     repositories={args.repositories}
                                                     vm={vm}/>),
            onclose: function () {
              vm.reset();
              modal.destroy();
            },
            buttons: [
              {
                text:    'Check Repository Connection',
                class:   'check_repo_connection secondary',
                onclick: function () {
                  //TODO: implement the check repository API
                }
              },
              {
                text:    'Save',
                class:   'save primary',
                onclick: function () {
                  vm.startUpdating();
                  performOperation(repoForEdit, vm, modal);
                }
              }
            ]
          });
          modal.render();
        }
      };

      ComponentMixins.HasViewModel.call(ctrl);
      return ctrl;
    },
    view: function (ctrl, args) {
      var selectRepository;

      if (!args.repositories().isEmptyRepository()) {
        selectRepository = (
          <SelectRepositoryWidget material={args.material}
                                  key="select-repository-widget"
                                  create={ctrl.create}
                                  vm={ctrl.vmState('repositories')}
                                  repositories={args.repositories}/>);
      }

      return (
        <div class="row expanded">
          <div class="columns medium-6">
            <div class="row expanded">
              <NewRepositoryWidget repositories={args.repositories}
                                   create={ctrl.create}
                                   key='new-repository-widget'/>
              {selectRepository}
            </div>
          </div>
        </div>
      );
    }
  };
  return RepositoryConfigWidget;
});